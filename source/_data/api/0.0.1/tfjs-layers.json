{
  "docs": {
    "headings": [
      {
        "name": "Constraints",
        "description": "",
        "subheadings": [
          {
            "name": "Classes",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Constraints",
                  "subheading": "Classes",
                  "namespace": "constraints"
                },
                "symbolName": "Constraint",
                "namespace": "constraints",
                "documentation": "Base class for functions that impose constraints on weight values",
                "fileName": "#31",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/constraints.ts#L31-L38",
                "methods": [],
                "isClass": true
              }
            ]
          },
          {
            "name": "",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Constraints",
                  "namespace": "constraints",
                  "useDocsFrom": "MaxNorm",
                  "configParamIndices": [
                    0
                  ],
                  "subheading": ""
                },
                "symbolName": "maxNorm",
                "namespace": "constraints",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "maxValue",
                    "documentation": "Maximum norm for incoming weights",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "axis",
                    "documentation": "Axis along which to calculate norms.\n\n  For instance, in a `Dense` layer the weight matrix\n  has shape `[inputDim, outputDim]`,\n  set `axis` to `0` to constrain each weight vector\n  of length `[inputDim,]`.\n  In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n  the weight tensor has shape\n  `[rows, cols, inputDepth, outputDepth]`,\n  set `axis` to `[0, 1, 2]`\n  to constrain the weights of each filter tensor of size\n  `[rows, cols, inputDepth]`.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Constraint",
                "documentation": "MaxNorm weight constraint.\n\nConstrains the weights incident to each hidden unit\nto have a norm less than or equal to a desired value.\n\nReferences\n       - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting\nSrivastava, Hinton, et al.\n2014](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)",
                "fileName": "#492",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L492-L500",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Constraints",
                  "namespace": "constraints",
                  "useDocsFrom": "UnitNorm",
                  "configParamIndices": [
                    0
                  ],
                  "subheading": ""
                },
                "symbolName": "unitNorm",
                "namespace": "constraints",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "Axis along which to calculate norms.\n\nFor instance, in a `Dense` layer the weight matrix\nhas shape `[inputDim, outputDim]`,\nset `axis` to `0` to constrain each weight vector\nof length `[inputDim,]`.\nIn a `Conv2D` layer with `dataFormat=\"channels_last\"`,\nthe weight tensor has shape\n[rows, cols, inputDepth, outputDepth]`,\nset `axis` to `[0, 1, 2]`\nto constrain the weights of each filter tensor of size\n`[rows, cols, inputDepth]`.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Constraint",
                "documentation": "Constrains the weights incident to each hidden unit to have unit norm.",
                "fileName": "#502",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L502-L510",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Constraints",
                  "namespace": "constraints",
                  "useDocsFrom": "NonNeg",
                  "subheading": ""
                },
                "symbolName": "nonNeg",
                "namespace": "constraints",
                "paramStr": "()",
                "parameters": [],
                "returnType": "Constraint",
                "documentation": "Constains the weight to be non-negative.",
                "fileName": "#512",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L512-L516",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Constraints",
                  "namespace": "constraints",
                  "useDocsFrom": "MinMaxNormConfig",
                  "configParamIndices": [
                    0
                  ],
                  "subheading": ""
                },
                "symbolName": "minMaxNorm",
                "namespace": "constraints",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "minValue",
                    "documentation": "Minimum norm for incoming weights",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "maxValue",
                    "documentation": "Maximum norm for incoming weights",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "axis",
                    "documentation": "Axis along which to calculate norms.\nFor instance, in a `Dense` layer the weight matrix\nhas shape `[inputDim, outputDim]`,\nset `axis` to `0` to constrain each weight vector\nof length `[inputDim,]`.\nIn a `Conv2D` layer with `dataFormat=\"channels_last\"`,\nthe weight tensor has shape\n`[rows, cols, inputDepth, outputDepth]`,\nset `axis` to `[0, 1, 2]`\nto constrain the weights of each filter tensor of size\n`[rows, cols, inputDepth]`.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "rate",
                    "documentation": "Rate for enforcing the constraint: weights will be rescaled to yield:\n`(1 - rate) * norm + rate * norm.clip(minValue, maxValue)`.\nEffectively, this means that rate=1.0 stands for strict\nenforcement of the constraint, while rate<1.0 means that\nweights will be rescaled at each step to slowly move\ntowards a value inside the desired interval.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Constraint",
                "documentation": "",
                "fileName": "#518",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L518-L526",
                "isFunction": true
              }
            ]
          }
        ]
      },
      {
        "name": "Initializers",
        "description": "",
        "subheadings": [
          {
            "name": "Classes",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Initializers",
                  "subheading": "Classes",
                  "namespace": "initializers"
                },
                "symbolName": "Initializer",
                "namespace": "initializers",
                "documentation": "Initializer base class.",
                "fileName": "#47",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/initializers.ts#L47-L68",
                "methods": [],
                "isClass": true
              }
            ]
          },
          {
            "name": "",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "Zeros",
                  "subheading": ""
                },
                "symbolName": "zeros",
                "namespace": "initializers",
                "paramStr": "()",
                "parameters": [],
                "returnType": "Initializer",
                "documentation": "Initializer that generates tensors initialized to 0.",
                "fileName": "#530",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L530-L537",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "Ones",
                  "subheading": ""
                },
                "symbolName": "ones",
                "namespace": "initializers",
                "paramStr": "()",
                "parameters": [],
                "returnType": "Initializer",
                "documentation": "Initializer that generates tensors initialized to 1.",
                "fileName": "#539",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L539-L543",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "Constant",
                  "configParamIndices": [
                    0
                  ],
                  "subheading": ""
                },
                "symbolName": "constant",
                "namespace": "initializers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "value",
                    "documentation": "The value for each element in the variable. ",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Initializer",
                "documentation": "Initializer that generates values initialized to some constant.",
                "fileName": "#545",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L545-L554",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "RandomUniform",
                  "configParamIndices": [
                    0
                  ],
                  "subheading": ""
                },
                "symbolName": "randomUniform",
                "namespace": "initializers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "minval",
                    "documentation": "Lower bound of the range of random values to generate. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "maxval",
                    "documentation": "Upper bound of the range of random values to generate. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "seed",
                    "documentation": "Used to seed the random generator. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Initializer",
                "documentation": "Initializer that generates random values initialized to a uniform\ndistribution.\n\nValues will be distributed uniformly between the configured minval and\nmaxval.",
                "fileName": "#556",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L556-L565",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "RandomNormal",
                  "configParamIndices": [
                    0
                  ],
                  "subheading": ""
                },
                "symbolName": "randomNormal",
                "namespace": "initializers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "mean",
                    "documentation": "Mean of the random values to generate. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "stddev",
                    "documentation": "Standard deviation of the random values to generate. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "seed",
                    "documentation": "Used to seed the random generator. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Initializer",
                "documentation": "Initializer that generates random values initialized to a normal\ndistribution.",
                "fileName": "#567",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L567-L576",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "TruncatedNormal",
                  "configParamIndices": [
                    0
                  ],
                  "subheading": ""
                },
                "symbolName": "truncatedNormal",
                "namespace": "initializers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "mean",
                    "documentation": "Mean of the random values to generate. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "stddev",
                    "documentation": "Standard deviation of the random values to generate. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "seed",
                    "documentation": "Used to seed the random generator. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Initializer",
                "documentation": "Initializer that generates random values initialized to a truncated normal.\ndistribution.\n\nThese values are similar to values from a `RandomNormal` except that values\nmore than two standard deviations from the mean are discarded and re-drawn.\nThis is the recommended initializer for neural network weights and filters.",
                "fileName": "#578",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L578-L587",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "Identity",
                  "configParamIndices": [
                    0
                  ],
                  "subheading": ""
                },
                "symbolName": "identity",
                "namespace": "initializers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "gain",
                    "documentation": "Multiplicative factor to apply to the identity matrix.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Initializer",
                "documentation": "Initializer that generates the identity matrix.\nOnly use for square 2D matrices.",
                "fileName": "#589",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L589-L598",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "VarianceScaling",
                  "configParamIndices": [
                    0
                  ],
                  "subheading": ""
                },
                "symbolName": "varianceScaling",
                "namespace": "initializers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "scale",
                    "documentation": "Scaling factor (positive float). ",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "mode",
                    "documentation": "Fanning mode for inputs and outputs. ",
                    "type": "FanMode",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "distribution",
                    "documentation": "Probabilistic distribution of the values. ",
                    "type": "Distribution",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "seed",
                    "documentation": "Random number generator seed. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Initializer",
                "documentation": "Initializer capable of adapting its scale to the shape of weights.\nWith distribution=NORMAL, samples are drawn from a truncated normal\ndistribution centered on zero, with `stddev = sqrt(scale / n)` where n is:\n   - number of input units in the weight tensor, if mode = FAN_IN.\n   - number of output units, if mode = FAN_OUT.\n   - average of the numbers of input and output units, if mode = FAN_AVG.\nWith distribution=UNIFORM,\nsamples are drawn from a uniform distribution\nwithin [-limit, limit], with `limit = sqrt(3 * scale / n)`.",
                "fileName": "#600",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L600-L609",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "GlorotUniform",
                  "configParamIndices": [
                    0
                  ],
                  "subheading": ""
                },
                "symbolName": "glorotUniform",
                "namespace": "initializers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "seed",
                    "documentation": "Random number generator seed. ",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Initializer",
                "documentation": "Glorot uniform initializer, also called Xavier uniform initializer.\nIt draws samples from a uniform distribution within [-limit, limit]\nwhere `limit` is `sqrt(6 / (fan_in + fan_out))`\nwhere `fan_in` is the number of input units in the weight tensor\nand `fan_out` is the number of output units in the weight tensor\n\nReference:\n   Glorot & Bengio, AISTATS 2010\n       http://jmlr.org/proceedings/papers/v9/glorot10a/glorot10a.pdf.",
                "fileName": "#611",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L611-L620",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "GlorotNormal",
                  "configParamIndices": [
                    0
                  ],
                  "subheading": ""
                },
                "symbolName": "glorotNormal",
                "namespace": "initializers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "seed",
                    "documentation": "Random number generator seed. ",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Initializer",
                "documentation": "Glorot normal initializer, also called Xavier normal initializer.\nIt draws samples from a truncated normal distribution centered on 0\nwith `stddev = sqrt(2 / (fan_in + fan_out))`\nwhere `fan_in` is the number of input units in the weight tensor\nand `fan_out` is the number of output units in the weight tensor.\n\nReference:\n   Glorot & Bengio, AISTATS 2010\n       http://jmlr.org/proceedings/papers/v9/glorot10a/glorot10a.pdf",
                "fileName": "#622",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L622-L631",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "HeNormal",
                  "configParamIndices": [
                    0
                  ],
                  "subheading": ""
                },
                "symbolName": "heNormal",
                "namespace": "initializers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "seed",
                    "documentation": "Random number generator seed. ",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Initializer",
                "documentation": "He normal initializer.\n\nIt draws samples from a truncated normal distribution centered on 0\nwith `stddev = sqrt(2 / fanIn)`\nwhere `fanIn` is the number of input units in the weight tensor.\n\nReference:\n     He et al., http://arxiv.org/abs/1502.01852",
                "fileName": "#633",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L633-L642",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "LeCunNormal",
                  "configParamIndices": [
                    0
                  ],
                  "subheading": ""
                },
                "symbolName": "leCunNormal",
                "namespace": "initializers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "seed",
                    "documentation": "Random number generator seed. ",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Initializer",
                "documentation": "LeCun normal initializer.\n\nIt draws samples from a truncated normal distribution centered on 0\nwith `stddev = sqrt(1 / fanIn)`\nwhere `fanIn` is the number of input units in the weight tensor.\n\nReferences:\n   [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n   [Efficient Backprop](http://yann.lecun.com/exdb/publis/pdf/lecun-98b.pdf)",
                "fileName": "#645",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L645-L654",
                "isFunction": true
              }
            ]
          }
        ]
      },
      {
        "name": "Regularizers",
        "description": "",
        "subheadings": [
          {
            "name": "",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Regularizers",
                  "namespace": "regularizers",
                  "subheading": ""
                },
                "symbolName": "L1L2",
                "namespace": "regularizers",
                "documentation": "Regularizer for L1 and L2 regularization.\n\nAdds a term to the loss to penalize large weights:\nloss += sum(l1 * abs(x)) + sum(l2 * x^2)",
                "fileName": "#51",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/regularizers.ts#L51-L92",
                "methods": [],
                "isClass": true,
                "inheritsFrom": "Regularizer"
              },
              {
                "docInfo": {
                  "heading": "Regularizers",
                  "namespace": "regularizers",
                  "useDocsFrom": "L1L2",
                  "subheading": ""
                },
                "symbolName": "l1l2",
                "namespace": "regularizers",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "L1L2Config",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "L1L2",
                "documentation": "Regularizer for L1 and L2 regularization.\n\nAdds a term to the loss to penalize large weights:\nloss += sum(l1 * abs(x)) + sum(l2 * x^2)",
                "fileName": "#658",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L658-L662",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Regularizers",
                  "namespace": "regularizers",
                  "useDocsFrom": "L1L2",
                  "subheading": ""
                },
                "symbolName": "l1",
                "namespace": "regularizers",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "L1Config",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "L1L2",
                "documentation": "Regularizer for L1 and L2 regularization.\n\nAdds a term to the loss to penalize large weights:\nloss += sum(l1 * abs(x)) + sum(l2 * x^2)",
                "fileName": "#664",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L664-L668",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Regularizers",
                  "namespace": "regularizers",
                  "useDocsFrom": "L1L2",
                  "subheading": ""
                },
                "symbolName": "l2",
                "namespace": "regularizers",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "L2Config",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "L1L2",
                "documentation": "Regularizer for L1 and L2 regularization.\n\nAdds a term to the loss to penalize large weights:\nloss += sum(l1 * abs(x)) + sum(l2 * x^2)",
                "fileName": "#670",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L670-L674",
                "isFunction": true
              }
            ]
          }
        ]
      },
      {
        "name": "Layers",
        "description": "",
        "subheadings": [
          {
            "name": "Classes",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Classes",
                  "namespace": "layers"
                },
                "symbolName": "Layer",
                "namespace": "layers",
                "documentation": "A layer is a grouping of operations and weights that can be composed to\ncreate a `Model`.\n\nLayers are constructed by using the functions under the\n[tf.layers](#Layers-Core) namespace.",
                "fileName": "#331",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/engine/topology.ts#L331-L1173",
                "methods": [
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes"
                    },
                    "symbolName": "apply",
                    "paramStr": "(inputs, kwargs?)",
                    "parameters": [
                      {
                        "name": "inputs",
                        "documentation": "Can be a tensor or list/tuple of tensors.",
                        "type": "Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[]",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "kwargs",
                        "documentation": "Additional keyword arguments to be passed to `call()`.",
                        "type": "any",
                        "optional": true,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[]",
                    "documentation": "Wrapper around this.call(), for handling internal references.\n\nThis is a replacement for __call__() in Python.\n\nIf a `SymbolicTensor` is passed:\n   - We call this.addInboundNode().\n   - If necessary, we `build` the layer to match\n       the shape of the input(s).\n   - We update the shape of every input tensor with\n       its new shape (obtained via self.computeOutputShape).\n       This is done as part of addInboundNode().\n   - We update the history of the output tensor(s)\n       with the current layer.\n       This is done as part of addInboundNode().",
                    "fileName": "#780",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/engine/topology.ts#L780-L894",
                    "isFunction": true
                  }
                ],
                "isClass": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Classes"
                },
                "symbolName": "RNNCell",
                "documentation": "An RNNCell layer.",
                "fileName": "#653",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/layers/recurrent.ts#L653-L660",
                "methods": [],
                "isClass": true,
                "inheritsFrom": "Layer"
              }
            ]
          },
          {
            "name": "Convolutional",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Convolutional",
                  "namespace": "layers",
                  "useDocsFrom": "Conv1D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "conv1d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "kernelSize",
                    "documentation": "The dimensions of the convolution window. If kernelSize is a number, the\nconvolutional window will be square.",
                    "type": "number|number[]",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "filters",
                    "documentation": "The dimensionality of the output space (i.e. the number of filters in the\nconvolution).",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "strides",
                    "documentation": "The strides of the convolution in each dimension. If strides is a number,\nstrides in both dimensions are equal.\n\nSpecifying any stride value != 1 is incompatible with specifying any\n`dilationRate` value != 1.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "padding",
                    "documentation": "Padding mode.",
                    "type": "PaddingMode",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dataFormat",
                    "documentation": "Format of the data, which determines the ordering of the dimensions in\nthe inputs.\n\n`channels_last` corresponds to inputs with shape\n   `(batch, ..., channels)`\n\n  `channels_first` corresponds to inputs with shape `(batch, channels,\n...)`.\n\nDefaults to `channels_last`.",
                    "type": "DataFormat",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dilationRate",
                    "documentation": "The dilation rate to use for the dilated convolution in each dimension.\nShould be an integer or array of integers.\n\nCurrently, specifying any `dilationRate` value != 1 is incompatible with\nspecifying any `strides` value != 1.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "activation",
                    "documentation": "Activation function of the layer.\n\nIf you don't specify the activation, none is applied.",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "useBias",
                    "documentation": "Whether the layer uses a bias vector. Defaults to false.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelInitializer",
                    "documentation": "Initializer for the convolutional kernel weights matrix.",
                    "type": "'Constant'|'GlorotNormal'|'GlorotUniform'|\n    'HeNormal'|'Identity'|'LeCunNormal'|'Ones'|'RandomNormal'|'RandomUniform'|\n    'TruncatedNormal'|'VarianceScaling'|'Zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasInitializer",
                    "documentation": "Initializer for the bias vector.",
                    "type": "'Constant'|'GlorotNormal'|'GlorotUniform'|\n    'HeNormal'|'Identity'|'LeCunNormal'|'Ones'|'RandomNormal'|'RandomUniform'|\n    'TruncatedNormal'|'VarianceScaling'|'Zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelConstraint",
                    "documentation": "Constraint for the convolutional kernel weights.",
                    "type": "'MaxNorm'|'MinMaxNorm'|'NonNeg'|'UnitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasConstraint",
                    "documentation": "Constraint for the bias vector.",
                    "type": "'MaxNorm'|'MinMaxNorm'|'NonNeg'|'UnitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelRegularizer",
                    "documentation": "Regularizer function applied to the kernel weights matrix.",
                    "type": "'L1L2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasRegularizer",
                    "documentation": "Regularizer function applied to the bias vector.",
                    "type": "'L1L2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "activityRegularizer",
                    "documentation": "Regularizer function applied to the activation.",
                    "type": "'L1L2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "1D convolution layer (e.g., temporal convolution).\n\nThis layer creates a convolution kernel that is convolved\nwith the layer input over a single spatial (or temporal) dimension\nto produce a tensor of outputs.\n\nIf `use_bias` is True, a bias vector is created and added to the outputs.\n\nIf `activation` is not `null`, it is applied to the outputs as well.\n\nWhen using this layer as the first layer in a model, provide an `inputShape`\nargument `Array` or `null`.\n\nFor example, `inputShape` would be:\n- `[10, 128]` for sequences of 10 vectors of 128-dimensional vectors\n- `[null, 128]` for variable-length sequences of 128-dimensional vectors.",
                "fileName": "#104",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L104-L113",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Convolutional",
                  "namespace": "layers",
                  "useDocsFrom": "Conv2D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "conv2d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "kernelSize",
                    "documentation": "The dimensions of the convolution window. If kernelSize is a number, the\nconvolutional window will be square.",
                    "type": "number|number[]",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "filters",
                    "documentation": "The dimensionality of the output space (i.e. the number of filters in the\nconvolution).",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "strides",
                    "documentation": "The strides of the convolution in each dimension. If strides is a number,\nstrides in both dimensions are equal.\n\nSpecifying any stride value != 1 is incompatible with specifying any\n`dilationRate` value != 1.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "padding",
                    "documentation": "Padding mode.",
                    "type": "PaddingMode",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dataFormat",
                    "documentation": "Format of the data, which determines the ordering of the dimensions in\nthe inputs.\n\n`channels_last` corresponds to inputs with shape\n   `(batch, ..., channels)`\n\n  `channels_first` corresponds to inputs with shape `(batch, channels,\n...)`.\n\nDefaults to `channels_last`.",
                    "type": "DataFormat",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dilationRate",
                    "documentation": "The dilation rate to use for the dilated convolution in each dimension.\nShould be an integer or array of integers.\n\nCurrently, specifying any `dilationRate` value != 1 is incompatible with\nspecifying any `strides` value != 1.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "activation",
                    "documentation": "Activation function of the layer.\n\nIf you don't specify the activation, none is applied.",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "useBias",
                    "documentation": "Whether the layer uses a bias vector. Defaults to false.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelInitializer",
                    "documentation": "Initializer for the convolutional kernel weights matrix.",
                    "type": "'Constant'|'GlorotNormal'|'GlorotUniform'|\n    'HeNormal'|'Identity'|'LeCunNormal'|'Ones'|'RandomNormal'|'RandomUniform'|\n    'TruncatedNormal'|'VarianceScaling'|'Zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasInitializer",
                    "documentation": "Initializer for the bias vector.",
                    "type": "'Constant'|'GlorotNormal'|'GlorotUniform'|\n    'HeNormal'|'Identity'|'LeCunNormal'|'Ones'|'RandomNormal'|'RandomUniform'|\n    'TruncatedNormal'|'VarianceScaling'|'Zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelConstraint",
                    "documentation": "Constraint for the convolutional kernel weights.",
                    "type": "'MaxNorm'|'MinMaxNorm'|'NonNeg'|'UnitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasConstraint",
                    "documentation": "Constraint for the bias vector.",
                    "type": "'MaxNorm'|'MinMaxNorm'|'NonNeg'|'UnitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelRegularizer",
                    "documentation": "Regularizer function applied to the kernel weights matrix.",
                    "type": "'L1L2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasRegularizer",
                    "documentation": "Regularizer function applied to the bias vector.",
                    "type": "'L1L2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "activityRegularizer",
                    "documentation": "Regularizer function applied to the activation.",
                    "type": "'L1L2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "2D convolution layer (e.g. spatial convolution over images).\n\nThis layer creates a convolution kernel that is convolved\nwith the layer input to produce a tensor of outputs.\n\nIf `useBias` is True, a bias vector is created and added to the outputs.\n\nIf `activation` is not `null`, it is applied to the outputs as well.\n\nWhen using this layer as the first layer in a model, `inputShape` should be\nspecified. `inputShape` is array of integers which does not include the\nsample axis.\n\ne.g. `inputShape=[128, 128, 3]` for 128x128 RGB pictures in\n`dataFormat=DataFormat.CHANNEL_LAST`.",
                "fileName": "#115",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L115-L124",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Convolutional",
                  "namespace": "layers",
                  "useDocsFrom": "DepthwiseConv2D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "depthwiseConv2d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "kernelSize",
                    "documentation": "An integer or Array of 2 integers, specifying the width and height of the\n2D convolution window. Can be a single integer to specify the same value\nfor all spatial dimensions.",
                    "type": "number|[number, number]",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "depthMultiplier",
                    "documentation": "The number of depthwise convolution output channels for each input\nchannel.\nThe total number of depthwise convolution output channels will be equal to\n`filtersIn * depthMultiplier`.\nDefault: 1.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "depthwiseInitializer",
                    "documentation": "Initializer for the depthwise kernel matrix.\nDefault: GlorotNormal.",
                    "type": "'Constant'|'GlorotNormal'|'GlorotUniform'|\n    'HeNormal'|'Identity'|'LeCunNormal'|'Ones'|'RandomNormal'|'RandomUniform'|\n    'TruncatedNormal'|'VarianceScaling'|'Zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "depthwiseConstraint",
                    "documentation": "Constraint for the depthwise kernel matrix.",
                    "type": "'MaxNorm'|'MinMaxNorm'|'NonNeg'|'UnitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "depthwiseRegularizer",
                    "documentation": "Regulzarizer function for the depthwise kernel matrix.",
                    "type": "'L1L2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Depthwise separable 2D convolution.\n\nDepthwise Separable convolutions consists in performing just the first step\nin a depthwise spatial convolution (which acts on each input channel\nseparately). The `depthMultplier` argument controls how many output channels\nare generated per input channel in the depthwise step.",
                "fileName": "#128",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L128-L137",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Core",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Core",
                  "namespace": "layers",
                  "useDocsFrom": "Activation",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "activation",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "activation",
                    "documentation": "Name of the activation function to use.",
                    "type": "'elu'|'hardsigmoid'|'linear'|'relu'|'relu6'|\n    'selu'|'sigmoid'|'softmax'|'softplus'|'softsign'|'tanh'|string",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Applies an activation function to an output.",
                "fileName": "#140",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L140-L149",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Core",
                  "namespace": "layers",
                  "useDocsFrom": "Dense",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "dense",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "units",
                    "documentation": "Positive integer, dimensionality of the output space. ",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "activation",
                    "documentation": "Activation function to use.\n\nIf unspecified, no activation is applied.",
                    "type": "'elu'|'hardsigmoid'|'linear'|'relu'|'relu6'|\n    'selu'|'sigmoid'|'softmax'|'softplus'|'softsign'|'tanh'|string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "useBias",
                    "documentation": "Whether to apply a bias. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelInitializer",
                    "documentation": "Initializer for the dense kernel weights matrix.",
                    "type": "'Constant'|'GlorotNormal'|'GlorotUniform'|\n    'HeNormal'|'Identity'|'LeCunNormal'|'Ones'|'RandomNormal'|'RandomUniform'|\n    'TruncatedNormal'|'VarianceScaling'|'Zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasInitializer",
                    "documentation": "Initializer for the bias vector.",
                    "type": "'Constant'|'GlorotNormal'|'GlorotUniform'|\n    'HeNormal'|'Identity'|'LeCunNormal'|'Ones'|'RandomNormal'|'RandomUniform'|\n    'TruncatedNormal'|'VarianceScaling'|'Zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "inputDim",
                    "documentation": "If specified, defines inputShape as `[inputDim]`.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelConstraint",
                    "documentation": "Constraint for the kernel weights.",
                    "type": "'MaxNorm'|'MinMaxNorm'|'NonNeg'|'UnitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasConstraint",
                    "documentation": "Constraint for the bias vector.",
                    "type": "'MaxNorm'|'MinMaxNorm'|'NonNeg'|'UnitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelRegularizer",
                    "documentation": "Regularizer function applied to the dense kernel weights matrix.",
                    "type": "'L1L2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasRegularizer",
                    "documentation": "Regularizer function applied to the bias vector.",
                    "type": "'L1L2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "activityRegularizer",
                    "documentation": "Regularizer function applied to the activation.",
                    "type": "'L1L2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Creates a dense (fully connected) layer.\n\nThis layer implements the operation:\n   `output = activation(dot(input, kernel) + bias)`\n\n`activation` is the element-wise activation function\n   passed as the `activation` argument.\n\n`kernel` is a weights matrix created by the layer.\n\n`bias` is a bias vector created by the layer (only applicable if `useBias`\nis `true`).\n\n**Input shape:**\n\n   nD `Tensor` with shape: `(batchSize, ..., inputDim)`.\n\n   The most common situation would be\n   a 2D input with shape `(batchSize, inputDim)`.\n\n**Output shape:**\n\n   nD tensor with shape: `(batchSize, ..., units)`.\n\n   For instance, for a 2D input with shape `(batchSize, inputDim)`,\n   the output would have shape `(batchSize, units)`.\n\nNote: if the input to the layer has a rank greater than 2, then it is\nflattened prior to the initial dot product with the kernel.",
                "fileName": "#151",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L151-L160",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Core",
                  "namespace": "layers",
                  "useDocsFrom": "Dropout",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "dropout",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "rate",
                    "documentation": "Float between 0 and 1. Fraction of the input units to drop. ",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "noiseShape",
                    "documentation": "Integer array representing the shape of the binary dropout mask that will\nbe multiplied with the input.\n\nFor instance, if your inputs have shape `(batchSize, timesteps, features)`\nand you want the dropout mask to be the same for all timesteps, you can use\n`noise_shape=(batch_size, 1, features)`.",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "seed",
                    "documentation": "An integer to use as random seed. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Applies\n[dropout](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf) to\nthe input.\n\nDropout consists in randomly setting a fraction `rate` of input units to 0 at\neach update during training time, which helps prevent overfitting.",
                "fileName": "#162",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L162-L171",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Core",
                  "namespace": "layers",
                  "useDocsFrom": "Flatten",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "flatten",
                "namespace": "layers",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "inputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchInputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchSize",
                    "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "Name for this layer. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "trainable",
                    "documentation": "Whether this layer is trainable. Defaults to true. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "updatable",
                    "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "weights",
                    "documentation": "Initial weight values of the layer.",
                    "type": "Tensor[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "inputDType",
                    "documentation": "Legacy support. Do not use for new code. ",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Flattens the input. Does not affect the batch size.\n\nA `Flatten` layer flattens each batch in its inputs to 1D (making the output\n2D).\n\nFor example:\n\n```js\nconst input = tf.input({shape: [4, 3]});\nconst flattenLayer = tf.layers.flatten();\n// Inspect the inferred output shape of the flatten layer, which\n// equals `[null, 12]`. The 2nd dimension is 4 * 3, i.e., the result of the\n// flattening. (The 1st dimension is the undermined batch size.)\nconsole.log(flattenLayer.apply(input).shape);\n```",
                "fileName": "#173",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L173-L182",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Core",
                  "namespace": "layers",
                  "useDocsFrom": "RepeatVector",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "repeatVector",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "n",
                    "documentation": "The integer number of times to repeat the input.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Repeat the input n times.",
                "fileName": "#184",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L184-L193",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Core",
                  "namespace": "layers",
                  "useDocsFrom": "Embedding",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "embedding",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "inputDim",
                    "documentation": "Integer > 0. Size of the vocabulary, i.e. maximum integer index + 1.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "outputDim",
                    "documentation": "Integer >= 0. Dimension of the dense embedding.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "embeddingsInitializer",
                    "documentation": "Initializer for the `embeddings` matrix.",
                    "type": "'Constant'|'GlorotNormal'|'GlorotUniform'|\n    'HeNormal'|'Identity'|'LeCunNormal'|'Ones'|'RandomNormal'|'RandomUniform'|\n    'TruncatedNormal'|'VarianceScaling'|'Zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "embeddingsRegularizer",
                    "documentation": "Regularizer function applied to the `embeddings` matrix.",
                    "type": "'L1L2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "activityRegularizer",
                    "documentation": "Regularizer function applied to the activation.",
                    "type": "'L1L2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "embeddingsConstraint",
                    "documentation": "Constraint function applied to the `embeddings` matrix.",
                    "type": "'MaxNorm'|'MinMaxNorm'|'NonNeg'|'UnitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "maskZero",
                    "documentation": "Whether the input value 0 is a special \"padding\" value that should be\nmasked out. This is useful when using recurrent layers which may take\nvariable length input.\n\nIf this is `True` then all subsequent layers in the model need to support\nmasking or an exception will be raised. If maskZero is set to `True`, as a\nconsequence, index 0 cannot be used in the vocabulary (inputDim should\nequal size of vocabulary + 1).",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "inputLength",
                    "documentation": "Length of input sequences, when it is constant.\n\nThis argument is required if you are going to connect `flatten` then\n`dense` layers upstream (without it, the shape of the dense outputs cannot\nbe computed).",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Maps positive integers (indices) into dense vectors of fixed size.\neg. [[4], [20]] -> [[0.25, 0.1], [0.6, -0.2]]\n\n**Input shape:** 2D tensor with shape: `[batchSize, sequenceLength]`.\n\n**Output shape:** 3D tensor with shape: `[batchSize, sequenceLength,\noutputDim]`.",
                "fileName": "#195",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L195-L204",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Merge",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Merge",
                  "namespace": "layers",
                  "useDocsFrom": "Add",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "add",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "inputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchInputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchSize",
                    "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "Name for this layer. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "trainable",
                    "documentation": "Whether this layer is trainable. Defaults to true. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "updatable",
                    "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "weights",
                    "documentation": "Initial weight values of the layer.",
                    "type": "Tensor[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "inputDType",
                    "documentation": "Legacy support. Do not use for new code. ",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Layer that adds a list of inputs.\n\nIt takes as input a list of tensors, all of the same shape, and returns a\nsingle tensor (also of the same shape).",
                "fileName": "#208",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L208-L217",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Merge",
                  "namespace": "layers",
                  "useDocsFrom": "Average",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "average",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "inputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchInputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchSize",
                    "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "Name for this layer. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "trainable",
                    "documentation": "Whether this layer is trainable. Defaults to true. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "updatable",
                    "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "weights",
                    "documentation": "Initial weight values of the layer.",
                    "type": "Tensor[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "inputDType",
                    "documentation": "Legacy support. Do not use for new code. ",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Layer that averages a list of inputs.\n\nIt takes as input a list of tensors, all of the same shape, and returns a\nsingle tensor (also of the same shape).",
                "fileName": "#219",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L219-L228",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Merge",
                  "namespace": "layers",
                  "useDocsFrom": "Concatenate",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "concatenate",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "Axis along which to concatenate.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Layer that concatenates a list of inputs.\n\nIt takes a list of tensors, all of the same shape except for the\nconcatenation axis, and returns a single tensor, the concatenation\nof all inputs.",
                "fileName": "#230",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L230-L239",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Merge",
                  "namespace": "layers",
                  "useDocsFrom": "Maximum",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "maximum",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "inputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchInputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchSize",
                    "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "Name for this layer. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "trainable",
                    "documentation": "Whether this layer is trainable. Defaults to true. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "updatable",
                    "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "weights",
                    "documentation": "Initial weight values of the layer.",
                    "type": "Tensor[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "inputDType",
                    "documentation": "Legacy support. Do not use for new code. ",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Layer that computes the maximum (element-wise) a list of inputs.\n\nIt takes as input a list of tensors, all of the same shape and returns a\nsingle tensor (also of the same shape).",
                "fileName": "#241",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L241-L250",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Merge",
                  "namespace": "layers",
                  "useDocsFrom": "Minimum",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "minimum",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "inputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchInputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchSize",
                    "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "Name for this layer. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "trainable",
                    "documentation": "Whether this layer is trainable. Defaults to true. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "updatable",
                    "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "weights",
                    "documentation": "Initial weight values of the layer.",
                    "type": "Tensor[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "inputDType",
                    "documentation": "Legacy support. Do not use for new code. ",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Layer that computes the minimum (element-wise) a list of inputs.\n\nIt takes as input a list of tensors, all of the same shape and returns a\nsingle tensor (also of the same shape).",
                "fileName": "#252",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L252-L261",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Merge",
                  "namespace": "layers",
                  "useDocsFrom": "Multiply",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "multiply",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "inputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchInputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchSize",
                    "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "Name for this layer. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "trainable",
                    "documentation": "Whether this layer is trainable. Defaults to true. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "updatable",
                    "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "weights",
                    "documentation": "Initial weight values of the layer.",
                    "type": "Tensor[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "inputDType",
                    "documentation": "Legacy support. Do not use for new code. ",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Layer that multiplies (element-wise) an Array of inputs.\n\nIt takes as input an Array of tensors, all of the same\nshape, and returns a single tensor (also of the same shape).",
                "fileName": "#263",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L263-L272",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Normalization",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Normalization",
                  "namespace": "layers",
                  "useDocsFrom": "BatchNormalization",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "batchNormalization",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The integer axis that should be normalized (typically the features axis).\nDefaults to -1.\n\nFor instance, after a `Conv2D` layer with `data_format=\"channels_first\"`,\nset `axis=1` in `batchNormalization`.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "momentum",
                    "documentation": "Momentum of the moving average. Defaults to 0.99.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "epsilon",
                    "documentation": "Small float added to the variance to avoid dividing by zero. Defaults to\n1e-3.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "center",
                    "documentation": "If `true`, add offset of `beta` to normalized tensor.\nIf `false`, `beta` is ignored.\nDefaults to true.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "scale",
                    "documentation": "If `true`, multiply by `gamma`.\nIf `false`, `gamma` is not used.\nWhen the next layer is linear (also e.g. `nn.relu`),\nthis can be disabled since the scaling will be done by the next layer.\nDefaults to true.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "betaInitializer",
                    "documentation": "Initializer for the beta weight.\n  Defaults to 'Zeros'.",
                    "type": "'Constant'|'GlorotNormal'|'GlorotUniform'|\n    'HeNormal'|'Identity'|'LeCunNormal'|'Ones'|'RandomNormal'|'RandomUniform'|\n    'TruncatedNormal'|'VarianceScaling'|'Zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "gammaInitializer",
                    "documentation": "Initializer for the gamma weight.\n  Defaults to 'Ones'.",
                    "type": "'Constant'|'GlorotNormal'|'GlorotUniform'|\n    'HeNormal'|'Identity'|'LeCunNormal'|'Ones'|'RandomNormal'|'RandomUniform'|\n    'TruncatedNormal'|'VarianceScaling'|'Zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "movingMeanInitializer",
                    "documentation": "Initializer for the moving mean.\nDefaults to 'Zeros'",
                    "type": "'Constant'|'GlorotNormal'|'GlorotUniform'|\n    'HeNormal'|'Identity'|'LeCunNormal'|'Ones'|'RandomNormal'|'RandomUniform'|\n    'TruncatedNormal'|'VarianceScaling'|'Zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "movingVarianceInitializer",
                    "documentation": "Initializer for the moving variance.\n  Defaults to 'Ones'.",
                    "type": "'Constant'|'GlorotNormal'|'GlorotUniform'|\n    'HeNormal'|'Identity'|'LeCunNormal'|'Ones'|'RandomNormal'|'RandomUniform'|\n    'TruncatedNormal'|'VarianceScaling'|'Zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "betaConstraint",
                    "documentation": "Constraint for the beta weight.",
                    "type": "'MaxNorm'|'MinMaxNorm'|'NonNeg'|'UnitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "gammaConstraint",
                    "documentation": "Constraint for gamma weight.",
                    "type": "'MaxNorm'|'MinMaxNorm'|'NonNeg'|'UnitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "betaRegularizer",
                    "documentation": "Regularizer for the beta weight.",
                    "type": "'L1L2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "gammaRegularizer",
                    "documentation": "Regularizer for the gamma weight.",
                    "type": "'L1L2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Batch normalization layer (Ioffe and Szegedy, 2014).\n\nNormalize the activations of the previous layer at each batch,\ni.e. applies a transformation that maintains the mean activation\nclose to 0 and the activation standard deviation close to 1.\n\nInput shape:\n   Arbitrary. Use the keyword argument `inputShape` (Array of integers, does\n   not include the sample axis) when calling the constructor of this class,\n   if this layer is used as a first layer in a model.\n\nOutput shape:\n   Same shape as input.\n\nReferences:\n   - [Batch Normalization: Accelerating Deep Network Training by Reducing\nInternal Covariate Shift](https://arxiv.org/abs/1502.03167)",
                "fileName": "#276",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L276-L285",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Pooling",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "AvgPooling1D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "avgPooling1d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "poolSize",
                    "documentation": "Size of the window to pool over, should be an integer.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "strides",
                    "documentation": "Period at which to sample the pooled values.\n\nIf `null`, defaults to `poolSize`.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "padding",
                    "documentation": "PaddingMode.VALID or PaddingMode.SAME ",
                    "type": "PaddingMode",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Average pooling operation for spatial data.\n\nInput shape: `[batchSize, inLength, channels]`\n\nOutput shape: `[batchSize, pooledLength, channels]`",
                "fileName": "#288",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L288-L297",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "AvgPooling2D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "avgPooling2d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "poolSize",
                    "documentation": "Factors by which to downscale in each dimension [vertical, horizontal].\nExpects an integer or an array of 2 integers.\n\nFor example, `[2, 2]` will halve the input in both spatial dimension.\nIf only one integer is specified, the same window length\nwill be used for both dimensions.",
                    "type": "number|[number, number]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "strides",
                    "documentation": "The size of the stride in each dimension of the pooling window. Expects an\ninteger or an array of 2 integers. Integer, tuple of 2 integers, or None.\n\nIf `null`, defaults to `poolSize`.",
                    "type": "[number, number]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "padding",
                    "documentation": "The padding type to use for the pooling layer. ",
                    "type": "PaddingMode",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dataFormat",
                    "documentation": "The data format to use for the pooling layer. ",
                    "type": "DataFormat",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Average pooling operation for spatial data.\n\nInput shape:\n  - If `dataFormat === CHANNEL_LAST`:\n      4D tensor with shape:\n      `[batchSize, rows, cols, channels]`\n  - If `dataFormat === CHANNEL_FIRST`:\n      4D tensor with shape:\n      `[batchSize, channels, rows, cols]`\n\nOutput shape\n  - If `dataFormat === CHANNEL_LAST`:\n      4D tensor with shape:\n      `[batchSize, pooleRows, pooledCols, channels]`\n  - If `dataFormat === CHANNEL_FIRST`:\n      4D tensor with shape:\n      `[batchSize, channels, pooleRows, pooledCols]`",
                "fileName": "#299",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L299-L308",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "GlobalAveragePooling1D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "globalAveragePooling1d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "inputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchInputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchSize",
                    "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "Name for this layer. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "trainable",
                    "documentation": "Whether this layer is trainable. Defaults to true. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "updatable",
                    "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "weights",
                    "documentation": "Initial weight values of the layer.",
                    "type": "Tensor[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "inputDType",
                    "documentation": "Legacy support. Do not use for new code. ",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Global average pooling operation for temporal data.\n\nInput Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n\nOutput Shape:2D tensor with shape: `[batchSize, features]`.",
                "fileName": "#310",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L310-L319",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "GlobalAveragePooling2D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "globalAveragePooling2d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dataFormat",
                    "documentation": "One of `CHANNEL_LAST` (default) or `CHANNEL_FIRST`.\n\nThe ordering of the dimensions in the inputs. `CHANNEL_LAST` corresponds\nto inputs with shape `[batch, height, width, channels[` while\n`CHANNEL_FIRST` corresponds to inputs with shape\n`[batch, channels, height, width]`.",
                    "type": "DataFormat",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Global average pooling operation for spatial data.\n\nInput shape:\n   - If `dataFormat` is `CHANNEL_LAST`:\n       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n   - If `dataFormat` is `CHANNEL_FIRST`:\n       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n\nOutput shape:\n   2D tensor with shape: `[batchSize, channels]`.",
                "fileName": "#321",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L321-L330",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "GlobalMaxPooling1D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "globalMaxPooling1d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "inputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchInputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchSize",
                    "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "Name for this layer. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "trainable",
                    "documentation": "Whether this layer is trainable. Defaults to true. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "updatable",
                    "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "weights",
                    "documentation": "Initial weight values of the layer.",
                    "type": "Tensor[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "inputDType",
                    "documentation": "Legacy support. Do not use for new code. ",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Global max pooling operation for temporal data.\n\nInput Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n\nOutput Shape:2D tensor with shape: `[batchSize, features]`.",
                "fileName": "#332",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L332-L341",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "GlobalMaxPooling2D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "globalMaxPooling2d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dataFormat",
                    "documentation": "One of `CHANNEL_LAST` (default) or `CHANNEL_FIRST`.\n\nThe ordering of the dimensions in the inputs. `CHANNEL_LAST` corresponds\nto inputs with shape `[batch, height, width, channels[` while\n`CHANNEL_FIRST` corresponds to inputs with shape\n`[batch, channels, height, width]`.",
                    "type": "DataFormat",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Global max pooling operation for spatial data.\n\nInput shape:\n   - If `dataFormat` is `CHANNEL_LAST`:\n       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n   - If `dataFormat` is `CHANNEL_FIRST`:\n       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n\nOutput shape:\n   2D tensor with shape: `[batchSize, channels]`.",
                "fileName": "#343",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L343-L352",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "MaxPooling1D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "maxPooling1d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "poolSize",
                    "documentation": "Size of the window to pool over, should be an integer.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "strides",
                    "documentation": "Period at which to sample the pooled values.\n\nIf `null`, defaults to `poolSize`.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "padding",
                    "documentation": "PaddingMode.VALID or PaddingMode.SAME ",
                    "type": "PaddingMode",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Max pooling operation for temporal data.\n\nInput shape:  `[batchSize, inLength, channels]`\n\nOutput shape: `[batchSize, pooledLength, channels]`",
                "fileName": "#354",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L354-L363",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "MaxPooling2D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "maxPooling2d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "poolSize",
                    "documentation": "Factors by which to downscale in each dimension [vertical, horizontal].\nExpects an integer or an array of 2 integers.\n\nFor example, `[2, 2]` will halve the input in both spatial dimension.\nIf only one integer is specified, the same window length\nwill be used for both dimensions.",
                    "type": "number|[number, number]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "strides",
                    "documentation": "The size of the stride in each dimension of the pooling window. Expects an\ninteger or an array of 2 integers. Integer, tuple of 2 integers, or None.\n\nIf `null`, defaults to `poolSize`.",
                    "type": "[number, number]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "padding",
                    "documentation": "The padding type to use for the pooling layer. ",
                    "type": "PaddingMode",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dataFormat",
                    "documentation": "The data format to use for the pooling layer. ",
                    "type": "DataFormat",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Max pooling operation for spatial data.\n\nInput shape\n   - If `dataFormat === CHANNEL_LAST`:\n       4D tensor with shape:\n       `[batchSize, rows, cols, channels]`\n   - If `dataFormat === CHANNEL_FIRST`:\n      4D tensor with shape:\n       `[batchSize, channels, rows, cols]`\n\nOutput shape\n   - If `dataFormat=CHANNEL_LAST`:\n       4D tensor with shape:\n       `[batchSize, pooleRows, pooledCols, channels]`\n   - If `dataFormat=CHANNEL_FIRST`:\n       4D tensor with shape:\n       `[batchSize, channels, pooleRows, pooledCols]`",
                "fileName": "#365",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L365-L374",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Recurrent",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Recurrent",
                  "namespace": "layers",
                  "useDocsFrom": "GRU",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "gru",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "implementation",
                    "documentation": "Implementation mode, either 1 or 2.\n\nMode 1 will structure its operations as a larger number of\nsmaller dot products and additions.\n\nMode 2 will batch them into fewer, larger operations. These modes will\nhave different performance profiles on different hardware and\nfor different applications.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Gated Recurrent Unit - Cho et al. 2014.",
                "fileName": "#378",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L378-L387",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Recurrent",
                  "namespace": "layers",
                  "useDocsFrom": "GRUCell",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "gruCell",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "recurrentActivation",
                    "documentation": "Activation function to use for the recurrent step.\n\nDefaults to hard sigmoid (`hardSigomid`).\n\nIf `null`, no activation is applied.",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "implementation",
                    "documentation": "Implementation mode, either 1 or 2.\n\nMode 1 will structure its operations as a larger number of\n   smaller dot products and additions.\n\nMode 2 will batch them into fewer, larger operations. These modes will\nhave different performance profiles on different hardware and\nfor different applications.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "RNNCell",
                "documentation": "Cell class for the GRU layer.",
                "fileName": "#389",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L389-L398",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Recurrent",
                  "namespace": "layers",
                  "useDocsFrom": "LSTM",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "lstm",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "unitForgetBias",
                    "documentation": "If `true`, add 1 to the bias of the forget gate at initialization.\nSetting it to `true` will also force `biasInitializer = 'Zeros'`.\nThis is recommended in\n[Jozefowicz et\nal.](http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf).",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "implementation",
                    "documentation": "Implementation mode, either 1 or 2.\n   Mode 1 will structure its operations as a larger number of\n   smaller dot products and additions, whereas mode 2 will\n   batch them into fewer, larger operations. These modes will\n   have different performance profiles on different hardware and\n   for different applications.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Long-Short Term Memory layer - Hochreiter 1997.",
                "fileName": "#400",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L400-L409",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Recurrent",
                  "namespace": "layers",
                  "useDocsFrom": "LSTMCell",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "lstmCell",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "recurrentActivation",
                    "documentation": "Activation function to use for the recurrent step.\n\nDefaults to hard sigmoid (`hardSigomid`).\n\nIf `null`, no activation is applied.",
                    "type": "'elu'|'hardsigmoid'|'linear'|'relu'|'relu6'|\n    'selu'|'sigmoid'|'softmax'|'softplus'|'softsign'|'tanh'|string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "unitForgetBias",
                    "documentation": "If `true`, add 1 to the bias of the forget gate at initialization.\nSetting it to `true` will also force `biasInitializer = 'Zeros'`.\nThis is recommended in\n[Jozefowicz et\nal.](http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf).",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "implementation",
                    "documentation": "Implementation mode, either 1 or 2.\n\nMode 1 will structure its operations as a larger number of\n   smaller dot products and additions.\n\nMode 2 will batch them into fewer, larger operations. These modes will\nhave different performance profiles on different hardware and\nfor different applications.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "RNNCell",
                "documentation": "LSTMCell layer.",
                "fileName": "#411",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L411-L420",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Recurrent",
                  "namespace": "layers",
                  "useDocsFrom": "SimpleRNN",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "simpleRNN",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "units",
                    "documentation": "Positive integer, dimensionality of the output space.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "activation",
                    "documentation": "Activation function to use.\n\nDefaults to  hyperbolic tangent (`tanh`)\n\nIf you pass `null`, no activation will be applied.",
                    "type": "'elu'|'hardsigmoid'|'linear'|'relu'|'relu6'|\n    'selu'|'sigmoid'|'softmax'|'softplus'|'softsign'|'tanh'|string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "useBias",
                    "documentation": "Whether the layer uses a bias vector.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelInitializer",
                    "documentation": "Initializer for the `kernel` weights matrix, used for the linear\ntransformation of the inputs.",
                    "type": "'Constant'|'GlorotNormal'|'GlorotUniform'|\n    'HeNormal'|'Identity'|'LeCunNormal'|'Ones'|'RandomNormal'|'RandomUniform'|\n    'TruncatedNormal'|'VarianceScaling'|'Zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "recurrentInitializer",
                    "documentation": "Initializer for the `recurrentKernel` weights matrix, used for\nlinear transformation of the recurrent state.",
                    "type": "'Constant'|'GlorotNormal'|'GlorotUniform'|\n    'HeNormal'|'Identity'|'LeCunNormal'|'Ones'|'RandomNormal'|'RandomUniform'|\n    'TruncatedNormal'|'VarianceScaling'|'Zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasInitializer",
                    "documentation": "Initializer for the bias vector.",
                    "type": "'Constant'|'GlorotNormal'|'GlorotUniform'|\n    'HeNormal'|'Identity'|'LeCunNormal'|'Ones'|'RandomNormal'|'RandomUniform'|\n    'TruncatedNormal'|'VarianceScaling'|'Zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelRegularizer",
                    "documentation": "Regularizer function applied to the kernel weights matrix.",
                    "type": "'L1L2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "recurrentRegularizer",
                    "documentation": "Regularizer function applied to the recurrentKernel weights matrix.",
                    "type": "'L1L2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasRegularizer",
                    "documentation": "Regularizer function applied to the bias vector.",
                    "type": "'L1L2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelConstraint",
                    "documentation": "Constraint function applied to the kernel weights matrix.",
                    "type": "'MaxNorm'|'MinMaxNorm'|'NonNeg'|'UnitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "recurrentConstraint",
                    "documentation": "Constraint function applied to the recurrentKernel weights matrix.",
                    "type": "'MaxNorm'|'MinMaxNorm'|'NonNeg'|'UnitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasConstraint",
                    "documentation": "Constraint function applied to the bias vector.",
                    "type": "'MaxNorm'|'MinMaxNorm'|'NonNeg'|'UnitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dropout",
                    "documentation": "Number between 0 and 1. Fraction of the units to drop for the linear\ntransformation of the inputs.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "recurrentDropout",
                    "documentation": "Number between 0 and 1. Fraction of the units to drop for the linear\ntransformation of the recurrent state.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Fully-connected RNN where the output is to be fed back to input.",
                "fileName": "#422",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L422-L431",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Recurrent",
                  "namespace": "layers",
                  "useDocsFrom": "SimpleRNNCell",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "simpleRNNCell",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "units",
                    "documentation": "units: Positive integer, dimensionality of the output space.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "activation",
                    "documentation": "Activation function to use (see [activations](../activations.md)).\nDefault: hyperbolic tangent (`tanh`).\nIf you pass `null`,  'linear' activation will be applied.",
                    "type": "'elu'|'hardsigmoid'|'linear'|'relu'|'relu6'|\n    'selu'|'sigmoid'|'softmax'|'softplus'|'softsign'|'tanh'|string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "useBias",
                    "documentation": "Whether the layer uses a bias vector.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelInitializer",
                    "documentation": "Initializer for the `kernel` weights matrix, used for the linear\ntransformation of the inputs (see [initializers](../initializers.md)).",
                    "type": "'Constant'|'GlorotNormal'|'GlorotUniform'|\n    'HeNormal'|'Identity'|'LeCunNormal'|'Ones'|'RandomNormal'|'RandomUniform'|\n    'TruncatedNormal'|'VarianceScaling'|'Zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "recurrentInitializer",
                    "documentation": "Initializer for the `recurrentKernel` weights matrix, used for\nlinear transformation of the recurrent state\n(see [initializers](../initializers.md)).",
                    "type": "'Constant'|'GlorotNormal'|'GlorotUniform'|\n    'HeNormal'|'Identity'|'LeCunNormal'|'Ones'|'RandomNormal'|'RandomUniform'|\n    'TruncatedNormal'|'VarianceScaling'|'Zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasInitializer",
                    "documentation": "Initializer for the bias vector (see [initializers](../initializers.md)).",
                    "type": "'Constant'|'GlorotNormal'|'GlorotUniform'|\n    'HeNormal'|'Identity'|'LeCunNormal'|'Ones'|'RandomNormal'|'RandomUniform'|\n    'TruncatedNormal'|'VarianceScaling'|'Zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelRegularizer",
                    "documentation": "Regularizer function applied to the `kernel` weights matrix\n(see [regularizer](../regularizers.md)).",
                    "type": "'L1L2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "recurrentRegularizer",
                    "documentation": "Regularizer function applied to the `recurrent_kernel` weights matrix.\n(see [regularizer](../regularizers.md))",
                    "type": "'L1L2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasRegularizer",
                    "documentation": "Regularizer function applied to the bias vector.\n(see [regularizer](../regularizers.md))",
                    "type": "'L1L2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelConstraint",
                    "documentation": "Constraint function applied to the `kernel` weights matrix.\n(see [constraints](../constraints.md)).",
                    "type": "'MaxNorm'|'MinMaxNorm'|'NonNeg'|'UnitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "recurrentConstraint",
                    "documentation": "Constraint function applied to the `recurrentKernel` weights matrix.\n(see [constraints](../constraints.md)).",
                    "type": "'MaxNorm'|'MinMaxNorm'|'NonNeg'|'UnitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasConstraint",
                    "documentation": "Constraintfunction applied to the bias vector.\n(see [constraints](../constraints.md)).",
                    "type": "'MaxNorm'|'MinMaxNorm'|'NonNeg'|'UnitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dropout",
                    "documentation": "Float number between 0 and 1. Fraction of the units to drop for the linear\ntransformation of the inputs.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "recurrentDropout",
                    "documentation": "Float number between 0 and 1. Fraction of the units to drop for the linear\ntransformation of the recurrent state.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "RNNCell",
                "documentation": "",
                "fileName": "#433",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L433-L442",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Recurrent",
                  "namespace": "layers",
                  "useDocsFrom": "RNN",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "rnn",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "cell",
                    "documentation": "",
                    "type": "RNNCell|RNNCell[]",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "RNN",
                "documentation": "Base class for recurrent layers.\n\nInput shape:\n   3D tensor with shape `[batchSize, timeSteps, inputDim]`.\n\nOutput shape:\n   - if `returnState`, an Array of tensors (i.e., `Tensor`s). The first\n     tensor is the output. The remaining tensors are the states at the\n     last time step, each with shape `[batchSize, units]`.\n   - if `returnSequences`, the output will have shape\n     `[batchSize, timeSteps, units]`.\n   - else, the output will have shape `[batchSize, units]`.\n\nMasking:\n   This layer supports masking for input data with a variable number\n   of timesteps. To introduce masks to your data,\n   use an [Embedding](embeddings.md) layer with the `mask_zero` parameter\n   set to `True`.\n\nNotes on using statefulness in RNNs:\n   You can set RNN layers to be 'stateful', which means that the states\n   computed for the samples in one batch will be reused as initial states\n   for the samples in the next batch. This assumes a one-to-one mapping\n   between samples in different successive batches.\n\n   To enable statefulness:\n     - specify `stateful: true` in the layer constructor.\n     - specify a fixed batch size for your model, by passing\n       if sequential model:\n         `batchInputShape=[...]` to the first layer in your model.\n       else for functional model with 1 or more Input layers:\n         `batchShape=[...]` to all the first layers in your model.\n       This is the expected shape of your inputs *including the batch size*.\n       It should be a tuple of integers, e.g. `(32, 10, 100)`.\n     - specify `shuffle=False` when calling fit().\n\n   To reset the states of your model, call `.reset_states()` on either\n   a specific layer, or on your entire model.\n\nNote on specifying the initial state of RNNs\n   You can specify the initial state of RNN layers symbolically by\n   calling them with the option `initialState`. The value of\n   `initialState` should be a tensor or list of tensors representing\n   the initial state of the RNN layer.\n\n   You can specify the initial state of RNN layers numerically by\n   calling `resetStates` with the keyword argument `states`. The value of\n   `states` should be a numpy array or list of numpy arrays representing\n   the initial state of the RNN layer.\n\nNote on passing external constants to RNNs\n   You can pass \"external\" constants to the cell using the `constants`\n   keyword argument of `RNN.call` method. This requires that the `cell.call`\n   method accepts the same keyword argument `constants`. Such constants\n   can be used to conditon the cell transformation on additional static inputs\n   (not changing over time), a.k.a an attention mechanism.",
                "fileName": "#444",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L444-L453",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Recurrent",
                  "namespace": "layers",
                  "useDocsFrom": "RNN",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "stackedRNNCells",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "cells",
                    "documentation": "A `Array` of `RNNCell` instances.",
                    "type": "RNNCell[]",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "RNNCell",
                "documentation": "Base class for recurrent layers.\n\nInput shape:\n   3D tensor with shape `[batchSize, timeSteps, inputDim]`.\n\nOutput shape:\n   - if `returnState`, an Array of tensors (i.e., `Tensor`s). The first\n     tensor is the output. The remaining tensors are the states at the\n     last time step, each with shape `[batchSize, units]`.\n   - if `returnSequences`, the output will have shape\n     `[batchSize, timeSteps, units]`.\n   - else, the output will have shape `[batchSize, units]`.\n\nMasking:\n   This layer supports masking for input data with a variable number\n   of timesteps. To introduce masks to your data,\n   use an [Embedding](embeddings.md) layer with the `mask_zero` parameter\n   set to `True`.\n\nNotes on using statefulness in RNNs:\n   You can set RNN layers to be 'stateful', which means that the states\n   computed for the samples in one batch will be reused as initial states\n   for the samples in the next batch. This assumes a one-to-one mapping\n   between samples in different successive batches.\n\n   To enable statefulness:\n     - specify `stateful: true` in the layer constructor.\n     - specify a fixed batch size for your model, by passing\n       if sequential model:\n         `batchInputShape=[...]` to the first layer in your model.\n       else for functional model with 1 or more Input layers:\n         `batchShape=[...]` to all the first layers in your model.\n       This is the expected shape of your inputs *including the batch size*.\n       It should be a tuple of integers, e.g. `(32, 10, 100)`.\n     - specify `shuffle=False` when calling fit().\n\n   To reset the states of your model, call `.reset_states()` on either\n   a specific layer, or on your entire model.\n\nNote on specifying the initial state of RNNs\n   You can specify the initial state of RNN layers symbolically by\n   calling them with the option `initialState`. The value of\n   `initialState` should be a tensor or list of tensors representing\n   the initial state of the RNN layer.\n\n   You can specify the initial state of RNN layers numerically by\n   calling `resetStates` with the keyword argument `states`. The value of\n   `states` should be a numpy array or list of numpy arrays representing\n   the initial state of the RNN layer.\n\nNote on passing external constants to RNNs\n   You can pass \"external\" constants to the cell using the `constants`\n   keyword argument of `RNN.call` method. This requires that the `cell.call`\n   method accepts the same keyword argument `constants`. Such constants\n   can be used to conditon the cell transformation on additional static inputs\n   (not changing over time), a.k.a an attention mechanism.",
                "fileName": "#455",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L455-L464",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Wrapper",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Wrapper",
                  "namespace": "layers",
                  "useDocsFrom": "Bidirectional",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "bidirectional",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "layer",
                    "documentation": "The instance of an `RNN` layer to be wrapped.",
                    "type": "RNN",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "mergeMode",
                    "documentation": "Mode by which outputs of the forward and backward RNNs are combinied.\nIf `null` or `undefined`, the output will not be combined, they will be\nreturned as an `Array`.",
                    "type": "BidirectionalMergeMode",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "",
                "fileName": "#468",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L468-L477",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Wrapper",
                  "namespace": "layers",
                  "useDocsFrom": "TimeDistributed",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "timeDistributed",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "layer",
                    "documentation": "The layer to be wrapped.",
                    "type": "Layer",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "This wrapper applies a layer to every temporal slice of an input.\n\nThe input should be at least 3D,  and the dimension of the index `1` will be\nconsidered to be the temporal dimension.\n\nConsider a batch of 32 samples, where each sample is a sequence of 10 vectors\nof 16 dimensions. The batch input shape of the layer is then `[32,  10,\n16]`, and the `inputShape`, not including the sample dimension, is\n`[10, 16]`.\n\nYou can then use `TimeDistributed` to apply a `Dense` layer to each of the 10\ntimesteps, independently:\n\n```js\nconst model = tf.sequential();\nmodel.add(tf.layers.timeDistributed({\n   layer: new Dense({units: 8}),\n   inputShape: [10, 16],\n});\n\n// Now model.outputShape = [null, 10, 8].\n// The output will then have shape `[32, 10, 8]`.\n\n// In subsequent layers, there is no need for `inputShape`:\nmodel.add(tf.layers.timeDistributed({layer: tf.layers.dense({units: 32})});\n// Now model.outputShape = [null, 10, 32].\n```\n\nThe output will then have shape `[32, 10, 32]`.\n\n`TimeDistributed` can be used with arbitrary layers, not just `Dense`, for\ninstance a `Conv2D` layer.\n\n```js\nconst model = tf.sequential();\nmodel.add(tf.layers.timeDistributed({\n   layer: new Conv2D({filter: 64, kernelSize: [3, 3]}),\n   inputShape: [10, 299, 299, 3]\n});\n```",
                "fileName": "#479",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L479-L488",
                "isFunction": true
              }
            ]
          }
        ]
      },
      {
        "name": "Models",
        "description": "",
        "subheadings": [
          {
            "name": "Classes",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Classes"
                },
                "symbolName": "SymbolicTensor",
                "documentation": "`SymbolicTensor` is a symbolic `Tensor` without any concrete value.\nIt can be used during the building phase of models that involve no actual\nexecution of the computation defined in the model.",
                "fileName": "#66",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/types.ts#L66-L104",
                "methods": [],
                "isClass": true,
                "inheritsFrom": "TensorInterface"
              },
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Classes"
                },
                "symbolName": "Model",
                "documentation": "The `Model` class adds training & evaluation routines to a `Container`.\n\nA `Model` is the basic unit of training, inference and evaluation in\nTensorFlow.js. To create a `Model, use `model`.\n\nWhen creating a `Model`, specify its input(s) and output(s). Inputs are\n`SymbolicTensor`s provided by `Input` layers. Outputs are `SymbolicTensor`s\nprovided by other layers that perform mathematical and neural-network\noperations.\n\nFor example, the following code snippet defines a model consisting of\ntwo `dense` layers, with of 10 and 4 units, respectively.\n\n```js\n// Define input, which has a size of 5 (not including batch dimension).\nconst input = tf.input({shape: [5]});\n\n// First dense layer uses relu activation.\nconst denseLayer1 = tf.layers.dense({units: 10, activation: 'relu'});\n// Second dense layer uses softmax activation.\nconst denseLayer2 = tf.layers.dense({units: 2, activation: 'softmax'});\n\n// Obtain the output symbolic tensor by applying the layers on the input.\nconst output = denseLayer2.apply(denseLayer1.apply(input));\n\n// Create the model based on the inputs.\nconst model = tf.model({inputs: input, outputs: output});\n\n// The model can be used for training, evaluation and prediction.\n// For example, the following line runs prediction with the model on\n// some fake data.\nmodel.predict(tf.ones([2, 5])).print();\n```\n\nSee also:\n   `Sequential`, `loadModel`.",
                "fileName": "#649",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/engine/training.ts#L649-L1631",
                "methods": [
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes"
                    },
                    "symbolName": "compile",
                    "paramStr": "(config)",
                    "parameters": [
                      {
                        "name": "config",
                        "documentation": "",
                        "type": "ModelCompileConfig",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "void",
                    "documentation": "",
                    "fileName": "#680",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/engine/training.ts#L680-L874",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes",
                      "configParamIndices": [
                        2
                      ]
                    },
                    "symbolName": "evaluate",
                    "paramStr": "(x, y, config?)",
                    "parameters": [
                      {
                        "name": "x",
                        "documentation": "`Tensor` of test data, or an `Array` of `Tensor`s if the model has\nmultiple inputs.",
                        "type": "Tensor|Tensor[]",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "y",
                        "documentation": "`Tensor` of target data, or an `Array` of `Tensor`s if the model\nhas multiple outputs.",
                        "type": "Tensor|Tensor[]",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "config",
                        "documentation": "A `ModelEvaluateConfig`, containing optional fields.",
                        "type": "",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "batchSize",
                        "documentation": "Batch size (Integer). If unspecified, it will default to 32.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "verbose",
                        "documentation": "Verbosity mode.",
                        "type": "ModelLoggingVerbosity",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "sampleWeight",
                        "documentation": "Tensor of weights to weight the contribution of different samples to the\nloss and metrics.",
                        "type": "Tensor",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "steps",
                        "documentation": "integer: total number of steps (batches of samples)\nbefore declaring the evaluation round finished. Ignored with the default\nvalue of `undefined`.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      }
                    ],
                    "returnType": "Scalar|Scalar[]",
                    "documentation": "Returns the loss value & metrics values for the model in test mode.\n\nLoss and metrics are specified during `compile()`, which needs to happen\nbefore calls to `evaluate()`.\n\nComputation is done in batches.\n\n```js\nconst model = tf.sequential({\n   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n});\nmodel.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\nconst result = model.evaluate(\n     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});\nresult.print();\n```",
                    "fileName": "#927",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/engine/training.ts#L927-L944",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes",
                      "configParamIndices": [
                        1
                      ]
                    },
                    "symbolName": "predict",
                    "paramStr": "(x, config?)",
                    "parameters": [
                      {
                        "name": "x",
                        "documentation": "The input data, as an Tensor, or an `Array` of `Tensor`s if\nthe model has multiple inputs.",
                        "type": "Tensor|Tensor[]",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "config",
                        "documentation": "",
                        "type": "",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "batchSize",
                        "documentation": "Batch size (Integer). If unspecified, it will default to 32.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "verbose",
                        "documentation": "Verbosity mode. Defaults to false.",
                        "type": "boolean",
                        "optional": true,
                        "isConfigParam": true
                      }
                    ],
                    "returnType": "Tensor\n      |Tensor[]",
                    "documentation": "Generates output predictions for the input samples.\n\nComputation is done in batches.\n\nNote: the \"step\" mode of predict() is currently not supported.\n   This is because the TensorFow.js core backend is imperative only.\n\n```js\nconst model = tf.sequential({\n   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n});\nmodel.predict(tf.ones([8, 10]), {batchSize: 4}).print();\n```",
                    "fileName": "#1069",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/engine/training.ts#L1069-L1079",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes"
                    },
                    "symbolName": "predictOnBatch",
                    "paramStr": "(x)",
                    "parameters": [
                      {
                        "name": "x",
                        "documentation": ": Input samples, as an Tensor",
                        "type": "Tensor",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Tensor|Tensor[]",
                    "documentation": "Returns predictions for a single batch of samples.",
                    "fileName": "#1087",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/engine/training.ts#L1087-L1093",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes",
                      "configParamIndices": [
                        2
                      ]
                    },
                    "symbolName": "fit",
                    "paramStr": "(x, y, config?)",
                    "parameters": [
                      {
                        "name": "x",
                        "documentation": "`Tensor` of training data, or an array of `Tensor`s if the model\nhas multiple inputs. If all inputs in the model are named, you can also\npass a dictionary mapping input names to `Tensor`s.",
                        "type": "Tensor|Tensor[]|{[inputName: string]: Tensor}",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "y",
                        "documentation": "`Tensor` of target (label) data, or an array of `Tensor`s if the\nmodel has multiple outputs. If all outputs in the model are named, you\ncan also pass a dictionary mapping output names to `Tensor`s.",
                        "type": "Tensor|Tensor[]|{[inputName: string]: Tensor}",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "config",
                        "documentation": "A `ModelFitConfig`, containing optional fields.",
                        "type": "",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "batchSize",
                        "documentation": "Number of samples per gradient update. If unspecified, it\nwill default to 32.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "epochs",
                        "documentation": "The number of times to iterate over the training data arrays. ",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "verbose",
                        "documentation": "",
                        "type": "ModelLoggingVerbosity",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "callbacks",
                        "documentation": "List of callbacks to be called during training. ",
                        "type": "Callback[]|CustomCallbackConfig|CustomCallbackConfig[]",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "validationSplit",
                        "documentation": "Float between 0 and 1: fraction of the training data\nto be used as validation data. The model will set apart this fraction of\nthe training data, will not train on it, and will evaluate the loss and\nany model metrics on this data at the end of each epoch.\nThe validation data is selected from the last samples in the `x` and `y`\ndata provided, before shuffling.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "validationData",
                        "documentation": "Data on which to evaluate the loss and any model\nmetrics at the end of each epoch. The model will not be trained on this\ndata. This could be a tuple [xVal, yVal] or a tuple [xVal, yVal,\nvalSampleWeights]. The model will not be trained on this data.\n`validationData` will override `validationSplit`.",
                        "type": "[\n    Tensor|Tensor[], Tensor|Tensor[]\n  ]|[Tensor | Tensor[], Tensor|Tensor[], Tensor|Tensor[]]",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "shuffle",
                        "documentation": "Whether to shuffle the training data before each epoch. Has\nno effect when `stepsPerEpoch` is not `null`.",
                        "type": "boolean",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "classWeight",
                        "documentation": "Optional dictionary mapping class indices (integers) to\na weight (float) to apply to the model's loss for the samples from this\nclass during training. This can be useful to tell the model to \"pay more\nattention\" to samples from an under-represented class.",
                        "type": "{[classIndex: string]: number}",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "sampleWeight",
                        "documentation": "Optional array of the same length as x, containing\nweights to apply to the model's loss for each sample. In the case of\ntemporal data, you can pass a 2D array with shape (samples,\nsequenceLength), to apply a different weight to every timestep of every\nsample. In this case you should make sure to specify\nsampleWeightMode=\"temporal\" in compile().",
                        "type": "Tensor",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "initialEpoch",
                        "documentation": "Epoch at which to start training (useful for resuming a previous training\nrun).",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "stepsPerEpoch",
                        "documentation": "Total number of steps (batches of samples) before\ndeclaring one epoch finished and starting the next epoch. When training\nwith Input Tensors such as TensorFlow data tensors, the default `null` is\nequal to the number of unique samples in your dataset divided by the\nbatch size, or 1 if that cannot be determined.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "validationSteps",
                        "documentation": "Only relevant if `stepsPerEpoch` is specified. Total number of steps\n(batches of samples) to validate before stopping.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      }
                    ],
                    "returnType": "Promise",
                    "documentation": "Trains the model for a fixed number of epochs (iterations on a dataset).\n\n```js\nconst model = tf.sequential({\n   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n});\nmodel.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\nconst history = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\n   batchSize: 4,\n   epochs: 3\n});",
                    "fileName": "#1456",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/engine/training.ts#L1456-L1630",
                    "isFunction": true
                  }
                ],
                "isClass": true,
                "inheritsFrom": "Container"
              },
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Classes"
                },
                "symbolName": "Sequential",
                "documentation": "A model with a stack of layers, feeding linearly from one to the next.\n\n`sequential` is a factory function that creates an instance of\n`Sequential`.\n\nNote: The first layer passed to a Sequential model should have a defined\ninput shape. What that means is that it should have received an `inputShape`\nor `batchInputShape` argument, or for some type of layers (recurrent,\nDense...) an `inputDim` argument.\n\nExamples:\n\n```js\nconst model = tf.sequential();\n\n// First layer must have a defined input shape\nmodel.add(tf.layers.dense({units: 32, inputShape: [50]}));\n// Afterwards, TF.js does automatic shape inference.\nmodel.add(tf.layers.dense({units: 4}));\n\n// Inspect the inferred shape of the model's output, which equals\n// `[null, 4]`. The 1st dimension is the undetermined batch dimension; the\n// 2nd is the output size of the model's last layer.\nconsole.log(model.outputs[0].shape);\n```\n\nIt is also possible to specify a batch size (with potentially undetermined\nbatch dimension) for the first layer using the `batchInputShape` key. The\nfollowing example is equivalent to the above:\n\n```js\nconst model = tf.sequential();\n\n// First layer must have a defined input shape\nmodel.add(tf.layers.dense({units: 32, batchInputShape: [null, 50]}));\n// Afterwards, TF.js does automatic shape inference.\nmodel.add(tf.layers.dense({units: 4}));\n\n// Inspect the inferred shape of the model's output.\nconsole.log(model.outputs[0].shape);\n```\n\nYou can also use an `Array` of already-constructed `Layer`s to create\na `Sequential` model:\n\n```js\nconst model = tf.sequential({\n   layers: [tf.layers.dense({units: 32, inputShape: [50]}),\n            tf.layers.dense({units: 4})]\n});\nconsole.log(model.outputs[0].shape);\n```",
                "fileName": "#205",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/models.ts#L205-L576",
                "methods": [
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes"
                    },
                    "symbolName": "add",
                    "paramStr": "(layer)",
                    "parameters": [
                      {
                        "name": "layer",
                        "documentation": "Layer instance.",
                        "type": "Layer",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "void",
                    "documentation": "Adds a layer instance on top of the layer stack.",
                    "fileName": "#239",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/models.ts#L239-L314",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes",
                      "configParamIndices": [
                        2
                      ]
                    },
                    "symbolName": "evaluate",
                    "paramStr": "(x, y, config?)",
                    "parameters": [
                      {
                        "name": "x",
                        "documentation": "`Tensor` of test data, or an `Array` of `Tensor`s if the model has\nmultiple inputs.",
                        "type": "Tensor|Tensor[]",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "y",
                        "documentation": "`Tensor` of target data, or an `Array` of `Tensor`s if the model\nhas multiple outputs.",
                        "type": "Tensor|Tensor[]",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "config",
                        "documentation": "A `ModelEvaluateConfig`, containing optional fields.",
                        "type": "",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "batchSize",
                        "documentation": "Batch size (Integer). If unspecified, it will default to 32.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "verbose",
                        "documentation": "Verbosity mode.",
                        "type": "ModelLoggingVerbosity",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "sampleWeight",
                        "documentation": "Tensor of weights to weight the contribution of different samples to the\nloss and metrics.",
                        "type": "Tensor",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "steps",
                        "documentation": "integer: total number of steps (batches of samples)\nbefore declaring the evaluation round finished. Ignored with the default\nvalue of `undefined`.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      }
                    ],
                    "returnType": "Scalar|Scalar[]",
                    "documentation": "Returns the loss value & metrics values for the model in test mode.\n\nLoss and metrics are specified during `compile()`, which needs to happen\nbefore calls to `evaluate()`.\n\nComputation is done in batches.\n\n```js\nconst model = tf.sequential({\n   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n});\nmodel.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\nconst result = model.evaluate(tf.ones([8, 10]), tf.ones([8, 1]), {\n   batchSize: 4,\n});\nresult.print();\n```",
                    "fileName": "#436",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/models.ts#L436-L445",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes",
                      "configParamIndices": [
                        1
                      ]
                    },
                    "symbolName": "predict",
                    "paramStr": "(x, config?)",
                    "parameters": [
                      {
                        "name": "x",
                        "documentation": "The input data, as an Tensor, or an `Array` of `Tensor`s if\nthe model has multiple inputs.",
                        "type": "Tensor|Tensor[]",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "config",
                        "documentation": "",
                        "type": "",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "batchSize",
                        "documentation": "Batch size (Integer). If unspecified, it will default to 32.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "verbose",
                        "documentation": "Verbosity mode. Defaults to false.",
                        "type": "boolean",
                        "optional": true,
                        "isConfigParam": true
                      }
                    ],
                    "returnType": "Tensor\n      |Tensor[]",
                    "documentation": "Generates output predictions for the input samples.\n\nComputation is done in batches.\n\nNote: the \"step\" mode of predict() is currently not supported.\n   This is because the TensorFow.js core backend is imperative only.\n\n```js\nconst model = tf.sequential({\n   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n});\nmodel.predict(tf.ones([2, 5])).print();\n```",
                    "fileName": "#472",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/models.ts#L472-L479",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes",
                      "configParamIndices": [
                        2
                      ]
                    },
                    "symbolName": "fit",
                    "paramStr": "(x, y, config?)",
                    "parameters": [
                      {
                        "name": "x",
                        "documentation": "`Tensor` of training data, or an array of `Tensor`s if the model\nhas multiple inputs. If all inputs in the model are named, you can also\npass a dictionary mapping input names to `Tensor`s.",
                        "type": "Tensor|Tensor[]|{[inputName: string]: Tensor}",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "y",
                        "documentation": "`Tensor` of target (label) data, or an array of `Tensor`s if the\nmodel has multiple outputs. If all outputs in the model are named, you\ncan also pass a dictionary mapping output names to `Tensor`s.",
                        "type": "Tensor|Tensor[]|{[inputName: string]: Tensor}",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "config",
                        "documentation": "A `ModelFitConfig`, containing optional fields.",
                        "type": "",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "batchSize",
                        "documentation": "Number of samples per gradient update. If unspecified, it\nwill default to 32.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "epochs",
                        "documentation": "The number of times to iterate over the training data arrays. ",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "verbose",
                        "documentation": "",
                        "type": "ModelLoggingVerbosity",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "callbacks",
                        "documentation": "List of callbacks to be called during training. ",
                        "type": "Callback[]|CustomCallbackConfig|CustomCallbackConfig[]",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "validationSplit",
                        "documentation": "Float between 0 and 1: fraction of the training data\nto be used as validation data. The model will set apart this fraction of\nthe training data, will not train on it, and will evaluate the loss and\nany model metrics on this data at the end of each epoch.\nThe validation data is selected from the last samples in the `x` and `y`\ndata provided, before shuffling.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "validationData",
                        "documentation": "Data on which to evaluate the loss and any model\nmetrics at the end of each epoch. The model will not be trained on this\ndata. This could be a tuple [xVal, yVal] or a tuple [xVal, yVal,\nvalSampleWeights]. The model will not be trained on this data.\n`validationData` will override `validationSplit`.",
                        "type": "[\n    Tensor|Tensor[], Tensor|Tensor[]\n  ]|[Tensor | Tensor[], Tensor|Tensor[], Tensor|Tensor[]]",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "shuffle",
                        "documentation": "Whether to shuffle the training data before each epoch. Has\nno effect when `stepsPerEpoch` is not `null`.",
                        "type": "boolean",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "classWeight",
                        "documentation": "Optional dictionary mapping class indices (integers) to\na weight (float) to apply to the model's loss for the samples from this\nclass during training. This can be useful to tell the model to \"pay more\nattention\" to samples from an under-represented class.",
                        "type": "{[classIndex: string]: number}",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "sampleWeight",
                        "documentation": "Optional array of the same length as x, containing\nweights to apply to the model's loss for each sample. In the case of\ntemporal data, you can pass a 2D array with shape (samples,\nsequenceLength), to apply a different weight to every timestep of every\nsample. In this case you should make sure to specify\nsampleWeightMode=\"temporal\" in compile().",
                        "type": "Tensor",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "initialEpoch",
                        "documentation": "Epoch at which to start training (useful for resuming a previous training\nrun).",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "stepsPerEpoch",
                        "documentation": "Total number of steps (batches of samples) before\ndeclaring one epoch finished and starting the next epoch. When training\nwith Input Tensors such as TensorFlow data tensors, the default `null` is\nequal to the number of unique samples in your dataset divided by the\nbatch size, or 1 if that cannot be determined.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "validationSteps",
                        "documentation": "Only relevant if `stepsPerEpoch` is specified. Total number of steps\n(batches of samples) to validate before stopping.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      }
                    ],
                    "returnType": "Promise",
                    "documentation": "Trains the model for a fixed number of epochs (iterations on a dataset).\n\n```js\nconst model = tf.sequential({\n   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n});\nmodel.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\nconst history = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\n   batchSize: 4,\n   epochs: 3\n});",
                    "fileName": "#540",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/models.ts#L540-L551",
                    "isFunction": true
                  }
                ],
                "isClass": true,
                "inheritsFrom": "Model"
              }
            ]
          },
          {
            "name": "Creation",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Creation",
                  "useDocsFrom": "Model",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "model",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "inputs",
                    "documentation": "",
                    "type": "SymbolicTensor|SymbolicTensor[]",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "outputs",
                    "documentation": "",
                    "type": "SymbolicTensor|SymbolicTensor[]",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Model",
                "documentation": "The `Model` class adds training & evaluation routines to a `Container`.\n\nA `Model` is the basic unit of training, inference and evaluation in\nTensorFlow.js. To create a `Model, use `model`.\n\nWhen creating a `Model`, specify its input(s) and output(s). Inputs are\n`SymbolicTensor`s provided by `Input` layers. Outputs are `SymbolicTensor`s\nprovided by other layers that perform mathematical and neural-network\noperations.\n\nFor example, the following code snippet defines a model consisting of\ntwo `dense` layers, with of 10 and 4 units, respectively.\n\n```js\n// Define input, which has a size of 5 (not including batch dimension).\nconst input = tf.input({shape: [5]});\n\n// First dense layer uses relu activation.\nconst denseLayer1 = tf.layers.dense({units: 10, activation: 'relu'});\n// Second dense layer uses softmax activation.\nconst denseLayer2 = tf.layers.dense({units: 2, activation: 'softmax'});\n\n// Obtain the output symbolic tensor by applying the layers on the input.\nconst output = denseLayer2.apply(denseLayer1.apply(input));\n\n// Create the model based on the inputs.\nconst model = tf.model({inputs: input, outputs: output});\n\n// The model can be used for training, evaluation and prediction.\n// For example, the following line runs prediction with the model on\n// some fake data.\nmodel.predict(tf.ones([2, 5])).print();\n```\n\nSee also:\n   `Sequential`, `loadModel`.",
                "fileName": "#44",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L44-L52",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Creation",
                  "useDocsFrom": "Sequential",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "sequential",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "layers",
                    "documentation": "Stack of layers for the model. ",
                    "type": "Layer[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "The name of this model. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Sequential",
                "documentation": "A model with a stack of layers, feeding linearly from one to the next.\n\n`sequential` is a factory function that creates an instance of\n`Sequential`.\n\nNote: The first layer passed to a Sequential model should have a defined\ninput shape. What that means is that it should have received an `inputShape`\nor `batchInputShape` argument, or for some type of layers (recurrent,\nDense...) an `inputDim` argument.\n\nExamples:\n\n```js\nconst model = tf.sequential();\n\n// First layer must have a defined input shape\nmodel.add(tf.layers.dense({units: 32, inputShape: [50]}));\n// Afterwards, TF.js does automatic shape inference.\nmodel.add(tf.layers.dense({units: 4}));\n\n// Inspect the inferred shape of the model's output, which equals\n// `[null, 4]`. The 1st dimension is the undetermined batch dimension; the\n// 2nd is the output size of the model's last layer.\nconsole.log(model.outputs[0].shape);\n```\n\nIt is also possible to specify a batch size (with potentially undetermined\nbatch dimension) for the first layer using the `batchInputShape` key. The\nfollowing example is equivalent to the above:\n\n```js\nconst model = tf.sequential();\n\n// First layer must have a defined input shape\nmodel.add(tf.layers.dense({units: 32, batchInputShape: [null, 50]}));\n// Afterwards, TF.js does automatic shape inference.\nmodel.add(tf.layers.dense({units: 4}));\n\n// Inspect the inferred shape of the model's output.\nconsole.log(model.outputs[0].shape);\n```\n\nYou can also use an `Array` of already-constructed `Layer`s to create\na `Sequential` model:\n\n```js\nconst model = tf.sequential({\n   layers: [tf.layers.dense({units: 32, inputShape: [50]}),\n            tf.layers.dense({units: 4})]\n});\nconsole.log(model.outputs[0].shape);\n```",
                "fileName": "#54",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L54-L62",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Loading",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Loading",
                  "useDocsFrom": "loadModelInternal"
                },
                "symbolName": "loadModel",
                "paramStr": "(modelConfigPath)",
                "parameters": [
                  {
                    "name": "modelConfigPath",
                    "documentation": "A path to the `ModelAndWeightsConfig` JSON describing\nthe model in the canonical TensorFlow.js format.\n\nThis provides the most convenient way to load a TensorFlow.js saved model.\n\nThe content of `model.json` is assumed to be a JSON object with the\nfollowing fields and values:\n- 'modelTopology': A JSON object that can be\n- a model architecture JSON consistent with the format of the return\nvalue of `keras.Model.to_json()`, or\n- a full model JSON in the format of `keras.models.save_model()`.\n- 'weightsManifest': A TensorFlow.js weights manifest.\nSee the Python converter function `save_model()` for more details.\n\nIt is also assumed that model weights can be accessed from relative paths\ndescribed by the `paths` fields in weights manifest.",
                    "type": "string",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Promise",
                "documentation": "Load a model, including its topology and optionally weights.",
                "fileName": "#64",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L64-L71",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Inputs",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Inputs",
                  "useDocsFrom": "Input",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "input",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "InputConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "shape",
                    "documentation": "A shape, not including the batch size. For instance, `shape=[32]`\nindicates that the expected input will be batches of 32-dimensional\nvectors.",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchShape",
                    "documentation": "A shape tuple (integer), including the batch size. For instance,\n`batchShape=[10, 32]` indicates that the expected input will be batches of\n10 32-dimensional vectors. `batchShape=[null, 32]` indicates batches of an\narbitrary number of 32-dimensional vectors.",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "An optional name string for the layer. Should be unique in a model (do not\nreuse the same name twice). It will be autogenerated if it isn't provided.",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dtype",
                    "documentation": "",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "sparse",
                    "documentation": "A boolean specifying whether the placeholder to be created is sparse.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "SymbolicTensor",
                "documentation": "`Input()` is used to instantiate a SymbolicTensor, and represents\nthe input to a model.\n\nExample:\n\n```js\n// Simple logistic regression:\nx = tf.input({shape: [32]});\ny = tf.layers.dense({units: 16, activation: 'softmax'}).apply(x);\nmodel = tf.model({inputs: x, outputs: y});\n```",
                "fileName": "#73",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L73-L81",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Inputs",
                  "useDocsFrom": "InputLayer",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "inputLayer",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "inputShape",
                    "documentation": "Input shape, not including the batch axis. ",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchSize",
                    "documentation": "Optional input batch size (integer or null). ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchInputShape",
                    "documentation": "Batch input shape, including the batch axis. ",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dtype",
                    "documentation": "Datatype of the input.  ",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "sparse",
                    "documentation": "Whether the placeholder created is meant to be sparse.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "Name of the layer. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Layer to be used as an entry point into a graph.",
                "fileName": "#83",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/master/src/exports.ts#L83-L91",
                "isFunction": true
              }
            ]
          }
        ]
      }
    ]
  },
  "docLinkAliases": {}
}