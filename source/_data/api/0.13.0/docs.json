{
  "headings": [
    {
      "name": "Tensors",
      "description": "<p>Tensors are the core datastructure of TensorFlow.js\nThey are a generalization of vectors and matrices to potentially\nhigher dimensions.</p>",
      "subheadings": [
        {
          "name": "Creation",
          "description": "<p>We have utility functions for common cases like Scalar, 1D,\n2D, 3D and 4D tensors, as well a number of functions to initialize\ntensors in ways useful for machine learning.</p>",
          "symbols": [
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "tensor",
              "paramStr": "(values, shape?, dtype?)",
              "parameters": [
                {
                  "name": "values",
                  "documentation": "The values of the tensor. Can be nested array of numbers,\nor a flat array, or a [TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray).",
                  "type": "[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "shape",
                  "documentation": "The shape of the tensor. Optional. If not provided,\nit is inferred from `values`.",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "dtype",
                  "documentation": "The data type.",
                  "type": "'float32'|'int32'|'bool'|'complex64'",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Creates a [tf.Tensor](#class:Tensor) with the provided values, shape and dtype.\n\n```js\n// Pass an array of values to create a vector.\ntf.tensor([1, 2, 3, 4]).print();\n```\n\n```js\n// Pass a nested array of values to make a matrix or a higher\n// dimensional tensor.\ntf.tensor([[1, 2], [3, 4]]).print();\n```\n\n```js\n// Pass a flat array and specify a shape yourself.\ntf.tensor([1, 2, 3, 4], [2, 2]).print();\n```",
              "fileName": "#54",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/tensor_ops.ts#L54-L86",
              "isFunction": true,
              "displayName": "tf.tensor",
              "urlHash": "tensor"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "scalar",
              "paramStr": "(value, dtype?)",
              "parameters": [
                {
                  "name": "value",
                  "documentation": "The value of the scalar.",
                  "type": "number|boolean|[number, number]",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "dtype",
                  "documentation": "The data type.",
                  "type": "'float32'|'int32'|'bool'|'complex64'",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Scalar](#class:Tensor)",
              "documentation": "Creates rank-0 [tf.Tensor](#class:Tensor) (scalar) with the provided value and dtype.\n\nThe same functionality can be achieved with [tf.tensor()](#tensor), but in general\nwe recommend using [tf.scalar()](#scalar) as it makes the code more readable.\n\n```js\ntf.scalar(3.14).print();\n```",
              "fileName": "#102",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/tensor_ops.ts#L102-L111",
              "isFunction": true,
              "displayName": "tf.scalar",
              "urlHash": "scalar"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "tensor1d",
              "paramStr": "(values, dtype?)",
              "parameters": [
                {
                  "name": "values",
                  "documentation": "The values of the tensor. Can be array of numbers,\nor a [TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray).",
                  "type": "[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "dtype",
                  "documentation": "The data type.",
                  "type": "'float32'|'int32'|'bool'|'complex64'",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor1D](#class:Tensor)",
              "documentation": "Creates rank-1 [tf.Tensor](#class:Tensor) with the provided values, shape and dtype.\n\nThe same functionality can be achieved with [tf.tensor()](#tensor), but in general\nwe recommend using [tf.tensor1d()](#tensor1d) as it makes the code more readable.\n\n```js\ntf.tensor1d([1, 2, 3]).print();\n```",
              "fileName": "#128",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/tensor_ops.ts#L128-L135",
              "isFunction": true,
              "displayName": "tf.tensor1d",
              "urlHash": "tensor1d"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "tensor2d",
              "paramStr": "(values, shape?, dtype?)",
              "parameters": [
                {
                  "name": "values",
                  "documentation": "The values of the tensor. Can be nested array of numbers,\nor a flat array, or a [TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray).",
                  "type": "[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "shape",
                  "documentation": "The shape of the tensor. If not provided, it is inferred from\n`values`.",
                  "type": "[number, number]",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "dtype",
                  "documentation": "The data type.",
                  "type": "'float32'|'int32'|'bool'|'complex64'",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor2D](#class:Tensor)",
              "documentation": "Creates rank-2 [tf.Tensor](#class:Tensor) with the provided values, shape and dtype.\n\nThe same functionality can be achieved with [tf.tensor()](#tensor), but in general\nwe recommend using [tf.tensor2d()](#tensor2d) as it makes the code more readable.\n\n  ```js\n// Pass a nested array.\ntf.tensor2d([[1, 2], [3, 4]]).print();\n```\n```js\n// Pass a flat array and specify a shape.\ntf.tensor2d([1, 2, 3, 4], [2, 2]).print();\n```",
              "fileName": "#159",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/tensor_ops.ts#L159-L178",
              "isFunction": true,
              "displayName": "tf.tensor2d",
              "urlHash": "tensor2d"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "tensor3d",
              "paramStr": "(values, shape?, dtype?)",
              "parameters": [
                {
                  "name": "values",
                  "documentation": "The values of the tensor. Can be nested array of numbers,\nor a flat array, or a [TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray).",
                  "type": "[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "shape",
                  "documentation": "The shape of the tensor. If not provided,  it is inferred from\n`values`.",
                  "type": "[number, number, number]",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "dtype",
                  "documentation": "The data type.",
                  "type": "'float32'|'int32'|'bool'|'complex64'",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor3D](#class:Tensor)",
              "documentation": "Creates rank-3 [tf.Tensor](#class:Tensor) with the provided values, shape and dtype.\n\nThe same functionality can be achieved with [tf.tensor()](#tensor), but in general\nwe recommend using [tf.tensor3d()](#tensor3d) as it makes the code more readable.\n\n  ```js\n// Pass a nested array.\ntf.tensor3d([[[1], [2]], [[3], [4]]]).print();\n```\n```js\n// Pass a flat array and specify a shape.\ntf.tensor3d([1, 2, 3, 4], [2, 2, 1]).print();\n```",
              "fileName": "#202",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/tensor_ops.ts#L202-L221",
              "isFunction": true,
              "displayName": "tf.tensor3d",
              "urlHash": "tensor3d"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "tensor4d",
              "paramStr": "(values, shape?, dtype?)",
              "parameters": [
                {
                  "name": "values",
                  "documentation": "The values of the tensor. Can be nested array of numbers,\nor a flat array, or a [TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray).",
                  "type": "[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "shape",
                  "documentation": "The shape of the tensor. Optional. If not provided,\nit is inferred from `values`.",
                  "type": "[number, number, number, number]",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "dtype",
                  "documentation": "The data type.",
                  "type": "'float32'|'int32'|'bool'|'complex64'",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor4D](#class:Tensor)",
              "documentation": "Creates rank-4 [tf.Tensor](#class:Tensor) with the provided values, shape and dtype.\n\nThe same functionality can be achieved with [tf.tensor()](#tensor), but in general\nwe recommend using [tf.tensor4d()](#tensor4d) as it makes the code more readable.\n\n  ```js\n// Pass a nested array.\ntf.tensor4d([[[[1], [2]], [[3], [4]]]]).print();\n```\n```js\n// Pass a flat array and specify a shape.\ntf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]).print();\n```",
              "fileName": "#245",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/tensor_ops.ts#L245-L264",
              "isFunction": true,
              "displayName": "tf.tensor4d",
              "urlHash": "tensor4d"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "tensor5d",
              "paramStr": "(values, shape?, dtype?)",
              "parameters": [
                {
                  "name": "values",
                  "documentation": "The values of the tensor. Can be nested array of numbers,\nor a flat array, or a [TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray).",
                  "type": "[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "shape",
                  "documentation": "The shape of the tensor. Optional. If not provided,\nit is inferred from `values`.",
                  "type": "[number, number, number, number, number]",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "dtype",
                  "documentation": "The data type.",
                  "type": "'float32'|'int32'|'bool'|'complex64'",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor5D](#class:Tensor)",
              "documentation": "Creates rank-5 [tf.Tensor](#class:Tensor) with the provided values, shape and dtype.\n\nThe same functionality can be achieved with [tf.tensor()](#tensor), but in general\nwe recommend using [tf.tensor5d()](#tensor5d) as it makes the code more readable.\n\n  ```js\n// Pass a nested array.\ntf.tensor5d([[[[[1], [2]], [[3], [4]]]]]).print();\n```\n```js\n// Pass a flat array and specify a shape.\ntf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]).print();\n```",
              "fileName": "#288",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/tensor_ops.ts#L288-L308",
              "isFunction": true,
              "displayName": "tf.tensor5d",
              "urlHash": "tensor5d"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "tensor6d",
              "paramStr": "(values, shape?, dtype?)",
              "parameters": [
                {
                  "name": "values",
                  "documentation": "The values of the tensor. Can be nested array of numbers,\nor a flat array, or a [TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray).",
                  "type": "[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "shape",
                  "documentation": "The shape of the tensor. Optional. If not provided,\nit is inferred from `values`.",
                  "type": "[number, number, number, number, number, number]",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "dtype",
                  "documentation": "The data type.",
                  "type": "'float32'|'int32'|'bool'|'complex64'",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor6D](#class:Tensor)",
              "documentation": "Creates rank-6 [tf.Tensor](#class:Tensor) with the provided values, shape and dtype.\n\nThe same functionality can be achieved with [tf.tensor()](#tensor), but in general\nwe recommend using [tf.tensor6d()](#tensor6d) as it makes the code more readable.\n\n  ```js\n// Pass a nested array.\ntf.tensor6d([[[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]]).print();\n```\n```js\n// Pass a flat array and specify a shape.\ntf.tensor6d([1, 2, 3, 4, 5, 6, 7, 8], [1, 1, 2, 2, 2, 1]).print();\n```",
              "fileName": "#332",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/tensor_ops.ts#L332-L353",
              "isFunction": true,
              "displayName": "tf.tensor6d",
              "urlHash": "tensor6d"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "buffer",
              "paramStr": "(shape, dtype?, values?)",
              "parameters": [
                {
                  "name": "shape",
                  "documentation": "An array of integers defining the output tensor shape.",
                  "type": "number[]",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "dtype",
                  "documentation": "The dtype of the buffer. Defaults to 'float32'.",
                  "type": "'float32'|'int32'|'bool'|'complex64'",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "values",
                  "documentation": "The values of the buffer as [TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray). Defaults to\nzeros.",
                  "type": "[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.TensorBuffer](#class:TensorBuffer)",
              "documentation": "Creates an empty [tf.TensorBuffer](#class:TensorBuffer) with the specified `shape` and `dtype`.\n\nThe values are stored in CPU as [TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray). Fill the buffer using\n`buffer.set()`, or by modifying directly `buffer.values`.\n\nWhen done, call `buffer.toTensor()` to get an immutable [tf.Tensor](#class:Tensor) with\nthose values.\n\n```js\n// Create a buffer and set values at particular indices.\nconst buffer = tf.buffer([2, 2]);\nbuffer.set(3, 0, 0);\nbuffer.set(5, 1, 0);\n\n// Convert the buffer back to a tensor.\nbuffer.toTensor().print();\n```",
              "fileName": "#1112",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/array_ops.ts#L1112-L1116",
              "isFunction": true,
              "displayName": "tf.buffer",
              "urlHash": "buffer"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "clone",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The tensor to clone.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Creates a new tensor with the same values and shape as the specified\ntensor.\n\n```js\nconst x = tf.tensor([1, 2]);\n\nx.clone().print();\n```",
              "fileName": "#42",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/array_ops.ts#L42-L52",
              "isFunction": true,
              "displayName": "tf.clone",
              "urlHash": "clone"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "complex",
              "paramStr": "(real, imag)",
              "parameters": [
                {
                  "name": "real",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "imag",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Converts two real numbers to a complex number.\n\nGiven a tensor [tf.real()](#real) representing the real part of a complex number, and a\ntensor [tf.imag()](#imag) representing the imaginary part of a complex number, this\noperation returns complex numbers elementwise of the form [r0, i0, r1, i1],\nwhere r represents the real part and i represents the imag part.\n\nThe input tensors real and imag must have the same shape.\n\n```js\nconst real = tf.tensor1d([2.25, 3.25]);\nconst imag = tf.tensor1d([4.75, 5.75]);\nconst complex = tf.complex(real, imag);\n\ncomplex.print();\n```",
              "fileName": "#43",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/complex_ops.ts#L43-L53",
              "isFunction": true,
              "displayName": "tf.complex",
              "urlHash": "complex"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "eye",
              "paramStr": "(numRows, numColumns?, batchShape?, dtype?)",
              "parameters": [
                {
                  "name": "numRows",
                  "documentation": "Number of rows.",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "numColumns",
                  "documentation": "Number of columns. Defaults to `numRows`.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "batchShape",
                  "documentation": "If provided, will add the batch shape to the beginning\nof the shape of the returned [tf.Tensor](#class:Tensor) by repeating the identity\nmatrix.",
                  "type": "[\n          number\n        ]|[number,\n           number]|[number, number, number]|[number, number, number, number]",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "dtype",
                  "documentation": "Data type.",
                  "type": "'float32'|'int32'|'bool'|'complex64'",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor2D](#class:Tensor)",
              "documentation": "Create an identity matrix.",
              "fileName": "#67",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/array_ops.ts#L67-L104",
              "isFunction": true,
              "displayName": "tf.eye",
              "urlHash": "eye"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "fill",
              "paramStr": "(shape, value, dtype?)",
              "parameters": [
                {
                  "name": "shape",
                  "documentation": "An array of integers defining the output tensor shape.",
                  "type": "number[]",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "value",
                  "documentation": "The scalar value to fill the tensor with.",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "dtype",
                  "documentation": "The type of an element in the resulting tensor. Defaults to\n'float'.",
                  "type": "'float32'|'int32'|'bool'|'complex64'",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Creates a [tf.Tensor](#class:Tensor) filled with a scalar value.\n\n```js\ntf.fill([2, 2], 4).print();\n```",
              "fileName": "#414",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/tensor_ops.ts#L414-L419",
              "isFunction": true,
              "displayName": "tf.fill",
              "urlHash": "fill"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "fromPixels",
              "paramStr": "(pixels, numChannels?)",
              "parameters": [
                {
                  "name": "pixels",
                  "documentation": "The input image to construct the tensor from. The\nsupported image types are all 4-channel.",
                  "type": "[ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData)|[HTMLImageElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement)|[HTMLCanvasElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement)|[HTMLVideoElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement)",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "numChannels",
                  "documentation": "The number of channels of the output tensor. A\nnumChannels value less than 4 allows you to ignore channels. Defaults to\n3 (ignores alpha channel of input image).",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor3D](#class:Tensor)",
              "documentation": "Creates a [tf.Tensor](#class:Tensor) from an image.\n\n```js\nconst image = new ImageData(1, 1);\nimage.data[0] = 100;\nimage.data[1] = 150;\nimage.data[2] = 200;\nimage.data[3] = 255;\n\ntf.fromPixels(image).print();\n```",
              "fileName": "#325",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/array_ops.ts#L325-L333",
              "isFunction": true,
              "displayName": "tf.fromPixels",
              "urlHash": "fromPixels"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "imag",
              "paramStr": "(input)",
              "parameters": [
                {
                  "name": "input",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Returns the imaginary part of a complex (or real) tensor.\n\nGiven a tensor input, this operation returns a tensor of type float that is\nthe imaginary part of each element in input considered as a complex number.\nIf input is real, a tensor of all zeros is returned.\n\n```js\nconst x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\ntf.imag(x).print();\n```",
              "fileName": "#88",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/complex_ops.ts#L88-L92",
              "isFunction": true,
              "displayName": "tf.imag",
              "urlHash": "imag"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "linspace",
              "paramStr": "(start, stop, num)",
              "parameters": [
                {
                  "name": "start",
                  "documentation": "The start value of the sequence.",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "stop",
                  "documentation": "The end value of the sequence.",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "num",
                  "documentation": "The number of values to generate.",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor1D](#class:Tensor)",
              "documentation": "Return an evenly spaced sequence of numbers over the given interval.\n\n```js\ntf.linspace(0, 9, 10).print();\n```",
              "fileName": "#465",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/tensor_ops.ts#L465-L479",
              "isFunction": true,
              "displayName": "tf.linspace",
              "urlHash": "linspace"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "oneHot",
              "paramStr": "(indices, depth, onValue?, offValue?)",
              "parameters": [
                {
                  "name": "indices",
                  "documentation": "[tf.Tensor1D](#class:Tensor) of indices with dtype `int32`.",
                  "type": "[tf.Tensor1D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "depth",
                  "documentation": "The depth of the one hot dimension.",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "onValue",
                  "documentation": "A number used to fill in the output when the index matches\nthe location.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "offValue",
                  "documentation": "A number used to fill in the output when the index does\nnot match the location.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor2D](#class:Tensor)",
              "documentation": "Creates a one-hot [tf.Tensor](#class:Tensor). The locations represented by `indices` take\nvalue `onValue` (defaults to 1), while all other locations take value\n`offValue` (defaults to 0).\n\n```js\ntf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();\n```",
              "fileName": "#288",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/array_ops.ts#L288-L303",
              "isFunction": true,
              "displayName": "tf.oneHot",
              "urlHash": "oneHot"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "ones",
              "paramStr": "(shape, dtype?)",
              "parameters": [
                {
                  "name": "shape",
                  "documentation": "An array of integers defining the output tensor shape.",
                  "type": "number[]",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "dtype",
                  "documentation": "The type of an element in the resulting tensor. Defaults to\n'float'.",
                  "type": "'float32'|'int32'|'bool'|'complex64'",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Creates a [tf.Tensor](#class:Tensor) with all elements set to 1.\n\n```js\ntf.ones([2, 2]).print();\n```",
              "fileName": "#367",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/tensor_ops.ts#L367-L376",
              "isFunction": true,
              "displayName": "tf.ones",
              "urlHash": "ones"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "onesLike",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "A tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Creates a [tf.Tensor](#class:Tensor) with all elements set to 1 with the same shape as the\ngiven tensor.\n\n```js\nconst x = tf.tensor([1, 2]);\ntf.onesLike(x).print();\n```",
              "fileName": "#432",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/tensor_ops.ts#L432-L435",
              "isFunction": true,
              "displayName": "tf.onesLike",
              "urlHash": "onesLike"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "print",
              "paramStr": "(x, verbose?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The tensor to be printed.",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "verbose",
                  "documentation": "Whether to print verbose information about the ` Tensor`,\nincluding dtype and size.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "void",
              "documentation": "Prints information about the [tf.Tensor](#class:Tensor) including its data.\n\n```js\nconst verbose = true;\ntf.tensor2d([1, 2, 3, 4], [2, 2]).print(verbose);\n```",
              "fileName": "#1130",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/array_ops.ts#L1130-L1132",
              "isFunction": true,
              "displayName": "tf.print",
              "urlHash": "print"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "range",
              "paramStr": "(start, stop, step?, dtype?)",
              "parameters": [
                {
                  "name": "start",
                  "documentation": "An integer start value",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "stop",
                  "documentation": "An integer stop value",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "step",
                  "documentation": "An integer increment (will default to 1 or -1)",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "dtype",
                  "documentation": "The data type of the output tensor. Defaults to 'float32'.",
                  "type": "'float32'|'int32'",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor1D](#class:Tensor)",
              "documentation": "Creates a new [tf.Tensor1D](#class:Tensor) filled with the numbers in the range provided.\n\nThe tensor is a is half-open interval meaning it includes start, but\nexcludes stop. Decrementing ranges and negative step values are also\nsupported.\n\n```js\ntf.range(0, 9, 2).print();\n```",
              "fileName": "#498",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/tensor_ops.ts#L498-L529",
              "isFunction": true,
              "displayName": "tf.range",
              "urlHash": "range"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "real",
              "paramStr": "(input)",
              "parameters": [
                {
                  "name": "input",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Returns the real part of a complex (or real) tensor.\n\nGiven a tensor input, this operation returns a tensor of type float that is\nthe real part of each element in input considered as a complex number.\n\nIf the input is real, it simply makes a clone.\n\n```js\nconst x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\ntf.real(x).print();\n```",
              "fileName": "#69",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/complex_ops.ts#L69-L73",
              "isFunction": true,
              "displayName": "tf.real",
              "urlHash": "real"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "truncatedNormal",
              "paramStr": "(shape, mean?, stdDev?, dtype?, seed?)",
              "parameters": [
                {
                  "name": "shape",
                  "documentation": "An array of integers defining the output tensor shape.",
                  "type": "number[]",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "mean",
                  "documentation": "The mean of the normal distribution.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "stdDev",
                  "documentation": "The standard deviation of the normal distribution.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "dtype",
                  "documentation": "The data type of the output tensor.",
                  "type": "'float32'|'int32'",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "seed",
                  "documentation": "The seed for the random number generator.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Creates a [tf.Tensor](#class:Tensor) with values sampled from a truncated normal\ndistribution.\n\n```js\ntf.truncatedNormal([2, 2]).print();\n```\n\nThe generated values follow a normal distribution with specified mean and\nstandard deviation, except that values whose magnitude is more than 2\nstandard deviations from the mean are dropped and re-picked.",
              "fileName": "#154",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/array_ops.ts#L154-L167",
              "isFunction": true,
              "displayName": "tf.truncatedNormal",
              "urlHash": "truncatedNormal"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "variable",
              "paramStr": "(initialValue, trainable?, name?, dtype?)",
              "parameters": [
                {
                  "name": "initialValue",
                  "documentation": "Initial value for the tensor.",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "trainable",
                  "documentation": "If true, optimizers are allowed to update it.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "name",
                  "documentation": "Name of the variable. Defaults to a unique id.",
                  "type": "string",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "dtype",
                  "documentation": "If set, initialValue will be converted to the given type.",
                  "type": "'float32'|'int32'|'bool'|'complex64'",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Variable](#class:Variable)",
              "documentation": "Creates a new variable with the provided initial value.\n```js\nconst x = tf.variable(tf.tensor([1, 2, 3]));\nx.assign(tf.tensor([4, 5, 6]));\n\nx.print();\n```",
              "fileName": "#1314",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L1314-L1321",
              "isFunction": true,
              "displayName": "tf.variable",
              "urlHash": "variable"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "zeros",
              "paramStr": "(shape, dtype?)",
              "parameters": [
                {
                  "name": "shape",
                  "documentation": "An array of integers defining the output tensor shape.",
                  "type": "number[]",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "dtype",
                  "documentation": "The type of an element in the resulting tensor. Can\nbe 'float32', 'int32' or 'bool'. Defaults to 'float'.",
                  "type": "'float32'|'int32'|'bool'|'complex64'",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Creates a [tf.Tensor](#class:Tensor) with all elements set to 0.\n\n```js\ntf.zeros([2, 2]).print();\n```",
              "fileName": "#390",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/tensor_ops.ts#L390-L399",
              "isFunction": true,
              "displayName": "tf.zeros",
              "urlHash": "zeros"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Creation"
              },
              "symbolName": "zerosLike",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The tensor of required shape.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Creates a [tf.Tensor](#class:Tensor) with all elements set to 0 with the same shape as the\ngiven tensor.\n\n```js\nconst x = tf.tensor([1, 2]);\ntf.zerosLike(x).print();\n```",
              "fileName": "#449",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/tensor_ops.ts#L449-L452",
              "isFunction": true,
              "displayName": "tf.zerosLike",
              "urlHash": "zerosLike"
            }
          ]
        },
        {
          "name": "Classes",
          "description": "<p>\nThis section shows the main Tensor related classes in TensorFlow.js and\nthe methods we expose on them.\n</p>",
          "symbols": [
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Classes"
              },
              "symbolName": "Tensor",
              "documentation": "A [tf.Tensor](#class:Tensor) object represents an immutable, multidimensional array of numbers\nthat has a shape and a data type.\n\nSee [tf.tensor()](#tensor) for details on how to create a [tf.Tensor](#class:Tensor).",
              "fileName": "#371",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L371-L1246",
              "methods": [
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Classes"
                  },
                  "symbolName": "flatten",
                  "paramStr": "()",
                  "parameters": [],
                  "returnType": "[tf.Tensor1D](#class:Tensor)",
                  "documentation": "Flatten a Tensor to a 1D array. ",
                  "fileName": "#433",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L433-L436",
                  "isFunction": true,
                  "urlHash": "tf.Tensor.flatten"
                },
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Classes"
                  },
                  "symbolName": "asScalar",
                  "paramStr": "()",
                  "parameters": [],
                  "returnType": "[tf.Scalar](#class:Tensor)",
                  "documentation": "Converts a size-1 [tf.Tensor](#class:Tensor) to a [tf.Scalar](#class:Tensor). ",
                  "fileName": "#440",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L440-L444",
                  "isFunction": true,
                  "urlHash": "tf.Tensor.asScalar"
                },
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Classes"
                  },
                  "symbolName": "as1D",
                  "paramStr": "()",
                  "parameters": [],
                  "returnType": "[tf.Tensor1D](#class:Tensor)",
                  "documentation": "Converts a [tf.Tensor](#class:Tensor) to a [tf.Tensor1D](#class:Tensor). ",
                  "fileName": "#448",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L448-L451",
                  "isFunction": true,
                  "urlHash": "tf.Tensor.as1D"
                },
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Classes"
                  },
                  "symbolName": "as2D",
                  "paramStr": "(rows, columns)",
                  "parameters": [
                    {
                      "name": "rows",
                      "documentation": "Number of rows in [tf.Tensor2D](#class:Tensor).",
                      "type": "number",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "columns",
                      "documentation": "Number of columns in [tf.Tensor2D](#class:Tensor).",
                      "type": "number",
                      "optional": false,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "[tf.Tensor2D](#class:Tensor)",
                  "documentation": "Converts a [tf.Tensor](#class:Tensor) to a [tf.Tensor2D](#class:Tensor).",
                  "fileName": "#460",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L460-L463",
                  "isFunction": true,
                  "urlHash": "tf.Tensor.as2D"
                },
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Classes"
                  },
                  "symbolName": "as3D",
                  "paramStr": "(rows, columns, depth)",
                  "parameters": [
                    {
                      "name": "rows",
                      "documentation": "Number of rows in [tf.Tensor3D](#class:Tensor).",
                      "type": "number",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "columns",
                      "documentation": "Number of columns in [tf.Tensor3D](#class:Tensor).",
                      "type": "number",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "depth",
                      "documentation": "Depth of [tf.Tensor3D](#class:Tensor).",
                      "type": "number",
                      "optional": false,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "[tf.Tensor3D](#class:Tensor)",
                  "documentation": "Converts a [tf.Tensor](#class:Tensor) to a [tf.Tensor3D](#class:Tensor).",
                  "fileName": "#473",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L473-L476",
                  "isFunction": true,
                  "urlHash": "tf.Tensor.as3D"
                },
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Classes"
                  },
                  "symbolName": "as4D",
                  "paramStr": "(rows, columns, depth, depth2)",
                  "parameters": [
                    {
                      "name": "rows",
                      "documentation": "Number of rows in [tf.Tensor4D](#class:Tensor).",
                      "type": "number",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "columns",
                      "documentation": "Number of columns in [tf.Tensor4D](#class:Tensor).",
                      "type": "number",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "depth",
                      "documentation": "Depth of [tf.Tensor4D](#class:Tensor).",
                      "type": "number",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "depth2",
                      "documentation": "4th dimension of [tf.Tensor4D](#class:Tensor).",
                      "type": "number",
                      "optional": false,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "[tf.Tensor4D](#class:Tensor)",
                  "documentation": "Converts a [tf.Tensor](#class:Tensor) to a [tf.Tensor4D](#class:Tensor).",
                  "fileName": "#487",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L487-L490",
                  "isFunction": true,
                  "urlHash": "tf.Tensor.as4D"
                },
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Classes"
                  },
                  "symbolName": "asType",
                  "paramStr": "(dtype)",
                  "parameters": [
                    {
                      "name": "dtype",
                      "documentation": "Data-type to cast the tensor to.",
                      "type": "'float32'|'int32'|'bool'|'complex64'",
                      "optional": false,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "this",
                  "documentation": "Casts a [tf.Tensor](#class:Tensor) to a specified dtype.",
                  "fileName": "#498",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L498-L501",
                  "isFunction": true,
                  "urlHash": "tf.Tensor.asType"
                },
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Classes"
                  },
                  "symbolName": "buffer",
                  "paramStr": "()",
                  "parameters": [],
                  "returnType": "[tf.TensorBuffer](#class:TensorBuffer)",
                  "documentation": "Returns a [tf.TensorBuffer](#class:TensorBuffer) that holds the underlying data. ",
                  "fileName": "#534",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L534-L536",
                  "isFunction": true,
                  "urlHash": "tf.Tensor.buffer"
                },
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Classes"
                  },
                  "symbolName": "data",
                  "paramStr": "()",
                  "parameters": [],
                  "returnType": "Promise",
                  "documentation": "Asynchronously downloads the values from the [tf.Tensor](#class:Tensor). Returns a promise of\n[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) that resolves when the computation has finished.",
                  "fileName": "#543",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L543-L546",
                  "isFunction": true,
                  "urlHash": "tf.Tensor.data"
                },
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Classes"
                  },
                  "symbolName": "dataSync",
                  "paramStr": "()",
                  "parameters": [],
                  "returnType": "[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)",
                  "documentation": "Synchronously downloads the values from the [tf.Tensor](#class:Tensor). This blocks the UI\nthread until the values are ready, which can cause performance issues.",
                  "fileName": "#553",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L553-L556",
                  "isFunction": true,
                  "urlHash": "tf.Tensor.dataSync"
                },
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Classes"
                  },
                  "symbolName": "dispose",
                  "paramStr": "()",
                  "parameters": [],
                  "returnType": "void",
                  "documentation": "Disposes [tf.Tensor](#class:Tensor) from memory.",
                  "fileName": "#562",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L562-L568",
                  "isFunction": true,
                  "urlHash": "tf.Tensor.dispose"
                },
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Classes"
                  },
                  "symbolName": "toFloat",
                  "paramStr": "()",
                  "parameters": [],
                  "returnType": "this",
                  "documentation": "Casts the array to type `float32` ",
                  "fileName": "#583",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L583-L585",
                  "isFunction": true,
                  "urlHash": "tf.Tensor.toFloat"
                },
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Classes"
                  },
                  "symbolName": "toInt",
                  "paramStr": "()",
                  "parameters": [],
                  "returnType": "this",
                  "documentation": "Casts the array to type `int32` ",
                  "fileName": "#589",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L589-L591",
                  "isFunction": true,
                  "urlHash": "tf.Tensor.toInt"
                },
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Classes"
                  },
                  "symbolName": "toBool",
                  "paramStr": "()",
                  "parameters": [],
                  "returnType": "this",
                  "documentation": "Casts the array to type `bool` ",
                  "fileName": "#595",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L595-L597",
                  "isFunction": true,
                  "urlHash": "tf.Tensor.toBool"
                },
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Classes"
                  },
                  "symbolName": "print",
                  "paramStr": "(verbose?)",
                  "parameters": [
                    {
                      "name": "verbose",
                      "documentation": "Whether to print verbose information about the tensor,\nincluding dtype and size.",
                      "type": "boolean",
                      "optional": true,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "void",
                  "documentation": "Prints the [tf.Tensor](#class:Tensor). See [tf.print()](#print) for details.",
                  "fileName": "#606",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L606-L608",
                  "isFunction": true,
                  "urlHash": "tf.Tensor.print"
                },
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Classes"
                  },
                  "symbolName": "reshape",
                  "paramStr": "(newShape)",
                  "parameters": [
                    {
                      "name": "newShape",
                      "documentation": "An array of integers defining the output tensor shape.",
                      "type": "number[]",
                      "optional": false,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "[tf.Tensor](#class:Tensor)",
                  "documentation": "Reshapes the tensor into the provided shape.\nSee [tf.reshape()](#reshape) for more details.",
                  "fileName": "#617",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L617-L620",
                  "isFunction": true,
                  "urlHash": "tf.Tensor.reshape"
                },
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Classes"
                  },
                  "symbolName": "reshapeAs",
                  "paramStr": "(x)",
                  "parameters": [
                    {
                      "name": "x",
                      "documentation": "The tensor of required shape.",
                      "type": "[tf.Tensor](#class:Tensor)",
                      "optional": false,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "[tf.Tensor](#class:Tensor)",
                  "documentation": "Reshapes the tensor into the shape of the provided tensor.",
                  "fileName": "#628",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L628-L631",
                  "isFunction": true,
                  "urlHash": "tf.Tensor.reshapeAs"
                },
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Classes"
                  },
                  "symbolName": "expandDims",
                  "paramStr": "(axis?)",
                  "parameters": [
                    {
                      "name": "axis",
                      "documentation": "The dimension index at which to insert shape of 1. Defaults to\n0 (the first dimension).",
                      "type": "number",
                      "optional": true,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "[tf.Tensor](#class:Tensor)",
                  "documentation": "Returns a [tf.Tensor](#class:Tensor) that has expanded rank, by inserting a dimension\ninto the tensor's shape. See [tf.expandDims()](#expandDims) for details.",
                  "fileName": "#641",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L641-L643",
                  "isFunction": true,
                  "urlHash": "tf.Tensor.expandDims"
                },
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Classes"
                  },
                  "symbolName": "cumsum",
                  "paramStr": "(axis?, exclusive?, reverse?)",
                  "parameters": [
                    {
                      "name": "axis",
                      "documentation": "The axis along which to sum. Optional. Defaults to 0.",
                      "type": "number",
                      "optional": true,
                      "isConfigParam": false
                    },
                    {
                      "name": "exclusive",
                      "documentation": "Whether to perform exclusive cumulative sum. Defaults to\nfalse. If set to true then the sum of each tensor entry does not include\nits own value, but only the values previous to it along the specified\naxis.",
                      "type": "boolean",
                      "optional": true,
                      "isConfigParam": false
                    },
                    {
                      "name": "reverse",
                      "documentation": "Whether to sum in the opposite direction. Defaults to\nfalse.",
                      "type": "boolean",
                      "optional": true,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "[tf.Tensor](#class:Tensor)",
                  "documentation": "Returns the cumulative sum of the [tf.Tensor](#class:Tensor) along `axis`.",
                  "fileName": "#657",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L657-L659",
                  "isFunction": true,
                  "urlHash": "tf.Tensor.cumsum"
                },
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Classes"
                  },
                  "symbolName": "squeeze",
                  "paramStr": "(axis?)",
                  "parameters": [
                    {
                      "name": "axis",
                      "documentation": "A list of numbers. If specified, only squeezes the\ndimensions listed. The dimension index starts at 0. It is an error to\nsqueeze a dimension that is not 1.",
                      "type": "number[]",
                      "optional": true,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "[tf.Tensor](#class:Tensor)",
                  "documentation": "Returns a [tf.Tensor](#class:Tensor) with dimensions of size 1 removed from the shape.\nSee [tf.squeeze()](#squeeze) for more details.",
                  "fileName": "#670",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L670-L673",
                  "isFunction": true,
                  "urlHash": "tf.Tensor.squeeze"
                },
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Classes"
                  },
                  "symbolName": "clone",
                  "paramStr": "()",
                  "parameters": [],
                  "returnType": "[tf.Tensor](#class:Tensor)",
                  "documentation": "Returns a copy of the tensor. See [tf.clone()](#clone) for details. ",
                  "fileName": "#677",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L677-L680",
                  "isFunction": true,
                  "urlHash": "tf.Tensor.clone"
                },
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Classes"
                  },
                  "symbolName": "toString",
                  "paramStr": "(verbose?)",
                  "parameters": [
                    {
                      "name": "verbose",
                      "documentation": "",
                      "type": "boolean",
                      "optional": true,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "string",
                  "documentation": "Returns a human-readable description of the tensor. Useful for logging. ",
                  "fileName": "#684",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L684-L687",
                  "isFunction": true,
                  "urlHash": "tf.Tensor.toString"
                }
              ],
              "isClass": true,
              "displayName": "tf.Tensor",
              "urlHash": "class:Tensor"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Classes"
              },
              "symbolName": "Variable",
              "documentation": "A mutable [tf.Tensor](#class:Tensor), useful for persisting state, e.g. for training.",
              "fileName": "#1272",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L1272-L1345",
              "methods": [
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Classes"
                  },
                  "symbolName": "assign",
                  "paramStr": "(newValue)",
                  "parameters": [
                    {
                      "name": "newValue",
                      "documentation": "New tensor to be assigned to this variable.",
                      "type": "[tf.Tensor](#class:Tensor)",
                      "optional": false,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "void",
                  "documentation": "Assign a new [tf.Tensor](#class:Tensor) to this variable. The new [tf.Tensor](#class:Tensor) must have the\nsame shape and dtype as the old [tf.Tensor](#class:Tensor).",
                  "fileName": "#1330",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L1330-L1344",
                  "isFunction": true,
                  "urlHash": "tf.Variable.assign"
                }
              ],
              "isClass": true,
              "inheritsFrom": "[tf.Tensor](#class:Tensor)",
              "displayName": "tf.Variable",
              "urlHash": "class:Variable"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Classes"
              },
              "symbolName": "TensorBuffer",
              "documentation": "A mutable object, similar to [tf.Tensor](#class:Tensor), that allows users to set values\nat locations before converting to an immutable [tf.Tensor](#class:Tensor).\n\nSee [tf.buffer()](#buffer) for creating a tensor buffer.",
              "fileName": "#36",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L36-L140",
              "methods": [
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Creation"
                  },
                  "symbolName": "set",
                  "paramStr": "(value, ...locs)",
                  "parameters": [
                    {
                      "name": "value",
                      "documentation": "The value to set.",
                      "type": "number",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "...locs",
                      "documentation": "The location indices.",
                      "type": "number[]",
                      "optional": false,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "void",
                  "documentation": "Sets a value in the buffer at a given location.",
                  "fileName": "#71",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L71-L82",
                  "isFunction": true,
                  "urlHash": "tf.TensorBuffer.set"
                },
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Creation"
                  },
                  "symbolName": "get",
                  "paramStr": "(...locs)",
                  "parameters": [
                    {
                      "name": "...locs",
                      "documentation": "The location indices.",
                      "type": "number[]",
                      "optional": false,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "number",
                  "documentation": "Returns the value in the buffer at the provided location.",
                  "fileName": "#90",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L90-L99",
                  "isFunction": true,
                  "urlHash": "tf.TensorBuffer.get"
                },
                {
                  "docInfo": {
                    "heading": "Tensors",
                    "subheading": "Creation"
                  },
                  "symbolName": "toTensor",
                  "paramStr": "()",
                  "parameters": [],
                  "returnType": "[tf.Tensor](#class:Tensor)",
                  "documentation": "Creates an immutable [tf.Tensor](#class:Tensor) object from the buffer.",
                  "fileName": "#137",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/tensor.ts#L137-L139",
                  "isFunction": true,
                  "urlHash": "tf.TensorBuffer.toTensor"
                }
              ],
              "isClass": true,
              "displayName": "tf.TensorBuffer",
              "urlHash": "class:TensorBuffer"
            }
          ]
        },
        {
          "name": "Transformations",
          "description": "<p>This section describes some common Tensor\ntransformations for reshaping and type-casting.</p>",
          "symbols": [
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Transformations"
              },
              "symbolName": "batchToSpaceND",
              "paramStr": "(x, blockShape, crops)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "A [tf.Tensor](#class:Tensor). N-D with `x.shape` = `[batch] + spatialShape +\nremainingShape`, where spatialShape has `M` dimensions.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "blockShape",
                  "documentation": "A 1-D array. Must be one of the following types: `int32`,\n`int64`. Must have shape `[M]`, all values must be >= 1.",
                  "type": "number[]",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "crops",
                  "documentation": "A 2-D array.  Must be one of the following types: `int32`,\n`int64`. Must have shape `[M, 2]`, all values must be >= 0. `crops[i] =\n[cropStart, cropEnd]` specifies the amount to crop from input dimension `i\n+ 1`, which corresponds to spatial dimension `i`. It is required that\n`cropStart[i] + cropEnd[i] <= blockShape[i] * inputShape[i + 1]`\n\nThis operation is equivalent to the following steps:\n\n1. Reshape `x` to `reshaped` of shape: `[blockShape[0], ...,\nblockShape[M-1], batch / prod(blockShape), x.shape[1], ...,\nx.shape[N-1]]`\n\n2. Permute dimensions of `reshaped`to produce `permuted` of shape `[batch /\nprod(blockShape),x.shape[1], blockShape[0], ..., x.shape[M],\nblockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`\n\n3. Reshape `permuted` to produce `reshapedPermuted` of shape `[batch /\nprod(blockShape),x.shape[1] * blockShape[0], ..., x.shape[M] *\nblockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`\n\n4. Crop the start and end of dimensions `[1, ..., M]` of `reshapedPermuted`\naccording to `crops` to produce the output of shape: `[batch /\nprod(blockShape),x.shape[1] * blockShape[0] - crops[0,0] - crops[0,1],\n..., x.shape[M] * blockShape[M-1] - crops[M-1,0] -\ncrops[M-1,1],x.shape[M+1], ..., x.shape[N-1]]`",
                  "type": "number[][]",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "This operation reshapes the \"batch\" dimension 0 into `M + 1` dimensions of\nshape `blockShape + [batch]`, interleaves these blocks back into the grid\ndefined by the spatial dimensions `[1, ..., M]`, to obtain a result with\nthe same rank as the input. The spatial dimensions of this intermediate\nresult are then optionally cropped according to `crops` to produce the\noutput. This is the reverse of [tf.spaceToBatchND()](#spaceToBatchND). See below for a precise\ndescription.\n\n```js\nconst x = tf.tensor4d([1, 2, 3, 4], [4, 1, 1, 1]);\nconst blockShape = [2, 2];\nconst crops = [[0, 0], [0, 0]];\n\nx.batchToSpaceND(blockShape, crops).print();\n```",
              "fileName": "#791",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/array_ops.ts#L791-L814",
              "isFunction": true,
              "displayName": "tf.batchToSpaceND",
              "urlHash": "batchToSpaceND"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Transformations"
              },
              "symbolName": "cast",
              "paramStr": "(x, dtype)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor to be casted.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "dtype",
                  "documentation": "The dtype to cast the input tensor to.",
                  "type": "'float32'|'int32'|'bool'|'complex64'",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Casts a [tf.Tensor](#class:Tensor) to a new dtype.\n\n```js\nconst x = tf.tensor1d([1.5, 2.5, 3]);\ntf.cast(x, 'int32').print();\n```",
              "fileName": "#507",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/array_ops.ts#L507-L515",
              "isFunction": true,
              "displayName": "tf.cast",
              "urlHash": "cast"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Transformations"
              },
              "symbolName": "depthToSpace",
              "paramStr": "(x, blockSize, dataFormat?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor of rank 4",
                  "type": "[tf.Tensor4D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "blockSize",
                  "documentation": "",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "dataFormat",
                  "documentation": "An optional string from: \"NHWC\", \"NCHW\". Defaults to \"NHWC\"",
                  "type": "'NHWC'|'NCHW'",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor4D](#class:Tensor)",
              "documentation": "Rearranges data from depth into blocks of spatial data. More specifically,\nthis op outputs a copy of the input tensor where values from the `depth`\ndimension are moved in spatial blocks to the `height` and `width` dimensions.\nThe attr `blockSize` indicates the input block size and how the data is\nmoved.\n\n  - Chunks of data of size `blockSize * blockSize` from depth are rearranged\ninto non-overlapping blocks of size `blockSize x blockSize`\n\n  - The width the output tensor is `inputWidth * blockSize`, whereas the\nheight is `inputHeight * blockSize`\n\n  - The Y, X coordinates within each block of the output image are determined\nby the high order component of the input channel index\n\n  - The depth of the input tensor must be divisible by `blockSize *\nblockSize`\n\nThe `dataFormat` attr specifies the layout of the input and output tensors\nwith the following options: \"NHWC\": [ `batch, height, width, channels` ]\n\"NCHW\": [ `batch, channels, height, width` ]\n\n```js\nconst x = tf.tensor4d([1, 2, 3, 4], [1, 1, 1, 4]);\nconst blockSize = 2;\nconst dataFormat = \"NHWC\";\n\ntf.depthToSpace(x, blockSize, dataFormat).print();\n```",
              "fileName": "#1056",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/array_ops.ts#L1056-L1085",
              "isFunction": true,
              "displayName": "tf.depthToSpace",
              "urlHash": "depthToSpace"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Transformations"
              },
              "symbolName": "expandDims",
              "paramStr": "(x, axis?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor whose dimensions to be expanded.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "The dimension index at which to insert shape of `1`. Defaults\nto 0 (the first dimension).",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Returns a [tf.Tensor](#class:Tensor) that has expanded rank, by inserting a dimension\ninto the tensor's shape.\n\n```js\nconst x = tf.tensor1d([1, 2, 3, 4]);\nconst axis = 1;\nx.expandDims(axis).print();\n```",
              "fileName": "#1003",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/array_ops.ts#L1003-L1018",
              "isFunction": true,
              "displayName": "tf.expandDims",
              "urlHash": "expandDims"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Transformations"
              },
              "symbolName": "pad",
              "paramStr": "(x, paddings, constantValue?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The tensor to pad.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "paddings",
                  "documentation": "An array of length `R` (the rank of the tensor), where\neach element is a length-2 tuple of ints `[padBefore, padAfter]`,\nspecifying how much to pad along each dimension of the tensor.",
                  "type": "Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "constantValue",
                  "documentation": "The pad value to use. Defaults to 0.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Pads a [tf.Tensor](#class:Tensor) with a given value and paddings.\n\nThis operation currently only implements the `CONSTANT` mode.\n\nAlso available are stricter rank-specific methods with the same signature\nas this method that assert that `paddings` is of given length.\n   - `tf.pad1d`\n   - `tf.pad2d`\n   - `tf.pad3d`\n   - `tf.pad4d`\n\n```js\nconst x = tf.tensor1d([1, 2, 3, 4]);\nx.pad([[1, 2]]).print();\n```",
              "fileName": "#683",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/array_ops.ts#L683-L699",
              "isFunction": true,
              "displayName": "tf.pad",
              "urlHash": "pad"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Transformations"
              },
              "symbolName": "reshape",
              "paramStr": "(x, shape)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor to be reshaped.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "shape",
                  "documentation": "An array of integers defining the output tensor shape.",
                  "type": "number[]",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Reshapes a [tf.Tensor](#class:Tensor) to a given shape.\n\nGiven an input tensor, returns a new tensor with the same values as the\ninput tensor with shape `shape`.\n\nIf one component of shape is the special value -1, the size of that\ndimension is computed so that the total size remains constant. In\nparticular, a shape of [-1] flattens into 1-D. At most one component of\nshape can be -1.\n\nIf shape is 1-D or higher, then the operation returns a tensor with shape\nshape filled with the values of tensor. In this case, the number of\nelements implied by shape must be the same as the number of elements in\ntensor.\n\n```js\nconst x = tf.tensor1d([1, 2, 3, 4]);\nx.reshape([2, 2]).print();\n```",
              "fileName": "#462",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/array_ops.ts#L462-L475",
              "isFunction": true,
              "displayName": "tf.reshape",
              "urlHash": "reshape"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Transformations"
              },
              "symbolName": "spaceToBatchND",
              "paramStr": "(x, blockShape, paddings)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "A [tf.Tensor](#class:Tensor). N-D with `x.shape` = `[batch] + spatialShape +\nremainingShape`, where spatialShape has `M` dimensions.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "blockShape",
                  "documentation": "A 1-D array. Must be one of the following types: `int32`,\n`int64`. Must have shape `[M]`, all values must be >= 1.",
                  "type": "number[]",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "paddings",
                  "documentation": "A 2-D array.  Must be one of the following types: `int32`,\n`int64`. Must have shape `[M, 2]`, all values must be >= 0. `paddings[i] =\n[padStart, padEnd]` specifies the amount to zero-pad from input dimension\n`i + 1`, which corresponds to spatial dimension `i`.\nIt is required that\n`(inputShape[i + 1] + padStart + padEnd) % blockShape[i] === 0`\n\nThis operation is equivalent to the following steps:\n\n1. Zero-pad the start and end of dimensions [1, ..., M] of the input\naccording to paddings to produce padded of shape padded_shape.\n\n2. Reshape padded to reshaped_padded of shape:\n[batch] + [padded_shape[1] / block_shape[0], block_shape[0], ...,\npadded_shape[M] / block_shape[M-1], block_shape[M-1]] + remaining_shape\n\n3. Permute dimensions of reshaped_padded to produce permuted_\nreshaped_padded of shape:\nblock_shape + [batch] + [padded_shape[1] / block_shape[0], ...,\npadded_shape[M] / block_shape[M-1]] + remaining_shape\n\n4. Reshape permuted_reshaped_padded to flatten block_shape into the\nbatch dimension, producing an output tensor of shape:\n[batch * prod(block_shape)] + [padded_shape[1] / block_shape[0], ...,\npadded_shape[M] / block_shape[M-1]] + remaining_shape",
                  "type": "number[][]",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "This operation divides \"spatial\" dimensions [1, ..., M] of the input into\na grid of blocks of shape block_shape, and interleaves these blocks with\nthe \"batch\" dimension (0) such that in the output, the spatial\ndimensions [1, ..., M] correspond to the position within the grid,\nand the batch dimension combines both the position within a spatial block\nand the original batch position. Prior to division into blocks,\nthe spatial dimensions of the input are optionally zero padded\naccording to paddings. See below for a precise description.\n\n```js\nconst x = tf.tensor4d([1, 2, 3, 4], [4, 1, 1, 1]);\nconst blockShape = [2, 2];\nconst paddings = [[0, 0], [0, 0]];\n\nx.spaceToBatchND(blockShape, paddings).print();\n```",
              "fileName": "#865",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/array_ops.ts#L865-L901",
              "isFunction": true,
              "displayName": "tf.spaceToBatchND",
              "urlHash": "spaceToBatchND"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Transformations"
              },
              "symbolName": "squeeze",
              "paramStr": "(x, axis?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor to be squeezed.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "An optional list of numbers. If specified, only\nsqueezes the dimensions listed. The dimension index starts at 0. It\nis an error to squeeze a dimension that is not 1.",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Removes dimensions of size 1 from the shape of a [tf.Tensor](#class:Tensor).\n\n```js\nconst x = tf.tensor([1, 2, 3, 4], [1, 1, 4]);\nx.squeeze().print();\n```",
              "fileName": "#491",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/array_ops.ts#L491-L494",
              "isFunction": true,
              "displayName": "tf.squeeze",
              "urlHash": "squeeze"
            }
          ]
        },
        {
          "name": "Slicing and Joining",
          "description": "<p>TensorFlow.js provides several operations\nto slice or extract parts of a tensor, or join multiple\ntensors together.",
          "symbols": [
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Slicing and Joining"
              },
              "symbolName": "concat",
              "paramStr": "(tensors, axis?)",
              "parameters": [
                {
                  "name": "tensors",
                  "documentation": "A list of tensors to concatenate.",
                  "type": "[tf.Tensor](#class:Tensor)[]|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array[]",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "The axis to concate along. Defaults to 0 (the first dim).",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Concatenates a list of [tf.Tensor](#class:Tensor)s along a given axis.\n\nThe tensors ranks and types must match, and their sizes must match in all\ndimensions except `axis`.\n\nAlso available are stricter rank-specific methods that assert that\n`tensors` are of the given rank:\n   - `tf.concat1d`\n   - `tf.concat2d`\n   - `tf.concat3d`\n   - `tf.concat4d`\n\nExcept `tf.concat1d` (which does not have axis param), all methods have\nsame signature as this method.\n\n```js\nconst a = tf.tensor1d([1, 2]);\nconst b = tf.tensor1d([3, 4]);\na.concat(b).print();  // or a.concat(b)\n```\n\n```js\nconst a = tf.tensor1d([1, 2]);\nconst b = tf.tensor1d([3, 4]);\nconst c = tf.tensor1d([5, 6]);\ntf.concat([a, b, c]).print();\n```\n\n```js\nconst a = tf.tensor2d([[1, 2], [10, 20]]);\nconst b = tf.tensor2d([[3, 4], [30, 40]]);\nconst axis = 1;\ntf.concat([a, b], axis).print();\n```",
              "fileName": "#158",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/concat_split.ts#L158-L182",
              "isFunction": true,
              "displayName": "tf.concat",
              "urlHash": "concat"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Slicing and Joining"
              },
              "symbolName": "gather",
              "paramStr": "(x, indices, axis?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor whose slices to be gathered.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "indices",
                  "documentation": "The indices of the values to extract.",
                  "type": "[tf.Tensor1D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "The axis over which to select values. Defaults to 0.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Gather slices from tensor `x`'s axis `axis` according to `indices`.\n\n```js\nconst x = tf.tensor1d([1, 2, 3, 4]);\nconst indices = tf.tensor1d([1, 3, 3], 'int32');\n\nx.gather(indices).print();\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\nconst indices = tf.tensor1d([1, 1, 0], 'int32');\n\nx.gather(indices).print();\n```",
              "fileName": "#89",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/segment_ops.ts#L89-L135",
              "isFunction": true,
              "displayName": "tf.gather",
              "urlHash": "gather"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Slicing and Joining"
              },
              "symbolName": "reverse",
              "paramStr": "(x, axis?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor to be reversed.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "The set of dimensions to reverse. Must be in the\nrange [-rank(x), rank(x)). Defaults to all axes.",
                  "type": "number|number[]",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Reverses a [tf.Tensor](#class:Tensor) along a specified axis.\n\nAlso available are stricter rank-specific methods that assert that `x` is\nof the given rank:\n   - `tf.reverse1d`\n   - `tf.reverse2d`\n   - `tf.reverse3d`\n   - `tf.reverse4d`\n\nExcept `tf.reverse1d` (which does not have axis param), all methods have\nsame signature as this method.\n\n```js\nconst x = tf.tensor1d([1, 2, 3, 4]);\n\nx.reverse().print();\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\nconst axis = 1;\nx.reverse(axis).print();\n```",
              "fileName": "#110",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/reverse.ts#L110-L124",
              "isFunction": true,
              "displayName": "tf.reverse",
              "urlHash": "reverse"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Slicing and Joining"
              },
              "symbolName": "slice",
              "paramStr": "(x, begin, size?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input [tf.Tensor](#class:Tensor) to slice from.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "begin",
                  "documentation": "The coordinates to start the slice from. The length can be\nless than the rank of x - the rest of the axes will have implicit 0 as\nstart. Can also be a single number, in which case it specifies the\nfirst axis.",
                  "type": "number|number[]",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "size",
                  "documentation": "The size of the slice. The length can be less than the rank of\nx - the rest of the axes will have implicit -1. A value of -1 requests\nthe rest of the dimensions in the axis. Can also be a single number,\nin which case it specifies the size of the first axis.",
                  "type": "number|number[]",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Extracts a slice from a [tf.Tensor](#class:Tensor) starting at coordinates `begin`\nand is of size `size`.\n\nAlso available are stricter rank-specific methods with the same signature\nas this method that assert that `x` is of the given rank:\n   - `tf.slice1d`\n   - `tf.slice2d`\n   - `tf.slice3d`\n   - `tf.slice4d`\n\n```js\nconst x = tf.tensor1d([1, 2, 3, 4]);\n\nx.slice([1], [2]).print();\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\nx.slice([1, 0], [1, 2]).print();\n```",
              "fileName": "#114",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/slice.ts#L114-L165",
              "isFunction": true,
              "displayName": "tf.slice",
              "urlHash": "slice"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Slicing and Joining"
              },
              "symbolName": "split",
              "paramStr": "(x, numOrSizeSplits, axis?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor to split.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "numOrSizeSplits",
                  "documentation": "Either an integer indicating the number of\nsplits along the axis or an array of integers containing the sizes of\neach output tensor along the axis. If a number then it must evenly divide\n`x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.",
                  "type": "number[]|number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "The dimension along which to split. Defaults to 0 (the first\ndim).",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)[]",
              "documentation": "Splits a [tf.Tensor](#class:Tensor) into sub tensors.\n\nIf `numOrSizeSplits` is a number, splits `x` along dimension `axis`\ninto `numOrSizeSplits` smaller tensors.\nRequires that `numOrSizeSplits` evenly divides `x.shape[axis]`.\n\nIf `numOrSizeSplits` is a number array, splits `x` into\n`(numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the\nsame size as `x` except along dimension `axis` where the size is\n`numOrSizeSplits[i]`.\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);\nconst [a, b] = tf.split(x, 2, 1);\na.print();\nb.print();\n\nconst [c, d, e] = tf.split(x, [1, 2, 1], 1);\nc.print();\nd.print();\ne.print();\n```",
              "fileName": "#217",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/concat_split.ts#L217-L237",
              "isFunction": true,
              "displayName": "tf.split",
              "urlHash": "split"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Slicing and Joining"
              },
              "symbolName": "stack",
              "paramStr": "(tensors, axis?)",
              "parameters": [
                {
                  "name": "tensors",
                  "documentation": "A list of tensor objects with the same shape and dtype.",
                  "type": "[tf.Tensor](#class:Tensor)[]|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array[]",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "The axis to stack along. Defaults to 0 (the first dim).",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Stacks a list of rank-`R` [tf.Tensor](#class:Tensor)s into one rank-`(R+1)` [tf.Tensor](#class:Tensor).\n\n```js\nconst a = tf.tensor1d([1, 2]);\nconst b = tf.tensor1d([3, 4]);\nconst c = tf.tensor1d([5, 6]);\ntf.stack([a, b, c]).print();\n```",
              "fileName": "#715",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/array_ops.ts#L715-L741",
              "isFunction": true,
              "displayName": "tf.stack",
              "urlHash": "stack"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Slicing and Joining"
              },
              "symbolName": "tile",
              "paramStr": "(x, reps)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The tensor to tile.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "reps",
                  "documentation": "Determines the number of replications per dimension.",
                  "type": "number[]",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Construct a tensor by repeating it the number of times given by reps.\n\nThis operation creates a new tensor by replicating [tf.input()](#input) `reps`\ntimes. The output tensor's i'th dimension has `input.shape[i] *\nreps[i]` elements, and the values of [tf.input()](#input) are replicated\n`reps[i]` times along the i'th dimension. For example, tiling\n`[a, b, c, d]` by `[2]` produces `[a, b, c, d, a, b, c, d]`.\n\n```js\nconst a = tf.tensor1d([1, 2]);\n\na.tile([2]).print();    // or a.tile([2])\n```\n\n```js\nconst a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\na.tile([1, 2]).print();  // or a.tile([1, 2])\n```",
              "fileName": "#541",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/array_ops.ts#L541-L600",
              "isFunction": true,
              "displayName": "tf.tile",
              "urlHash": "tile"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Slicing and Joining"
              },
              "symbolName": "unstack",
              "paramStr": "(x, axis?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "A tensor object.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "The axis to unstack along. Defaults to 0 (the first dim).",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)[]",
              "documentation": "Unstacks a [tf.Tensor](#class:Tensor) of rank-`R` into a list of rank-`(R-1)` [tf.Tensor](#class:Tensor)s.\n\n```js\nconst a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\ntf.unstack(a).forEach(tensor => tensor.print());\n```",
              "fileName": "#916",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/array_ops.ts#L916-L938",
              "isFunction": true,
              "displayName": "tf.unstack",
              "urlHash": "unstack"
            }
          ]
        },
        {
          "name": "Random",
          "symbols": [
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Random"
              },
              "symbolName": "multinomial",
              "paramStr": "(logits, numSamples, seed?, normalized?)",
              "parameters": [
                {
                  "name": "logits",
                  "documentation": "1D array with unnormalized log-probabilities, or\n2D array of shape `[batchSize, numOutcomes]`. See the `normalized`\nparameter.",
                  "type": "[tf.Tensor1D](#class:Tensor)|[tf.Tensor2D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "numSamples",
                  "documentation": "Number of samples to draw for each row slice.",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "seed",
                  "documentation": "The seed number.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "normalized",
                  "documentation": "Whether the provided `logits` are normalized true\nprobabilities (sum to 1). Defaults to false.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor1D](#class:Tensor)|[tf.Tensor2D](#class:Tensor)",
              "documentation": "Creates a [tf.Tensor](#class:Tensor) with values drawn from a multinomial distribution.\n\n```js\nconst probs = tf.tensor([.75, .25]);\ntf.multinomial(probs, 3).print();\n```",
              "fileName": "#248",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/array_ops.ts#L248-L269",
              "isFunction": true,
              "displayName": "tf.multinomial",
              "urlHash": "multinomial"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Random"
              },
              "symbolName": "randomNormal",
              "paramStr": "(shape, mean?, stdDev?, dtype?, seed?)",
              "parameters": [
                {
                  "name": "shape",
                  "documentation": "An array of integers defining the output tensor shape.",
                  "type": "number[]",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "mean",
                  "documentation": "The mean of the normal distribution.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "stdDev",
                  "documentation": "The standard deviation of the normal distribution.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "dtype",
                  "documentation": "The data type of the output.",
                  "type": "'float32'|'int32'",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "seed",
                  "documentation": "The seed for the random number generator.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Creates a [tf.Tensor](#class:Tensor) with values sampled from a normal distribution.\n\n```js\ntf.randomNormal([2, 2]).print();\n```",
              "fileName": "#120",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/array_ops.ts#L120-L133",
              "isFunction": true,
              "displayName": "tf.randomNormal",
              "urlHash": "randomNormal"
            },
            {
              "docInfo": {
                "heading": "Tensors",
                "subheading": "Random"
              },
              "symbolName": "randomUniform",
              "paramStr": "(shape, minval?, maxval?, dtype?)",
              "parameters": [
                {
                  "name": "shape",
                  "documentation": "An array of integers defining the output tensor shape.",
                  "type": "number[]",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "minval",
                  "documentation": "The lower bound on the range of random values to generate.\nDefaults to 0.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "maxval",
                  "documentation": "The upper bound on the range of random values to generate.\nDefaults to 1.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "dtype",
                  "documentation": "The data type of the output tensor. Defaults to 'float32'.",
                  "type": "'float32'|'int32'|'bool'|'complex64'",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Creates a [tf.Tensor](#class:Tensor) with values sampled from a uniform distribution.\n\nThe generated values follow a uniform distribution in the range [minval,\nmaxval). The lower bound minval is included in the range, while the upper\nbound maxval is excluded.\n\n```js\ntf.randomUniform([2, 2]).print();\n```",
              "fileName": "#188",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/array_ops.ts#L188-L196",
              "isFunction": true,
              "displayName": "tf.randomUniform",
              "urlHash": "randomUniform"
            }
          ]
        }
      ]
    },
    {
      "name": "Models",
      "description": "<p>Models are one of the primary abstractions used in\nTensorFlow.js Layers.  Models can be trained, evaluated, and used\nfor prediction.  A model's state (topology, and optionally, trained\nweights) can be restored from various formats.</p>\n<p>Models are a collection of Layers, see Model Creation for\ndetails about how Layers can be connected.</p>",
      "subheadings": [
        {
          "name": "Creation",
          "description": "<p>There are two primary ways of creating models.</p>\n<ul><li>Sequential &mdash; Easiest, works if the models is a\nsimple stack of each layer's input resting on the top of the\nprevious layer's output.</li>\n<li>Model &mdash; Offers more control if the layers need to be\nwired together in graph-like ways &mdash; multiple 'towers',\nlayers that skip a layer, etc.</li></ul>",
          "symbols": [
            {
              "docInfo": {
                "heading": "Models",
                "subheading": "Creation",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "sequential",
              "paramStr": "(config?)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "layers",
                  "documentation": "Stack of layers for the model. ",
                  "type": "[tf.layers.Layer](#class:layers.Layer)[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "name",
                  "documentation": "The name of this model. ",
                  "type": "string",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.Sequential](#class:Sequential)",
              "documentation": "Creates a [tf.Sequential](#class:Sequential) model.  A sequential model is any model where the\noutputs of one layer are the inputs to the next layer, i.e. the model\ntopology is a simple 'stack' of layers, with no branching or skipping.\n\nThis means that the first layer passed to a Sequential model should have a\ndefined input shape. What that means is that it should have received an\n`inputShape` or `batchInputShape` argument, or for some type of layers\n(recurrent, Dense...) an `inputDim` argument.\n\nThe key difference between [tf.model()](#model) and [tf.sequential()](#sequential) is that [tf.sequential()](#sequential)\nis less generic, supporting only a linear stack of layers. [tf.model()](#model) is\nmore generic and supports an arbitrary graph (without cycles) of layers.\n\nExamples:\n\n```js\nconst model = tf.sequential();\n\n// First layer must have an input shape defined.\nmodel.add(tf.layers.dense({units: 32, inputShape: [50]}));\n// Afterwards, TF.js does automatic shape inference.\nmodel.add(tf.layers.dense({units: 4}));\n\n// Inspect the inferred shape of the model's output, which equals\n// `[null, 4]`. The 1st dimension is the undetermined batch dimension; the\n// 2nd is the output size of the model's last layer.\nconsole.log(JSON.stringify(model.outputs[0].shape));\n```\n\nIt is also possible to specify a batch size (with potentially undetermined\nbatch dimension, denoted by \"null\") for the first layer using the\n`batchInputShape` key. The following example is equivalent to the above:\n\n```js\nconst model = tf.sequential();\n\n// First layer must have a defined input shape\nmodel.add(tf.layers.dense({units: 32, batchInputShape: [null, 50]}));\n// Afterwards, TF.js does automatic shape inference.\nmodel.add(tf.layers.dense({units: 4}));\n\n// Inspect the inferred shape of the model's output.\nconsole.log(JSON.stringify(model.outputs[0].shape));\n```\n\nYou can also use an `Array` of already-constructed `Layer`s to create\na [tf.Sequential](#class:Sequential) model:\n\n```js\nconst model = tf.sequential({\n   layers: [tf.layers.dense({units: 32, inputShape: [50]}),\n            tf.layers.dense({units: 4})]\n});\nconsole.log(JSON.stringify(model.outputs[0].shape));\n```",
              "fileName": "#136",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports.ts#L136-L138",
              "isFunction": true,
              "displayName": "tf.sequential",
              "urlHash": "sequential"
            },
            {
              "docInfo": {
                "heading": "Models",
                "subheading": "Creation",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "model",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "inputs",
                  "documentation": "",
                  "type": "[tf.SymbolicTensor](#class:SymbolicTensor)|[tf.SymbolicTensor](#class:SymbolicTensor)[]",
                  "optional": false,
                  "isConfigParam": true
                },
                {
                  "name": "outputs",
                  "documentation": "",
                  "type": "[tf.SymbolicTensor](#class:SymbolicTensor)|[tf.SymbolicTensor](#class:SymbolicTensor)[]",
                  "optional": false,
                  "isConfigParam": true
                },
                {
                  "name": "name",
                  "documentation": "",
                  "type": "string",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.Model](#class:Model)",
              "documentation": "A model is a data structure that consists of `Layers` and defines inputs\nand outputs.\n\nThe key difference between [tf.model()](#model) and [tf.sequential()](#sequential) is that [tf.model()](#model)\nis more generic, supporting an arbitrary graph (without cycles) of layers.\n[tf.sequential()](#sequential) is less generic and supports only a linear stack of layers.\n\nWhen creating a [tf.Model](#class:Model), specify its input(s) and output(s). Layers\nare used to wire input(s) to output(s).\n\nFor example, the following code snippet defines a model consisting of\ntwo `dense` layers, with 10 and 4 units, respectively.\n\n```js\n// Define input, which has a size of 5 (not including batch dimension).\nconst input = tf.input({shape: [5]});\n\n// First dense layer uses relu activation.\nconst denseLayer1 = tf.layers.dense({units: 10, activation: 'relu'});\n// Second dense layer uses softmax activation.\nconst denseLayer2 = tf.layers.dense({units: 4, activation: 'softmax'});\n\n// Obtain the output symbolic tensor by applying the layers on the input.\nconst output = denseLayer2.apply(denseLayer1.apply(input));\n\n// Create the model based on the inputs.\nconst model = tf.model({inputs: input, outputs: output});\n\n// The model can be used for training, evaluation and prediction.\n// For example, the following line runs prediction with the model on\n// some fake data.\nmodel.predict(tf.ones([2, 5])).print();\n```\nSee also:\n   [tf.sequential()](#sequential), [tf.loadModel()](#loadModel).",
              "fileName": "#72",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports.ts#L72-L74",
              "isFunction": true,
              "displayName": "tf.model",
              "urlHash": "model"
            }
          ]
        },
        {
          "name": "Inputs",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Models",
                "subheading": "Inputs",
                "useDocsFrom": "Input",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "input",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "InputConfig",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "shape",
                  "documentation": "A shape, not including the batch size. For instance, `shape=[32]`\nindicates that the expected input will be batches of 32-dimensional\nvectors.",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "batchShape",
                  "documentation": "A shape tuple (integer), including the batch size. For instance,\n`batchShape=[10, 32]` indicates that the expected input will be batches of\n10 32-dimensional vectors. `batchShape=[null, 32]` indicates batches of an\narbitrary number of 32-dimensional vectors.",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "name",
                  "documentation": "An optional name string for the layer. Should be unique in a model (do not\nreuse the same name twice). It will be autogenerated if it isn't provided.",
                  "type": "string",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "dtype",
                  "documentation": "",
                  "type": "DataType",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "sparse",
                  "documentation": "A boolean specifying whether the placeholder to be created is sparse.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.SymbolicTensor](#class:SymbolicTensor)",
              "documentation": "Used to instantiate an input to a model as a [tf.SymbolicTensor](#class:SymbolicTensor).\n\nUsers should call the [tf.input()](#input) factory function for\nconsistency with other generator functions.\n\nExample:\n\n```js\n// Defines a simple logistic regression model with 32 dimensional input\n// and 3 dimensional output.\nconst x = tf.input({shape: [32]});\nconst y = tf.layers.dense({units: 3, activation: 'softmax'}).apply(x);\nconst model = tf.model({inputs: x, outputs: y});\nmodel.predict(tf.ones([2, 32])).print();\n```\n\nNote: [tf.input()](#input) is only necessary when using [tf.model()](#model). When using\n[tf.sequential()](#sequential), specify `inputShape` for the first layer or use `inputLayer`\nas the first layer.",
              "fileName": "#160",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports.ts#L160-L162",
              "isFunction": true,
              "displayName": "tf.input",
              "urlHash": "input"
            }
          ]
        },
        {
          "name": "Loading",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Models",
                "subheading": "Loading"
              },
              "symbolName": "loadFrozenModel",
              "paramStr": "(modelUrl, weightsManifestUrl, requestOption?)",
              "parameters": [
                {
                  "name": "modelUrl",
                  "documentation": "url for the model file generated by scripts/convert.py\nscript.",
                  "type": "string",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "weightsManifestUrl",
                  "documentation": "",
                  "type": "string",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "requestOption",
                  "documentation": "options for Request, which allows to send credentials\nand custom headers.",
                  "type": "RequestInit",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "Promise",
              "documentation": "Load the frozen model through url.\n\nExample of loading the MobileNetV2 model and making a prediction with a zero\ninput.\n\n```js\nconst GOOGLE_CLOUD_STORAGE_DIR =\n     'https://storage.googleapis.com/tfjs-models/savedmodel/';\nconst MODEL_URL = 'mobilenet_v2_1.0_224/tensorflowjs_model.pb';\nconst WEIGHTS_URL =\n     'mobilenet_v2_1.0_224/weights_manifest.json';\nconst model = await tf.loadFrozenModel(GOOGLE_CLOUD_STORAGE_DIR + MODEL_URL,\n      GOOGLE_CLOUD_STORAGE_DIR + WEIGHTS_URL);\nconst zeros = tf.zeros([1, 224, 224, 3]);\nmodel.predict(zeros).print();\n```",
              "fileName": "#288",
              "githubUrl": "https://github.com/tensorflow/tfjs-converter/blob/v0.6.0/src/executor/frozen_model.ts#L288-L294",
              "isFunction": true,
              "displayName": "tf.loadFrozenModel",
              "urlHash": "loadFrozenModel"
            },
            {
              "docInfo": {
                "heading": "Models",
                "subheading": "Loading",
                "useDocsFrom": "loadModelInternal"
              },
              "symbolName": "loadModel",
              "paramStr": "(pathOrIOHandler, strict?)",
              "parameters": [
                {
                  "name": "pathOrIOHandler",
                  "documentation": "Can be either of the two formats\n1. A string path to the `ModelAndWeightsConfig` JSON describing\nthe model in the canonical TensorFlow.js format. This path will be\ninterpreted as a relative HTTP path, to which `fetch` will be used to\nrequest the model topology and weight manifest JSON.\nThe content of the JSON file is assumed to be a JSON object with the\nfollowing fields and values:\n- 'modelTopology': A JSON object that can be either of:\n1. a model architecture JSON consistent with the format of the return\nvalue of `keras.Model.to_json()`\n2. a full model JSON in the format of `keras.models.save_model()`.\n- 'weightsManifest': A TensorFlow.js weights manifest.\nSee the Python converter function `save_model()` for more details.\nIt is also assumed that model weights can be accessed from relative\npaths described by the `paths` fields in weights manifest.\n2. An `tf.io.IOHandler` object that loads model artifacts with its `load`\nmethod.",
                  "type": "string|io.IOHandler",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "strict",
                  "documentation": "Require that the provided weights exactly match those required\nby the layers.  Default true.  Passing false means that both extra weights\nand missing weights will be silently ignored.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "Promise",
              "documentation": "Load a model, including its topology and optionally weights.  See the\nTutorial named \"How to import a Keras Model\" for usage examples.\n\nExample 1: Save [tf.model()](#model)'s topology and weights to browser [local\nstorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\nthen load it back.\n\n```js\nconst model = tf.sequential(\n     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\nconsole.log('Prediction from original model:');\nmodel.predict(tf.ones([1, 3])).print();\n\nconst saveResults = await model.save('localstorage://my-model-1');\n\nconst loadedModel = await tf.loadModel('localstorage://my-model-1');\nconsole.log('Prediction from loaded model:');\nloadedModel.predict(tf.ones([1, 3])).print();\n```\n\nExample 2. Saving [tf.model()](#model)'s topology and weights to browser\n[IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\nthen load it back.\n\n```js\nconst model = tf.sequential(\n     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\nconsole.log('Prediction from original model:');\nmodel.predict(tf.ones([1, 3])).print();\n\nconst saveResults = await model.save('indexeddb://my-model-1');\n\nconst loadedModel = await tf.loadModel('indexeddb://my-model-1');\nconsole.log('Prediction from loaded model:');\nloadedModel.predict(tf.ones([1, 3])).print();\n```\n\nExample 3. Load a model from user-selected files from HTML\n[file input\nelements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file).\n\n```js\n// Note: this code snippet will not work without the HTML elements in the\n//   page\nconst jsonUpload = document.getElementById('json-upload');\nconst weightsUpload = document.getElementById('weights-upload');\n\nconst model = await tf.loadModel(\n     tf.io.browserFiles([jsonUpload.files[0], weightsUpload.files[0]]));\n```\n\nExample 4. Load a model from an HTTP server.\n\n```js\nconst model = await\n     tf.loadModel('https://storage.googleapis.com/tfjs-models/tfjs/iris_v1/model.json');\nmodel.summary();\n```",
              "fileName": "#147",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports.ts#L147-L150",
              "isFunction": true,
              "displayName": "tf.loadModel",
              "urlHash": "loadModel"
            }
          ]
        },
        {
          "name": "Management",
          "symbols": [
            {
              "docInfo": {
                "heading": "Models",
                "subheading": "Management",
                "namespace": "io"
              },
              "symbolName": "copyModel",
              "namespace": "io",
              "paramStr": "(sourceURL, destURL)",
              "parameters": [
                {
                  "name": "sourceURL",
                  "documentation": "Source URL of copying.",
                  "type": "string",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "destURL",
                  "documentation": "Destination URL of copying.",
                  "type": "string",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "Promise",
              "documentation": "Copy a model from one URL to another.\n\nThis function supports:\n\n1. Copying within a storage medium, e.g.,\n    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`\n2. Copying between two storage mediums, e.g.,\n    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`\n\n```js\n// First create and save a model.\nconst model = tf.sequential();\nmodel.add(tf.layers.dense(\n     {units: 1, inputShape: [10], activation: 'sigmoid'}));\nawait model.save('localstorage://demo/management/model1');\n\n// Then list existing models.\nconsole.log(JSON.stringify(await tf.io.listModels()));\n\n// Copy the model, from Local Storage to IndexedDB.\nawait tf.io.copyModel(\n     'localstorage://demo/management/model1',\n     'indexeddb://demo/management/model1');\n\n// List models again.\nconsole.log(JSON.stringify(await tf.io.listModels()));\n\n// Remove both models.\nawait tf.io.removeModel('localstorage://demo/management/model1');\nawait tf.io.removeModel('indexeddb://demo/management/model1');\n```",
              "fileName": "#279",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/io/model_management.ts#L279-L283",
              "isFunction": true,
              "displayName": "tf.io.copyModel",
              "urlHash": "io.copyModel"
            },
            {
              "docInfo": {
                "heading": "Models",
                "subheading": "Management",
                "namespace": "io"
              },
              "symbolName": "listModels",
              "namespace": "io",
              "paramStr": "()",
              "parameters": [],
              "returnType": "Promise",
              "documentation": "List all models stored in registered storage mediums.\n\nFor a web browser environment, the registered mediums are Local Storage and\nIndexedDB.\n\n```js\n// First create and save a model.\nconst model = tf.sequential();\nmodel.add(tf.layers.dense(\n     {units: 1, inputShape: [10], activation: 'sigmoid'}));\nawait model.save('localstorage://demo/management/model1');\n\n// Then list existing models.\nconsole.log(JSON.stringify(await tf.io.listModels()));\n\n// Delete the model.\nawait tf.io.removeModel('localstorage://demo/management/model1');\n\n// List models again.\nconsole.log(JSON.stringify(await tf.io.listModels()));\n```",
              "fileName": "#191",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/io/model_management.ts#L191-L203",
              "isFunction": true,
              "displayName": "tf.io.listModels",
              "urlHash": "io.listModels"
            },
            {
              "docInfo": {
                "heading": "Models",
                "subheading": "Management",
                "namespace": "io"
              },
              "symbolName": "moveModel",
              "namespace": "io",
              "paramStr": "(sourceURL, destURL)",
              "parameters": [
                {
                  "name": "sourceURL",
                  "documentation": "Source URL of moving.",
                  "type": "string",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "destURL",
                  "documentation": "Destination URL of moving.",
                  "type": "string",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "Promise",
              "documentation": "Move a model from one URL to another.\n\nThis function supports:\n\n1. Moving within a storage medium, e.g.,\n    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`\n2. Moving between two storage mediums, e.g.,\n    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`\n\n```js\n// First create and save a model.\nconst model = tf.sequential();\nmodel.add(tf.layers.dense(\n     {units: 1, inputShape: [10], activation: 'sigmoid'}));\nawait model.save('localstorage://demo/management/model1');\n\n// Then list existing models.\nconsole.log(JSON.stringify(await tf.io.listModels()));\n\n// Move the model, from Local Storage to IndexedDB.\nawait tf.io.moveModel(\n     'localstorage://demo/management/model1',\n     'indexeddb://demo/management/model1');\n\n// List models again.\nconsole.log(JSON.stringify(await tf.io.listModels()));\n\n// Remove the moved model.\nawait tf.io.removeModel('indexeddb://demo/management/model1');\n```",
              "fileName": "#325",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/io/model_management.ts#L325-L329",
              "isFunction": true,
              "displayName": "tf.io.moveModel",
              "urlHash": "io.moveModel"
            },
            {
              "docInfo": {
                "heading": "Models",
                "subheading": "Management",
                "namespace": "io"
              },
              "symbolName": "removeModel",
              "namespace": "io",
              "paramStr": "(url)",
              "parameters": [
                {
                  "name": "url",
                  "documentation": "A URL to a stored model, with a scheme prefix, e.g.,\n'localstorage://my-model-1', 'indexeddb://my/model/2'.",
                  "type": "string",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "Promise",
              "documentation": "Remove a model specified by URL from a reigstered storage medium.\n\n```js\n// First create and save a model.\nconst model = tf.sequential();\nmodel.add(tf.layers.dense(\n     {units: 1, inputShape: [10], activation: 'sigmoid'}));\nawait model.save('localstorage://demo/management/model1');\n\n// Then list existing models.\nconsole.log(JSON.stringify(await tf.io.listModels()));\n\n// Delete the model.\nawait tf.io.removeModel('localstorage://demo/management/model1');\n\n// List models again.\nconsole.log(JSON.stringify(await tf.io.listModels()));\n```",
              "fileName": "#232",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/io/model_management.ts#L232-L236",
              "isFunction": true,
              "displayName": "tf.io.removeModel",
              "urlHash": "io.removeModel"
            }
          ]
        },
        {
          "name": "Serialization",
          "symbols": [
            {
              "docInfo": {
                "heading": "Models",
                "subheading": "Serialization"
              },
              "symbolName": "registerClass",
              "paramStr": "(cls)",
              "parameters": [
                {
                  "name": "cls",
                  "documentation": "The class to be registered. It must have a public static member\ncalled `className` defined and the value must be a non-empty string.",
                  "type": "SerializableConstructor",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "void",
              "documentation": "Register a class with the serialization map of TensorFlow.js.\n\nThis is often used for registering custom Layers, so they can be\nserialized and deserialized.\n\nExample:\n\n```js\nclass MyCustomLayer extends tf.layers.Layer {\n   static className = 'MyCustomLayer';\n\n   constructor(config) {\n     super(config);\n   }\n}\ntf.serialization.registerClass(MyCustomLayer);\n```",
              "fileName": "#161",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/serialization.ts#L161-L177",
              "isFunction": true,
              "displayName": "tf.registerClass",
              "urlHash": "registerClass"
            }
          ]
        },
        {
          "name": "Classes",
          "symbols": [
            {
              "docInfo": {
                "heading": "Models",
                "subheading": "Classes"
              },
              "symbolName": "FrozenModel",
              "documentation": "A [tf.FrozenModel](#class:FrozenModel) is a directed, acyclic graph of built from\nSavedModel GraphDef and allows inference exeuction.",
              "fileName": "#32",
              "githubUrl": "https://github.com/tensorflow/tfjs-converter/blob/v0.6.0/src/executor/frozen_model.ts#L32-L260",
              "methods": [],
              "isClass": true,
              "inheritsFrom": "tfc.InferenceModel",
              "displayName": "tf.FrozenModel",
              "urlHash": "class:FrozenModel"
            },
            {
              "docInfo": {
                "heading": "Models",
                "subheading": "Classes"
              },
              "symbolName": "Model",
              "documentation": "A [tf.Model](#class:Model) is a directed, acyclic graph of `Layer`s plus methods for\ntraining, evaluation, prediction and saving.\n\n[tf.Model](#class:Model) is the basic unit of training, inference and evaluation in\nTensorFlow.js. To create a [tf.Model](#class:Model), use [tf.model()](#model).\n\nSee also:\n   [tf.Sequential](#class:Sequential), [tf.loadModel()](#loadModel).",
              "fileName": "#657",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/engine/training.ts#L657-L2034",
              "methods": [
                {
                  "docInfo": {
                    "heading": "Models",
                    "subheading": "Classes"
                  },
                  "symbolName": "summary",
                  "paramStr": "(lineLength?, positions?, printFn?)",
                  "parameters": [
                    {
                      "name": "lineLength",
                      "documentation": "Custom line length, in number of characters.",
                      "type": "number",
                      "optional": true,
                      "isConfigParam": false
                    },
                    {
                      "name": "positions",
                      "documentation": "Custom widths of each of the columns, as either\nfractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number\nof characters (e.g., `[30, 50, 65]`). Each number corresponds to\nright-most (i.e., ending) position of a column.",
                      "type": "number[]",
                      "optional": true,
                      "isConfigParam": false
                    },
                    {
                      "name": "printFn",
                      "documentation": "Custom print function. Can be used to replace the default\n`console.log`. For example, you can use `x => {}` to mute the printed\nmessages in the console.",
                      "type": "(message?: [tf.any()](#any), ...optionalParams: [tf.any()](#any)[]) => void",
                      "optional": true,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "void",
                  "documentation": "Print a text summary of the model's layers.\n\nThe summary includes\n- Name and type of all layers that comprise the model.\n- Output shape(s) of the layers\n- Number of weight parameters of each layer\n- If the model has non-sequential-like topology, the inputs each layer\n   receives\n- The total number of trainable and non-trainable parameters of the model.\n\n```js\nconst input1 = tf.input({shape: [10]});\nconst input2 = tf.input({shape: [20]});\nconst dense1 = tf.layers.dense({units: 4}).apply(input1);\nconst dense2 = tf.layers.dense({units: 8}).apply(input2);\nconst concat = tf.layers.concatenate().apply([dense1, dense2]);\nconst output =\n     tf.layers.dense({units: 3, activation: 'softmax'}).apply(concat);\n\nconst model = tf.model({inputs: [input1, input2], outputs: output});\nmodel.summary();\n```",
                  "fileName": "#729",
                  "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/engine/training.ts#L729-L741",
                  "isFunction": true,
                  "urlHash": "tf.Model.summary"
                },
                {
                  "docInfo": {
                    "heading": "Models",
                    "subheading": "Classes",
                    "configParamIndices": [
                      0
                    ]
                  },
                  "symbolName": "compile",
                  "paramStr": "(config)",
                  "parameters": [
                    {
                      "name": "config",
                      "documentation": "a `ModelCompileConfig` specifying the loss, optimizer, and\nmetrics to be used for fitting and evaluating this model.",
                      "type": "Object",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "optimizer",
                      "documentation": "An instance of `tf.train.Optimizer` or a string name for an Optimizer.",
                      "type": "string|[tf.train.Optimizer](#class:train.Optimizer)",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "loss",
                      "documentation": "Object function(s) or name(s) of object function(s).\nIf the model has multiple outputs, you can use a different loss\non each output by passing a dictionary or an Array of losses.\nThe loss value that will be minimized by the model will then be the sum\nof all individual losses.",
                      "type": "string|string[]|{[outputName: string]: string}|LossOrMetricFn|\n      LossOrMetricFn[]|{[outputName: string]: LossOrMetricFn}",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "metrics",
                      "documentation": "List of metrics to be evaluated by the model during training and testing.\nTypically you will use `metrics=['accuracy']`.\nTo specify different metrics for different outputs of a multi-output\nmodel, you could also pass a dictionary.",
                      "type": "string[]|{[outputName: string]: string}",
                      "optional": true,
                      "isConfigParam": true
                    }
                  ],
                  "returnType": "void",
                  "documentation": "Configures and prepares the model for training and evaluation.  Compiling\noutfits the model with an optimizer, loss, and/or metrics.  Calling `fit`\nor `evaluate` on an un-compiled model will throw an error.",
                  "fileName": "#754",
                  "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/engine/training.ts#L754-L953",
                  "isFunction": true,
                  "urlHash": "tf.Model.compile"
                },
                {
                  "docInfo": {
                    "heading": "Models",
                    "subheading": "Classes",
                    "configParamIndices": [
                      2
                    ]
                  },
                  "symbolName": "evaluate",
                  "paramStr": "(x, y, config?)",
                  "parameters": [
                    {
                      "name": "x",
                      "documentation": "[tf.Tensor](#class:Tensor) of test data, or an `Array` of [tf.Tensor](#class:Tensor)s if the model has\nmultiple inputs.",
                      "type": "[tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[]",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "y",
                      "documentation": "[tf.Tensor](#class:Tensor) of target data, or an `Array` of [tf.Tensor](#class:Tensor)s if the model\nhas multiple outputs.",
                      "type": "[tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[]",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "config",
                      "documentation": "A `ModelEvaluateConfig`, containing optional fields.",
                      "type": "Object",
                      "optional": true,
                      "isConfigParam": false
                    },
                    {
                      "name": "batchSize",
                      "documentation": "Batch size (Integer). If unspecified, it will default to 32.",
                      "type": "number",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "verbose",
                      "documentation": "Verbosity mode.",
                      "type": "ModelLoggingVerbosity",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "sampleWeight",
                      "documentation": "Tensor of weights to weight the contribution of different samples to the\nloss and metrics.",
                      "type": "[tf.Tensor](#class:Tensor)",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "steps",
                      "documentation": "integer: total number of steps (batches of samples)\nbefore declaring the evaluation round finished. Ignored with the default\nvalue of `undefined`.",
                      "type": "number",
                      "optional": true,
                      "isConfigParam": true
                    }
                  ],
                  "returnType": "[tf.Scalar](#class:Tensor)|[tf.Scalar](#class:Tensor)[]",
                  "documentation": "Returns the loss value & metrics values for the model in test mode.\n\nLoss and metrics are specified during `compile()`, which needs to happen\nbefore calls to `evaluate()`.\n\nComputation is done in batches.\n\n```js\nconst model = tf.sequential({\n   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n});\nmodel.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\nconst result = model.evaluate(\n     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});\nresult.print();\n```",
                  "fileName": "#1009",
                  "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/engine/training.ts#L1009-L1026",
                  "isFunction": true,
                  "urlHash": "tf.Model.evaluate"
                },
                {
                  "docInfo": {
                    "heading": "Models",
                    "subheading": "Classes",
                    "configParamIndices": [
                      1
                    ]
                  },
                  "symbolName": "predict",
                  "paramStr": "(x, config?)",
                  "parameters": [
                    {
                      "name": "x",
                      "documentation": "The input data, as an Tensor, or an `Array` of [tf.Tensor](#class:Tensor)s if\nthe model has multiple inputs.",
                      "type": "[tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[]",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "config",
                      "documentation": "A `ModelPredictConfig` object containing optional fields.",
                      "type": "Object",
                      "optional": true,
                      "isConfigParam": false
                    },
                    {
                      "name": "batchSize",
                      "documentation": "Optional. Batch size (Integer). If unspecified, it will default to 32.",
                      "type": "number",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "verbose",
                      "documentation": "Optional. Verbosity mode. Defaults to false.",
                      "type": "boolean",
                      "optional": true,
                      "isConfigParam": true
                    }
                  ],
                  "returnType": "[tf.Tensor](#class:Tensor)\n      |[tf.Tensor](#class:Tensor)[]",
                  "documentation": "Generates output predictions for the input samples.\n\nComputation is done in batches.\n\nNote: the \"step\" mode of predict() is currently not supported.\n   This is because the TensorFlow.js core backend is imperative only.\n\n```js\nconst model = tf.sequential({\n   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n});\nmodel.predict(tf.ones([8, 10]), {batchSize: 4}).print();\n```",
                  "fileName": "#1248",
                  "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/engine/training.ts#L1248-L1258",
                  "isFunction": true,
                  "urlHash": "tf.Model.predict"
                },
                {
                  "docInfo": {
                    "heading": "Models",
                    "subheading": "Classes"
                  },
                  "symbolName": "predictOnBatch",
                  "paramStr": "(x)",
                  "parameters": [
                    {
                      "name": "x",
                      "documentation": ": Input samples, as an Tensor",
                      "type": "[tf.Tensor](#class:Tensor)",
                      "optional": false,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "[tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[]",
                  "documentation": "Returns predictions for a single batch of samples.\n\n```js\nconst model = tf.sequential({\n   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n});\nmodel.predictOnBatch(tf.ones([8, 10])).print();\n```",
                  "fileName": "#1273",
                  "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/engine/training.ts#L1273-L1278",
                  "isFunction": true,
                  "urlHash": "tf.Model.predictOnBatch"
                },
                {
                  "docInfo": {
                    "heading": "Models",
                    "subheading": "Classes",
                    "configParamIndices": [
                      2
                    ]
                  },
                  "symbolName": "fit",
                  "paramStr": "(x, y, config?)",
                  "parameters": [
                    {
                      "name": "x",
                      "documentation": "[tf.Tensor](#class:Tensor) of training data, or an array of [tf.Tensor](#class:Tensor)s if the model\nhas multiple inputs. If all inputs in the model are named, you can also\npass a dictionary mapping input names to [tf.Tensor](#class:Tensor)s.",
                      "type": "[tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[]|{[inputName: string]: [tf.Tensor](#class:Tensor)}",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "y",
                      "documentation": "[tf.Tensor](#class:Tensor) of target (label) data, or an array of [tf.Tensor](#class:Tensor)s if the\nmodel has multiple outputs. If all outputs in the model are named, you\ncan also pass a dictionary mapping output names to [tf.Tensor](#class:Tensor)s.",
                      "type": "[tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[]|{[inputName: string]: [tf.Tensor](#class:Tensor)}",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "config",
                      "documentation": "A `ModelFitConfig`, containing optional fields.",
                      "type": "Object",
                      "optional": true,
                      "isConfigParam": false
                    },
                    {
                      "name": "batchSize",
                      "documentation": "Number of samples per gradient update. If unspecified, it\nwill default to 32.",
                      "type": "number",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "epochs",
                      "documentation": "The number of times to iterate over the training data arrays. ",
                      "type": "number",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "verbose",
                      "documentation": "Verbosity level.\n\nExpected to be 0, 1, or 2. Default: 1.\n\n0 - No printed message during fit() call.\n1 - In Node.js (tfjs-node), prints the progress bar, together with\n     real-time updates of loss and metric values and training speed.\n     In the browser: no action. This is the default.\n2 - Not implemented yet.",
                      "type": "ModelLoggingVerbosity",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "callbacks",
                      "documentation": "List of callbacks to be called during training.\nCan consist of one or more of the following fields: `onTrainBegin`,\n`onTrainEnd`, `onEpochBegin`, `onEpochEnd`, `onBatchBegin`, `onBatchEnd`.",
                      "type": "BaseCallback[]|CustomCallbackConfig|CustomCallbackConfig[]",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "validationSplit",
                      "documentation": "Float between 0 and 1: fraction of the training data\nto be used as validation data. The model will set apart this fraction of\nthe training data, will not train on it, and will evaluate the loss and\nany model metrics on this data at the end of each epoch.\nThe validation data is selected from the last samples in the `x` and `y`\ndata provided, before shuffling.",
                      "type": "number",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "validationData",
                      "documentation": "Data on which to evaluate the loss and any model\nmetrics at the end of each epoch. The model will not be trained on this\ndata. This could be a tuple [xVal, yVal] or a tuple [xVal, yVal,\nvalSampleWeights]. The model will not be trained on this data.\n`validationData` will override `validationSplit`.",
                      "type": "[\n    [tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[], [tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[]\n  ]|[[tf.Tensor](#class:Tensor) | [tf.Tensor](#class:Tensor)[], [tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[], [tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[]]",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "shuffle",
                      "documentation": "Whether to shuffle the training data before each epoch. Has\nno effect when `stepsPerEpoch` is not `null`.",
                      "type": "boolean",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "classWeight",
                      "documentation": "Optional dictionary mapping class indices (integers) to\na weight (float) to apply to the model's loss for the samples from this\nclass during training. This can be useful to tell the model to \"pay more\nattention\" to samples from an under-represented class.",
                      "type": "{[classIndex: string]: number}",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "sampleWeight",
                      "documentation": "Optional array of the same length as x, containing\nweights to apply to the model's loss for each sample. In the case of\ntemporal data, you can pass a 2D array with shape (samples,\nsequenceLength), to apply a different weight to every timestep of every\nsample. In this case you should make sure to specify\nsampleWeightMode=\"temporal\" in compile().",
                      "type": "[tf.Tensor](#class:Tensor)",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "initialEpoch",
                      "documentation": "Epoch at which to start training (useful for resuming a previous training\nrun).",
                      "type": "number",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "stepsPerEpoch",
                      "documentation": "Total number of steps (batches of samples) before\ndeclaring one epoch finished and starting the next epoch. When training\nwith Input Tensors such as TensorFlow data tensors, the default `null` is\nequal to the number of unique samples in your dataset divided by the\nbatch size, or 1 if that cannot be determined.",
                      "type": "number",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "validationSteps",
                      "documentation": "Only relevant if `stepsPerEpoch` is specified. Total number of steps\n(batches of samples) to validate before stopping.",
                      "type": "number",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "yieldEvery",
                      "documentation": "Configures the frequency of yielding the main thread to other tasks.\n\nIn the browser environment, yielding the main thread can improve the\nresponsiveness of the page during training. In the Node.js environment,\nit can ensure tasks queued in the event loop can be handled in a timely\nmanner.\n\n- The value can be one of the following strings:\n   - 'auto': automatically determine how frequently the yielding happens\n     by measuring the duration of each batch of training (default).\n   - 'batch': yield every batch.\n   - 'epoch': yield every epoch.\n   - 'never': never yield. (But yielding can still happen through `await\n      nextFrame()` calls in custom callbacks.)",
                      "type": "YieldEveryOptions",
                      "optional": true,
                      "isConfigParam": true
                    }
                  ],
                  "returnType": "Promise",
                  "documentation": "Trains the model for a fixed number of epochs (iterations on a dataset).\n\n```js\nconst model = tf.sequential({\n     layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n});\nmodel.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\nfor (let i = 1; i < 5 ; ++i) {\n   const h = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\n       batchSize: 4,\n       epochs: 3\n   });\n   console.log(\"Loss after Epoch \" + i + \" : \" + h.history.loss[0]);\n}\n```",
                  "fileName": "#1657",
                  "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/engine/training.ts#L1657-L1863",
                  "isFunction": true,
                  "urlHash": "tf.Model.fit"
                },
                {
                  "docInfo": {
                    "heading": "Models",
                    "subheading": "Classes",
                    "configParamIndices": [
                      1
                    ]
                  },
                  "symbolName": "save",
                  "paramStr": "(handlerOrURL, config?)",
                  "parameters": [
                    {
                      "name": "handlerOrURL",
                      "documentation": "An instance of `IOHandler` or a URL-like,\nscheme-based string shortcut for `IOHandler`.",
                      "type": "io.IOHandler|string",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "config",
                      "documentation": "Options for saving the model.",
                      "type": "Object",
                      "optional": true,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "Promise",
                  "documentation": "Save the configuration and/or weights of the Model.\n\nAn `IOHandler` is an object that has a `save` method of the proper\nsignature defined. The `save` method manages the storing or transmission\nof serialized data (\"artifacts\") that represent the model's topology and\nweights onto or via a specific medium, such as file downloads, local\nstorage, IndexedDB in the web browser and HTTP requests to a server.\nTensorFlow.js provides `IOHandler` implementations for a number of\nfrequently used saving mediums, such as `tf.io.browserDownloads` and\n`tf.io.browserLocalStorage`. See `tf.io` for more details.\n\nThis method also allows you to refer to certain types of `IOHandler`s as\nURL-like string shortcuts, such as 'localstorage://' and 'indexeddb://'.\n\nExample 1: Save [tf.model()](#model)'s topology and weights to browser [local\nstorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\nthen load it back.\n\n```js\nconst model = tf.sequential(\n     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\nconsole.log('Prediction from original model:');\nmodel.predict(tf.ones([1, 3])).print();\n\nconst saveResults = await model.save('localstorage://my-model-1');\n\nconst loadedModel = await tf.loadModel('localstorage://my-model-1');\nconsole.log('Prediction from loaded model:');\nloadedModel.predict(tf.ones([1, 3])).print();\n```\n\nExample 2. Saving [tf.model()](#model)'s topology and weights to browser\n[IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\nthen load it back.\n\n```js\nconst model = tf.sequential(\n     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\nconsole.log('Prediction from original model:');\nmodel.predict(tf.ones([1, 3])).print();\n\nconst saveResults = await model.save('indexeddb://my-model-1');\n\nconst loadedModel = await tf.loadModel('indexeddb://my-model-1');\nconsole.log('Prediction from loaded model:');\nloadedModel.predict(tf.ones([1, 3])).print();\n```\n\nExample 3. Saving [tf.model()](#model)'s topology and weights as two files\n(`my-model-1.json` and `my-model-1.weights.bin`) downloaded from browser.\n\n```js\nconst model = tf.sequential(\n     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\nconst saveResults = await model.save('downloads://my-model-1');\n```\n\nExample 4. Send  [tf.model()](#model)'s topology and weights to an HTTP server.\nSee the documentation of `tf.io.browserHTTPRequests` for more details\nincluding specifying request parameters and implementation of the server.\n\n```js\nconst model = tf.sequential(\n     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\nconst saveResults = await model.save('http://my-server/model/upload');\n```",
                  "fileName": "#2001",
                  "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/engine/training.ts#L2001-L2033",
                  "isFunction": true,
                  "urlHash": "tf.Model.save"
                },
                {
                  "docInfo": {
                    "heading": "Layers",
                    "subheading": "Classes",
                    "namespace": "layers",
                    "subclasses": [
                      "Model"
                    ]
                  },
                  "symbolName": "getLayer",
                  "namespace": "layers",
                  "paramStr": "(name?, index?)",
                  "parameters": [
                    {
                      "name": "name",
                      "documentation": "Name of layer.",
                      "type": "string",
                      "optional": true,
                      "isConfigParam": false
                    },
                    {
                      "name": "index",
                      "documentation": "Index of layer.",
                      "type": "number",
                      "optional": true,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "[tf.layers.Layer](#class:layers.Layer)",
                  "documentation": "Retrieves a layer based on either its name (unique) or index.\n\nIndices are based on order of horizontal graph traversal (bottom-up).\n\nIf both `name` and `index` are specified, `index` takes precedence.",
                  "fileName": "#1102",
                  "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/engine/container.ts#L1102-L1123",
                  "isFunction": true,
                  "urlHash": "tf.Model.getLayer"
                }
              ],
              "isClass": true,
              "inheritsFrom": "Container|tfc.InferenceModel",
              "displayName": "tf.Model",
              "urlHash": "class:Model"
            },
            {
              "docInfo": {
                "heading": "Models",
                "subheading": "Classes"
              },
              "symbolName": "Sequential",
              "documentation": "A model with a stack of layers, feeding linearly from one to the next.\n\n[tf.sequential()](#sequential) is a factory function that creates an instance of\n[tf.Sequential](#class:Sequential).\n\n```js\n  // Define a model for linear regression.\n  const model = tf.sequential();\n  model.add(tf.layers.dense({units: 1, inputShape: [1]}));\n\n  // Prepare the model for training: Specify the loss and the optimizer.\n  model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n\n  // Generate some synthetic data for training.\n  const xs = tf.tensor2d([1, 2, 3, 4], [4, 1]);\n  const ys = tf.tensor2d([1, 3, 5, 7], [4, 1]);\n\n  // Train the model using the data then do inference on a data point the\n  // model hasn't seen:\n  await model.fit(xs, ys);\n  model.predict(tf.tensor2d([5], [1, 1])).print();\n```",
              "fileName": "#296",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/models.ts#L296-L824",
              "methods": [
                {
                  "docInfo": {
                    "heading": "Models",
                    "subheading": "Classes"
                  },
                  "symbolName": "add",
                  "paramStr": "(layer)",
                  "parameters": [
                    {
                      "name": "layer",
                      "documentation": "Layer instance.",
                      "type": "[tf.layers.Layer](#class:layers.Layer)",
                      "optional": false,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "void",
                  "documentation": "Adds a layer instance on top of the layer stack.\n\n```js\n  const model = tf.sequential();\n  model.add(tf.layers.dense({units: 8, inputShape: [1]}));\n  model.add(tf.layers.dense({units: 4, activation: 'relu6'}));\n  model.add(tf.layers.dense({units: 1, activation: 'relu6'}));\n  // Note that the untrained model is random at this point.\n  model.predict(tf.randomNormal([10, 1])).print();\n```",
                  "fileName": "#351",
                  "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/models.ts#L351-L453",
                  "isFunction": true,
                  "urlHash": "tf.Sequential.add"
                },
                {
                  "docInfo": {
                    "heading": "Models",
                    "subheading": "Classes"
                  },
                  "symbolName": "summary",
                  "paramStr": "(lineLength?, positions?, printFn?)",
                  "parameters": [
                    {
                      "name": "lineLength",
                      "documentation": "Custom line length, in number of characters.",
                      "type": "number",
                      "optional": true,
                      "isConfigParam": false
                    },
                    {
                      "name": "positions",
                      "documentation": "Custom widths of each of the columns, as either\nfractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number\nof characters (e.g., `[30, 50, 65]`). Each number corresponds to\nright-most (i.e., ending) position of a column.",
                      "type": "number[]",
                      "optional": true,
                      "isConfigParam": false
                    },
                    {
                      "name": "printFn",
                      "documentation": "Custom print function. Can be used to replace the default\n`console.log`. For example, you can use `x => {}` to mute the printed\nmessages in the console.",
                      "type": "(message?: [tf.any()](#any), ...optionalParams: [tf.any()](#any)[]) => void",
                      "optional": true,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "void",
                  "documentation": "Print a text summary of the Sequential model's layers.\n\nThe summary includes\n- Name and type of all layers that comprise the model.\n- Output shape(s) of the layers\n- Number of weight parameters of each layer\n- The total number of trainable and non-trainable parameters of the\nmodel.\n\n```js\nconst model = tf.sequential();\nmodel.add(\n     tf.layers.dense({units: 100, inputShape: [10], activation: 'relu'}));\nmodel.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));\n\nmodel.summary();\n```",
                  "fileName": "#560",
                  "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/models.ts#L560-L569",
                  "isFunction": true,
                  "urlHash": "tf.Sequential.summary"
                },
                {
                  "docInfo": {
                    "heading": "Models",
                    "subheading": "Classes",
                    "configParamIndices": [
                      2
                    ]
                  },
                  "symbolName": "evaluate",
                  "paramStr": "(x, y, config?)",
                  "parameters": [
                    {
                      "name": "x",
                      "documentation": "[tf.Tensor](#class:Tensor) of test data, or an `Array` of [tf.Tensor](#class:Tensor)s if the model\nhas multiple inputs.",
                      "type": "[tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[]",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "y",
                      "documentation": "[tf.Tensor](#class:Tensor) of target data, or an `Array` of [tf.Tensor](#class:Tensor)s if the model\nhas multiple outputs.",
                      "type": "[tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[]",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "config",
                      "documentation": "A `ModelEvaluateConfig`, containing optional fields.",
                      "type": "Object",
                      "optional": true,
                      "isConfigParam": false
                    },
                    {
                      "name": "batchSize",
                      "documentation": "Batch size (Integer). If unspecified, it will default to 32.",
                      "type": "number",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "verbose",
                      "documentation": "Verbosity mode.",
                      "type": "ModelLoggingVerbosity",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "sampleWeight",
                      "documentation": "Tensor of weights to weight the contribution of different samples to the\nloss and metrics.",
                      "type": "[tf.Tensor](#class:Tensor)",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "steps",
                      "documentation": "integer: total number of steps (batches of samples)\nbefore declaring the evaluation round finished. Ignored with the default\nvalue of `undefined`.",
                      "type": "number",
                      "optional": true,
                      "isConfigParam": true
                    }
                  ],
                  "returnType": "[tf.Scalar](#class:Tensor)|[tf.Scalar](#class:Tensor)[]",
                  "documentation": "Returns the loss value & metrics values for the model in test mode.\n\nLoss and metrics are specified during `compile()`, which needs to happen\nbefore calls to `evaluate()`.\n\nComputation is done in batches.\n\n```js\nconst model = tf.sequential({\n   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n});\nmodel.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\nconst result = model.evaluate(tf.ones([8, 10]), tf.ones([8, 1]), {\n   batchSize: 4,\n});\nresult.print();\n```",
                  "fileName": "#628",
                  "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/models.ts#L628-L636",
                  "isFunction": true,
                  "urlHash": "tf.Sequential.evaluate"
                },
                {
                  "docInfo": {
                    "heading": "Models",
                    "subheading": "Classes",
                    "configParamIndices": [
                      1
                    ]
                  },
                  "symbolName": "predict",
                  "paramStr": "(x, config?)",
                  "parameters": [
                    {
                      "name": "x",
                      "documentation": "The input data, as an Tensor, or an `Array` of [tf.Tensor](#class:Tensor)s if\nthe model has multiple inputs.",
                      "type": "[tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[]",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "config",
                      "documentation": "",
                      "type": "Object",
                      "optional": true,
                      "isConfigParam": false
                    },
                    {
                      "name": "batchSize",
                      "documentation": "Optional. Batch size (Integer). If unspecified, it will default to 32.",
                      "type": "number",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "verbose",
                      "documentation": "Optional. Verbosity mode. Defaults to false.",
                      "type": "boolean",
                      "optional": true,
                      "isConfigParam": true
                    }
                  ],
                  "returnType": "[tf.Tensor](#class:Tensor)\n      |[tf.Tensor](#class:Tensor)[]",
                  "documentation": "Generates output predictions for the input samples.\n\nComputation is done in batches.\n\nNote: the \"step\" mode of predict() is currently not supported.\n   This is because the TensorFow.js core backend is imperative only.\n\n```js\nconst model = tf.sequential({\n   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n});\nmodel.predict(tf.ones([2, 10])).print();\n```",
                  "fileName": "#666",
                  "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/models.ts#L666-L672",
                  "isFunction": true,
                  "urlHash": "tf.Sequential.predict"
                },
                {
                  "docInfo": {
                    "heading": "Models",
                    "subheading": "Classes",
                    "configParamIndices": [
                      2
                    ]
                  },
                  "symbolName": "fit",
                  "paramStr": "(x, y, config?)",
                  "parameters": [
                    {
                      "name": "x",
                      "documentation": "[tf.Tensor](#class:Tensor) of training data, or an array of [tf.Tensor](#class:Tensor)s if the model\nhas multiple inputs. If all inputs in the model are named, you can also\npass a dictionary mapping input names to [tf.Tensor](#class:Tensor)s.",
                      "type": "[tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[]|{[inputName: string]: [tf.Tensor](#class:Tensor)}",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "y",
                      "documentation": "[tf.Tensor](#class:Tensor) of target (label) data, or an array of [tf.Tensor](#class:Tensor)s if the\nmodel has multiple outputs. If all outputs in the model are named, you\ncan also pass a dictionary mapping output names to [tf.Tensor](#class:Tensor)s.",
                      "type": "[tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[]|{[inputName: string]: [tf.Tensor](#class:Tensor)}",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "config",
                      "documentation": "A `ModelFitConfig`, containing optional fields.",
                      "type": "Object",
                      "optional": true,
                      "isConfigParam": false
                    },
                    {
                      "name": "batchSize",
                      "documentation": "Number of samples per gradient update. If unspecified, it\nwill default to 32.",
                      "type": "number",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "epochs",
                      "documentation": "The number of times to iterate over the training data arrays. ",
                      "type": "number",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "verbose",
                      "documentation": "Verbosity level.\n\nExpected to be 0, 1, or 2. Default: 1.\n\n0 - No printed message during fit() call.\n1 - In Node.js (tfjs-node), prints the progress bar, together with\n     real-time updates of loss and metric values and training speed.\n     In the browser: no action. This is the default.\n2 - Not implemented yet.",
                      "type": "ModelLoggingVerbosity",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "callbacks",
                      "documentation": "List of callbacks to be called during training.\nCan consist of one or more of the following fields: `onTrainBegin`,\n`onTrainEnd`, `onEpochBegin`, `onEpochEnd`, `onBatchBegin`, `onBatchEnd`.",
                      "type": "BaseCallback[]|CustomCallbackConfig|CustomCallbackConfig[]",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "validationSplit",
                      "documentation": "Float between 0 and 1: fraction of the training data\nto be used as validation data. The model will set apart this fraction of\nthe training data, will not train on it, and will evaluate the loss and\nany model metrics on this data at the end of each epoch.\nThe validation data is selected from the last samples in the `x` and `y`\ndata provided, before shuffling.",
                      "type": "number",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "validationData",
                      "documentation": "Data on which to evaluate the loss and any model\nmetrics at the end of each epoch. The model will not be trained on this\ndata. This could be a tuple [xVal, yVal] or a tuple [xVal, yVal,\nvalSampleWeights]. The model will not be trained on this data.\n`validationData` will override `validationSplit`.",
                      "type": "[\n    [tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[], [tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[]\n  ]|[[tf.Tensor](#class:Tensor) | [tf.Tensor](#class:Tensor)[], [tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[], [tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[]]",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "shuffle",
                      "documentation": "Whether to shuffle the training data before each epoch. Has\nno effect when `stepsPerEpoch` is not `null`.",
                      "type": "boolean",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "classWeight",
                      "documentation": "Optional dictionary mapping class indices (integers) to\na weight (float) to apply to the model's loss for the samples from this\nclass during training. This can be useful to tell the model to \"pay more\nattention\" to samples from an under-represented class.",
                      "type": "{[classIndex: string]: number}",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "sampleWeight",
                      "documentation": "Optional array of the same length as x, containing\nweights to apply to the model's loss for each sample. In the case of\ntemporal data, you can pass a 2D array with shape (samples,\nsequenceLength), to apply a different weight to every timestep of every\nsample. In this case you should make sure to specify\nsampleWeightMode=\"temporal\" in compile().",
                      "type": "[tf.Tensor](#class:Tensor)",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "initialEpoch",
                      "documentation": "Epoch at which to start training (useful for resuming a previous training\nrun).",
                      "type": "number",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "stepsPerEpoch",
                      "documentation": "Total number of steps (batches of samples) before\ndeclaring one epoch finished and starting the next epoch. When training\nwith Input Tensors such as TensorFlow data tensors, the default `null` is\nequal to the number of unique samples in your dataset divided by the\nbatch size, or 1 if that cannot be determined.",
                      "type": "number",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "validationSteps",
                      "documentation": "Only relevant if `stepsPerEpoch` is specified. Total number of steps\n(batches of samples) to validate before stopping.",
                      "type": "number",
                      "optional": true,
                      "isConfigParam": true
                    },
                    {
                      "name": "yieldEvery",
                      "documentation": "Configures the frequency of yielding the main thread to other tasks.\n\nIn the browser environment, yielding the main thread can improve the\nresponsiveness of the page during training. In the Node.js environment,\nit can ensure tasks queued in the event loop can be handled in a timely\nmanner.\n\n- The value can be one of the following strings:\n   - 'auto': automatically determine how frequently the yielding happens\n     by measuring the duration of each batch of training (default).\n   - 'batch': yield every batch.\n   - 'epoch': yield every epoch.\n   - 'never': never yield. (But yielding can still happen through `await\n      nextFrame()` calls in custom callbacks.)",
                      "type": "YieldEveryOptions",
                      "optional": true,
                      "isConfigParam": true
                    }
                  ],
                  "returnType": "Promise",
                  "documentation": "Trains the model for a fixed number of epochs (iterations on a dataset).\n\n```js\nconst model = tf.sequential({\n   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n});\nmodel.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\nconst history = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\n   batchSize: 4,\n   epochs: 3\n});\nconsole.log(history.history.loss[0]);\n```",
                  "fileName": "#738",
                  "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/models.ts#L738-L748",
                  "isFunction": true,
                  "urlHash": "tf.Sequential.fit"
                }
              ],
              "isClass": true,
              "inheritsFrom": "[tf.Model](#class:Model)",
              "displayName": "tf.Sequential",
              "urlHash": "class:Sequential"
            },
            {
              "docInfo": {
                "heading": "Models",
                "subheading": "Classes"
              },
              "symbolName": "SymbolicTensor",
              "documentation": "[tf.SymbolicTensor](#class:SymbolicTensor) is a placeholder for a Tensor without any concrete value.\n\nThey are most often encountered when building a graph of `Layer`s for a\na [tf.Model](#class:Model) and the input data's shape, but not values are known.",
              "fileName": "#96",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/engine/topology.ts#L96-L143",
              "methods": [],
              "isClass": true,
              "displayName": "tf.SymbolicTensor",
              "urlHash": "class:SymbolicTensor"
            }
          ]
        }
      ]
    },
    {
      "name": "Layers",
      "description": "<p>Layers are the primary building block for \nconstructing a Model.  Each layer will typically perform some\ncomputation to transform its input to its output.</p>\n<p>Layers will automatically take care of creating and initializing\nthe various internal variables/weights they need to function.</p>",
      "subheadings": [
        {
          "name": "Advanced Activation",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Advanced Activation",
                "namespace": "layers",
                "useDocsFrom": "ELU",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "elu",
              "namespace": "layers",
              "paramStr": "(config?)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "alpha",
                  "documentation": "Float `>= 0`. Negative slope coefficient. Defaults to `1.0`.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Exponetial Linear Unit (ELU).\n\nIt follows:\n`f(x) =  alpha * (exp(x) - 1.) for x < 0`,\n`f(x) = x for x >= 0`.\n\nInput shape:\n   Arbitrary. Use the configuration `inputShape` when using this layer as the\n   first layer in a model.\n\nOutput shape:\n   Same shape as the input.\n\nReferences:\n   - [Fast and Accurate Deep Network Learning by Exponential Linear Units\n(ELUs)](https://arxiv.org/abs/1511.07289v1)",
              "fileName": "#57",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L57-L59",
              "isFunction": true,
              "displayName": "tf.layers.elu",
              "urlHash": "layers.elu"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Advanced Activation",
                "namespace": "layers",
                "useDocsFrom": "LeakyReLU",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "leakyReLU",
              "namespace": "layers",
              "paramStr": "(config?)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "alpha",
                  "documentation": "Float `>= 0`. Negative slope coefficient. Defaults to `0.3`.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Leaky version of a rectified linear unit.\n\nIt allows a small gradient when the unit is not active:\n`f(x) = alpha * x for x < 0.`\n`f(x) = x for x >= 0.`\n\nInput shape:\n   Arbitrary. Use the configuration `inputShape` when using this layer as the\n   first layer in a model.\n\nOutput shape:\n   Same shape as the input.",
              "fileName": "#83",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L83-L85",
              "isFunction": true,
              "displayName": "tf.layers.leakyReLU",
              "urlHash": "layers.leakyReLU"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Advanced Activation",
                "namespace": "layers",
                "useDocsFrom": "ReLU",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "reLU",
              "namespace": "layers",
              "paramStr": "(config?)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "maxValue",
                  "documentation": "Float, the maximum output value.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Rectified Linear Unit activation function.\n\nInput shape:\n   Arbitrary. Use the config field `inputShape` (Array of integers, does\n   not include the sample axis) when using this layer as the first layer\n   in a model.\n\nOutput shape:\n   Same shape as the input.",
              "fileName": "#70",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L70-L72",
              "isFunction": true,
              "displayName": "tf.layers.reLU",
              "urlHash": "layers.reLU"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Advanced Activation",
                "namespace": "layers",
                "useDocsFrom": "Softmax",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "softmax",
              "namespace": "layers",
              "paramStr": "(config?)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "Integer, axis along which the softmax normalization is applied.\nDefaults to `-1` (i.e., the last axis).",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Softmax activation layer.\n\nInput shape:\n   Arbitrary. Use the configuration `inputShape` when using this layer as the\n   first layer in a model.\n\nOutput shape:\n   Same shape as the input.",
              "fileName": "#96",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L96-L98",
              "isFunction": true,
              "displayName": "tf.layers.softmax",
              "urlHash": "layers.softmax"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Advanced Activation",
                "namespace": "layers",
                "useDocsFrom": "ThresholdedReLU",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "thresholdedReLU",
              "namespace": "layers",
              "paramStr": "(config?)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "theta",
                  "documentation": "Float >= 0. Threshold location of activation.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Thresholded Rectified Linear Unit.\n\nIt follows:\n`f(x) = x for x > theta`,\n`f(x) = 0 otherwise`.\n\nInput shape:\n   Arbitrary. Use the configuration `inputShape` when using this layer as the\n   first layer in a model.\n\nOutput shape:\n   Same shape as the input.\n\nReferences:\n   - [Zero-Bias Autoencoders and the Benefits of Co-Adapting\nFeatures](http://arxiv.org/abs/1402.3337)",
              "fileName": "#109",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L109-L111",
              "isFunction": true,
              "displayName": "tf.layers.thresholdedReLU",
              "urlHash": "layers.thresholdedReLU"
            }
          ]
        },
        {
          "name": "Basic",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Basic",
                "namespace": "layers",
                "useDocsFrom": "Activation",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "activation",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "activation",
                  "documentation": "Name of the activation function to use.",
                  "type": "'elu'|'hardSigmoid'|'linear'|'relu'|'relu6'|\n    'selu'|'sigmoid'|'softmax'|'softplus'|'softsign'|'tanh'|string",
                  "optional": false,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Applies an activation function to an output.\n\nThis layer applies element-wise activation function.  Other layers, notably\n`dense` can also apply activation functions.  Use this isolated activation\nfunction to extract the values before and after the\nactivation. For instance:\n\n```js\nconst input = tf.input({shape: [5]});\nconst denseLayer = tf.layers.dense({units: 1});\nconst activationLayer = tf.layers.activation({activation: 'relu6'});\n\n// Obtain the output symbolic tensors by applying the layers in order.\nconst denseOutput = denseLayer.apply(input);\nconst activationOutput = activationLayer.apply(denseOutput);\n\n// Create the model based on the inputs.\nconst model = tf.model({\n     inputs: input,\n     outputs: [denseOutput, activationOutput]\n});\n\n// Collect both outputs and print separately.\nconst [denseOut, activationOut] = model.predict(tf.randomNormal([6, 5]));\ndenseOut.print();\nactivationOut.print();\n```",
              "fileName": "#220",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L220-L222",
              "isFunction": true,
              "displayName": "tf.layers.activation",
              "urlHash": "layers.activation"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Basic",
                "namespace": "layers",
                "useDocsFrom": "Dense",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "dense",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "units",
                  "documentation": "Positive integer, dimensionality of the output space. ",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": true
                },
                {
                  "name": "activation",
                  "documentation": "Activation function to use.\n\nIf unspecified, no activation is applied.",
                  "type": "'elu'|'hardSigmoid'|'linear'|'relu'|'relu6'|\n    'selu'|'sigmoid'|'softmax'|'softplus'|'softsign'|'tanh'|string",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "useBias",
                  "documentation": "Whether to apply a bias. ",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "kernelInitializer",
                  "documentation": "Initializer for the dense kernel weights matrix.",
                  "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|[tf.initializers.Initializer](#class:initializers.Initializer)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "biasInitializer",
                  "documentation": "Initializer for the bias vector.",
                  "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|[tf.initializers.Initializer](#class:initializers.Initializer)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "inputDim",
                  "documentation": "If specified, defines inputShape as `[inputDim]`.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "kernelConstraint",
                  "documentation": "Constraint for the kernel weights.",
                  "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|[tf.constraints.Constraint](#class:constraints.Constraint)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "biasConstraint",
                  "documentation": "Constraint for the bias vector.",
                  "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|[tf.constraints.Constraint](#class:constraints.Constraint)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "kernelRegularizer",
                  "documentation": "Regularizer function applied to the dense kernel weights matrix.",
                  "type": "'l1l2'|string|Regularizer",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "biasRegularizer",
                  "documentation": "Regularizer function applied to the bias vector.",
                  "type": "'l1l2'|string|Regularizer",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "activityRegularizer",
                  "documentation": "Regularizer function applied to the activation.",
                  "type": "'l1l2'|string|Regularizer",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Creates a dense (fully connected) layer.\n\nThis layer implements the operation:\n   `output = activation(dot(input, kernel) + bias)`\n\n`activation` is the element-wise activation function\n   passed as the `activation` argument.\n\n`kernel` is a weights matrix created by the layer.\n\n`bias` is a bias vector created by the layer (only applicable if `useBias`\nis `true`).\n\n**Input shape:**\n\n   nD [tf.Tensor](#class:Tensor) with shape: `(batchSize, ..., inputDim)`.\n\n   The most common situation would be\n   a 2D input with shape `(batchSize, inputDim)`.\n\n**Output shape:**\n\n   nD tensor with shape: `(batchSize, ..., units)`.\n\n   For instance, for a 2D input with shape `(batchSize, inputDim)`,\n   the output would have shape `(batchSize, units)`.\n\nNote: if the input to the layer has a rank greater than 2, then it is\nflattened prior to the initial dot product with the kernel.",
              "fileName": "#233",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L233-L235",
              "isFunction": true,
              "displayName": "tf.layers.dense",
              "urlHash": "layers.dense"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Basic",
                "namespace": "layers",
                "useDocsFrom": "Dropout",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "dropout",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "rate",
                  "documentation": "Float between 0 and 1. Fraction of the input units to drop. ",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": true
                },
                {
                  "name": "noiseShape",
                  "documentation": "Integer array representing the shape of the binary dropout mask that will\nbe multiplied with the input.\n\nFor instance, if your inputs have shape `(batchSize, timesteps, features)`\nand you want the dropout mask to be the same for all timesteps, you can use\n`noise_shape=(batch_size, 1, features)`.",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "seed",
                  "documentation": "An integer to use as random seed. ",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Applies\n[dropout](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf) to\nthe input.\n\nDropout consists in randomly setting a fraction `rate` of input units to 0 at\neach update during training time, which helps prevent overfitting.",
              "fileName": "#246",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L246-L248",
              "isFunction": true,
              "displayName": "tf.layers.dropout",
              "urlHash": "layers.dropout"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Basic",
                "namespace": "layers",
                "useDocsFrom": "Embedding",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "embedding",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "inputDim",
                  "documentation": "Integer > 0. Size of the vocabulary, i.e. maximum integer index + 1.",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": true
                },
                {
                  "name": "outputDim",
                  "documentation": "Integer >= 0. Dimension of the dense embedding.",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": true
                },
                {
                  "name": "embeddingsInitializer",
                  "documentation": "Initializer for the `embeddings` matrix.",
                  "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|[tf.initializers.Initializer](#class:initializers.Initializer)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "embeddingsRegularizer",
                  "documentation": "Regularizer function applied to the `embeddings` matrix.",
                  "type": "'l1l2'|string|Regularizer",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "activityRegularizer",
                  "documentation": "Regularizer function applied to the activation.",
                  "type": "'l1l2'|string|Regularizer",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "embeddingsConstraint",
                  "documentation": "Constraint function applied to the `embeddings` matrix.",
                  "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|[tf.constraints.Constraint](#class:constraints.Constraint)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "maskZero",
                  "documentation": "Whether the input value 0 is a special \"padding\" value that should be\nmasked out. This is useful when using recurrent layers which may take\nvariable length input.\n\nIf this is `True` then all subsequent layers in the model need to support\nmasking or an exception will be raised. If maskZero is set to `True`, as a\nconsequence, index 0 cannot be used in the vocabulary (inputDim should\nequal size of vocabulary + 1).",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "inputLength",
                  "documentation": "Length of input sequences, when it is constant.\n\nThis argument is required if you are going to connect `flatten` then\n`dense` layers upstream (without it, the shape of the dense outputs cannot\nbe computed).",
                  "type": "number|number[]",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Maps positive integers (indices) into dense vectors of fixed size.\neg. [[4], [20]] -> [[0.25, 0.1], [0.6, -0.2]]\n\n**Input shape:** 2D tensor with shape: `[batchSize, sequenceLength]`.\n\n**Output shape:** 3D tensor with shape: `[batchSize, sequenceLength,\noutputDim]`.",
              "fileName": "#311",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L311-L313",
              "isFunction": true,
              "displayName": "tf.layers.embedding",
              "urlHash": "layers.embedding"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Basic",
                "namespace": "layers",
                "useDocsFrom": "Flatten",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "flatten",
              "namespace": "layers",
              "paramStr": "(config?)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "inputShape",
                  "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "batchInputShape",
                  "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "batchSize",
                  "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "dtype",
                  "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                  "type": "DataType",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "name",
                  "documentation": "Name for this layer. ",
                  "type": "string",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "trainable",
                  "documentation": "Whether this layer is trainable. Defaults to true. ",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "updatable",
                  "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "weights",
                  "documentation": "Initial weight values of the layer.",
                  "type": "[tf.Tensor](#class:Tensor)[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "inputDType",
                  "documentation": "Legacy support. Do not use for new code. ",
                  "type": "DataType",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Flattens the input. Does not affect the batch size.\n\nA `Flatten` layer flattens each batch in its inputs to 1D (making the output\n2D).\n\nFor example:\n\n```js\nconst input = tf.input({shape: [4, 3]});\nconst flattenLayer = tf.layers.flatten();\n// Inspect the inferred output shape of the flatten layer, which\n// equals `[null, 12]`. The 2nd dimension is 4 * 3, i.e., the result of the\n// flattening. (The 1st dimension is the undermined batch size.)\nconsole.log(JSON.stringify(flattenLayer.apply(input).shape));\n```",
              "fileName": "#259",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L259-L261",
              "isFunction": true,
              "displayName": "tf.layers.flatten",
              "urlHash": "layers.flatten"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Basic",
                "namespace": "layers",
                "useDocsFrom": "Permute",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "permute",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "dims",
                  "documentation": "Array of integers. Permutation pattern. Does not include the\nsample (batch) dimension. Index starts at 1.\nFor instance, `[2, 1]` permutes the first and second dimensions\nof the input.",
                  "type": "number[]",
                  "optional": false,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Permutes the dimensions of the input according to a given pattern.\n\nUseful for, e.g., connecting RNNs and convnets together.\n\nExample:\n\n```js\nconst model = tf.Sequential();\nmodel.add(tf.layers.permute({\n   dims: [2, 1],\n   inputShape: [10, 64]\n}));\nconsole.log(model.outputShape);\n// Now model's output shape is [null, 64, 10], where null is the\n// unpermuted sample (batch) dimension.\n```\n\nInput shape:\n   Arbitrary. Use the configuration field `inputShape` when using this\n   layer as othe first layer in a model.\n\nOutput shape:\n   Same rank as the input shape, but with the dimensions re-ordered (i.e.,\n   permuted) according to the `dims` configuration of this layer.",
              "fileName": "#298",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L298-L300",
              "isFunction": true,
              "displayName": "tf.layers.permute",
              "urlHash": "layers.permute"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Basic",
                "namespace": "layers",
                "useDocsFrom": "RepeatVector",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "repeatVector",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "n",
                  "documentation": "The integer number of times to repeat the input.",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Repeats the input n times in a new dimension.\n\n```js\n  const model = tf.sequential();\n  model.add(tf.layers.repeatVector({n: 4, inputShape: [2]}));\n  const x = tf.tensor2d([[10, 20]]);\n  // Use the model to do inference on a data point the model hasn't see\n  model.predict(x).print();\n  // output shape is now [batch, 2, 4]\n```",
              "fileName": "#272",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L272-L274",
              "isFunction": true,
              "displayName": "tf.layers.repeatVector",
              "urlHash": "layers.repeatVector"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Basic",
                "namespace": "layers",
                "useDocsFrom": "Reshape",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "reshape",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "targetShape",
                  "documentation": "The target shape. Does not include the batch axis. ",
                  "type": "number[]",
                  "optional": false,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Reshapes an input to a certain shape.\n\n```js\nconst input = tf.input({shape: [4, 3]});\nconst reshapeLayer = tf.layers.reshape({targetShape: [2, 6]});\n// Inspect the inferred output shape of the Reshape layer, which\n// equals `[null, 2, 6]`. (The 1st dimension is the undermined batch size.)\nconsole.log(JSON.stringify(reshapeLayer.apply(input).shape));\n```\n\nInput shape:\n   Arbitrary: although all dimensions in the input shape must be fixed.\n     Use the ReshapeLayerConfig field `input_shape` when using this layer\n     as the first layer in a model.\n\nOutput shape:\n   [batchSize, targetShape[0], targetShape[1], ...,\n    targetShape[targetShape.length - 1]].",
              "fileName": "#285",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L285-L287",
              "isFunction": true,
              "displayName": "tf.layers.reshape",
              "urlHash": "layers.reshape"
            }
          ]
        },
        {
          "name": "Convolutional",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Convolutional",
                "namespace": "layers",
                "useDocsFrom": "Conv1D",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "conv1d",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "filters",
                  "documentation": "The dimensionality of the output space (i.e. the number of filters in the\nconvolution).",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "1D convolution layer (e.g., temporal convolution).\n\nThis layer creates a convolution kernel that is convolved\nwith the layer input over a single spatial (or temporal) dimension\nto produce a tensor of outputs.\n\nIf `use_bias` is True, a bias vector is created and added to the outputs.\n\nIf `activation` is not `null`, it is applied to the outputs as well.\n\nWhen using this layer as the first layer in a model, provide an\n`inputShape` argument `Array` or `null`.\n\nFor example, `inputShape` would be:\n- `[10, 128]` for sequences of 10 vectors of 128-dimensional vectors\n- `[null, 128]` for variable-length sequences of 128-dimensional vectors.",
              "fileName": "#124",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L124-L126",
              "isFunction": true,
              "displayName": "tf.layers.conv1d",
              "urlHash": "layers.conv1d"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Convolutional",
                "namespace": "layers",
                "useDocsFrom": "Conv2D",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "conv2d",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "filters",
                  "documentation": "The dimensionality of the output space (i.e. the number of filters in the\nconvolution).",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "2D convolution layer (e.g. spatial convolution over images).\n\nThis layer creates a convolution kernel that is convolved\nwith the layer input to produce a tensor of outputs.\n\nIf `useBias` is True, a bias vector is created and added to the outputs.\n\nIf `activation` is not `null`, it is applied to the outputs as well.\n\nWhen using this layer as the first layer in a model,\nprovide the keyword argument `inputShape`\n(Array of integers, does not include the sample axis),\ne.g. `inputShape=[128, 128, 3]` for 128x128 RGB pictures\nin `dataFormat='channelsLast'`.",
              "fileName": "#137",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L137-L139",
              "isFunction": true,
              "displayName": "tf.layers.conv2d",
              "urlHash": "layers.conv2d"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Convolutional",
                "namespace": "layers",
                "useDocsFrom": "Conv2DTranspose",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "conv2dTranspose",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "filters",
                  "documentation": "The dimensionality of the output space (i.e. the number of filters in the\nconvolution).",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Transposed convolutional layer (sometimes called Deconvolution).\n\nThe need for transposed convolutions generally arises\nfrom the desire to use a transformation going in the opposite direction of\na normal convolution, i.e., from something that has the shape of the output\nof some convolution to something that has the shape of its input while\nmaintaining a connectivity pattern that is compatible with said\nconvolution.\n\nWhen using this layer as the first layer in a model, provide the\nconfiguration `inputShape` (`Array` of integers, does not include the\nsample axis), e.g., `inputShape: [128, 128, 3]` for 128x128 RGB pictures in\n`dataFormat: 'channelsLast'`.\n\nInput shape:\n   4D tensor with shape:\n   `[batch, channels, rows, cols]` if `dataFormat` is `'channelsFirst'`.\n   or 4D tensor with shape\n   `[batch, rows, cols, channels]` if `dataFormat` is `'channelsLast`.\n\nOutput shape:\n   4D tensor with shape:\n   `[batch, filters, newRows, newCols]` if `dataFormat` is\n`'channelsFirst'`. or 4D tensor with shape:\n   `[batch, newRows, newCols, filters]` if `dataFormat` is `'channelsLast'`.\n\nReferences:\n   - [A guide to convolution arithmetic for deep\nlearning](https://arxiv.org/abs/1603.07285v1)\n   - [Deconvolutional\nNetworks](http://www.matthewzeiler.com/pubs/cvpr2010/cvpr2010.pdf)",
              "fileName": "#150",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L150-L152",
              "isFunction": true,
              "displayName": "tf.layers.conv2dTranspose",
              "urlHash": "layers.conv2dTranspose"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Convolutional",
                "namespace": "layers",
                "useDocsFrom": "Cropping2D",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "cropping2D",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "cropping",
                  "documentation": "Dimension of the cropping along the width and the height.\n- If integer: the same symmetric cropping\n  is applied to width and height.\n- If list of 2 integers:\n   interpreted as two different\n   symmetric cropping values for height and width:\n   `[symmetric_height_crop, symmetric_width_crop]`.\n- If a list of 2 list of 2 integers:\n   interpreted as\n   `[[top_crop, bottom_crop], [left_crop, right_crop]]`",
                  "type": "number|[number, number]|[[number, number], [number, number]]",
                  "optional": false,
                  "isConfigParam": true
                },
                {
                  "name": "dataFormat",
                  "documentation": "Format of the data, which determines the ordering of the dimensions in\nthe inputs.\n\n`channels_last` corresponds to inputs with shape\n   `(batch, ..., channels)`\n\n  `channels_first` corresponds to inputs with shape `(batch, channels,\n...)`.\n\nDefaults to `channels_last`.",
                  "type": "'channelsFirst'|'channelsLast'",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Cropping layer for 2D input (e.g., image).\n\nThis layer can crop an input\nat the top, bottom, left and right side of an image tensor.\n\nInput shape:\n   4D tensor with shape:\n   - If `dataFormat` is `\"channelsLast\"`:\n     `[batch, rows, cols, channels]`\n   - If `data_format` is `\"channels_first\"`:\n     `[batch, channels, rows, cols]`.\n\nOutput shape:\n   4D with shape:\n   - If `dataFormat` is `\"channelsLast\"`:\n     `[batch, croppedRows, croppedCols, channels]`\n    - If `dataFormat` is `\"channelsFirst\"`:\n     `[batch, channels, croppedRows, croppedCols]`.\n\nExamples\n```js\n\nconst model = tf.sequential();\nmodel.add(tf.layers.cropping2D({cropping:[[2, 2], [2, 2]],\n                                inputShape: [128, 128, 3]}));\n//now output shape is [batch, 124, 124, 3]\n```",
              "fileName": "#176",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L176-L178",
              "isFunction": true,
              "displayName": "tf.layers.cropping2D",
              "urlHash": "layers.cropping2D"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Convolutional",
                "namespace": "layers",
                "useDocsFrom": "DepthwiseConv2D",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "depthwiseConv2d",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "kernelSize",
                  "documentation": "An integer or Array of 2 integers, specifying the width and height of the\n2D convolution window. Can be a single integer to specify the same value\nfor all spatial dimensions.",
                  "type": "number|[number, number]",
                  "optional": false,
                  "isConfigParam": true
                },
                {
                  "name": "depthMultiplier",
                  "documentation": "The number of depthwise convolution output channels for each input\nchannel.\nThe total number of depthwise convolution output channels will be equal to\n`filtersIn * depthMultiplier`.\nDefault: 1.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "depthwiseInitializer",
                  "documentation": "Initializer for the depthwise kernel matrix.\nDefault: GlorotNormal.",
                  "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|[tf.initializers.Initializer](#class:initializers.Initializer)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "depthwiseConstraint",
                  "documentation": "Constraint for the depthwise kernel matrix.",
                  "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|[tf.constraints.Constraint](#class:constraints.Constraint)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "depthwiseRegularizer",
                  "documentation": "Regulzarizer function for the depthwise kernel matrix.",
                  "type": "'l1l2'|string|Regularizer",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Depthwise separable 2D convolution.\n\nDepthwise Separable convolutions consists in performing just the first step\nin a depthwise spatial convolution (which acts on each input channel\nseparately). The `depthMultplier` argument controls how many output channels\nare generated per input channel in the depthwise step.",
              "fileName": "#205",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L205-L207",
              "isFunction": true,
              "displayName": "tf.layers.depthwiseConv2d",
              "urlHash": "layers.depthwiseConv2d"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Convolutional",
                "namespace": "layers",
                "useDocsFrom": "SeparableConv2D",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "separableConv2d",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "depthMultiplier",
                  "documentation": "The number of depthwise convolution output channels for each input\nchannel.\nThe total number of depthwise convolution output channels will be equal\nto `filtersIn * depthMultiplier`. Default: 1.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "depthwiseInitializer",
                  "documentation": "Initializer for the depthwise kernel matrix.",
                  "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|[tf.initializers.Initializer](#class:initializers.Initializer)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "pointwiseInitializer",
                  "documentation": "Initializer for the pointwise kernel matrix.",
                  "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|[tf.initializers.Initializer](#class:initializers.Initializer)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "depthwiseRegularizer",
                  "documentation": "Regularizer function applied to the depthwise kernel matrix.",
                  "type": "'l1l2'|string|Regularizer",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "pointwiseRegularizer",
                  "documentation": "Regularizer function applied to the pointwise kernel matrix.",
                  "type": "'l1l2'|string|Regularizer",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "depthwiseConstraint",
                  "documentation": "Constraint function applied to the depthwise kernel matrix.",
                  "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|[tf.constraints.Constraint](#class:constraints.Constraint)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "pointwiseConstraint",
                  "documentation": "Constraint function applied to the pointwise kernel matrix.",
                  "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|[tf.constraints.Constraint](#class:constraints.Constraint)",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Depthwise separable 2D convolution.\n\nSeparable convolution consists of first performing\na depthwise spatial convolution\n(which acts on each input channel separately)\nfollowed by a pointwise convolution which mixes together the resulting\noutput channels. The `depthMultiplier` argument controls how many\noutput channels are generated per input channel in the depthwise step.\n\nIntuitively, separable convolutions can be understood as\na way to factorize a convolution kernel into two smaller kernels,\nor as an extreme version of an Inception block.\n\nInput shape:\n   4D tensor with shape:\n     `[batch, channels, rows, cols]` if data_format='channelsFirst'\n   or 4D tensor with shape:\n     `[batch, rows, cols, channels]` if data_format='channelsLast'.\n\nOutput shape:\n   4D tensor with shape:\n     `[batch, filters, newRows, newCols]` if data_format='channelsFirst'\n   or 4D tensor with shape:\n     `[batch, newRows, newCols, filters]` if data_format='channelsLast'.\n     `rows` and `cols` values might have changed due to padding.",
              "fileName": "#163",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L163-L165",
              "isFunction": true,
              "displayName": "tf.layers.separableConv2d",
              "urlHash": "layers.separableConv2d"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Convolutional",
                "namespace": "layers",
                "useDocsFrom": "UpSampling2D",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "upSampling2d",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "size",
                  "documentation": "The upsampling factors for rows and columns.\n\nDefaults to `[2, 2]`.",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "dataFormat",
                  "documentation": "Format of the data, which determines the ordering of the dimensions in\nthe inputs.\n\n`\"channelsLast\"` corresponds to inputs with shape\n   `[batch, ..., channels]`\n\n  `\"channelsFirst\"` corresponds to inputs with shape `[batch, channels,\n...]`.\n\nDefaults to `\"channelsLast\"`.",
                  "type": "'channelsFirst'|'channelsLast'",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Upsampling layer for 2D inputs.\n\nRepeats the rows and columns of the data\nby size[0] and size[1] respectively.\n\n\nInput shape:\n    4D tensor with shape:\n     - If `dataFormat` is `\"channelsLast\"`:\n         `[batch, rows, cols, channels]`\n     - If `dataFormat` is `\"channelsFirst\"`:\n        `[batch, channels, rows, cols]`\n\nOutput shape:\n     4D tensor with shape:\n     - If `dataFormat` is `\"channelsLast\"`:\n        `[batch, upsampledRows, upsampledCols, channels]`\n     - If `dataFormat` is `\"channelsFirst\"`:\n         `[batch, channels, upsampledRows, upsampledCols]`",
              "fileName": "#189",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L189-L191",
              "isFunction": true,
              "displayName": "tf.layers.upSampling2d",
              "urlHash": "layers.upSampling2d"
            }
          ]
        },
        {
          "name": "Merge",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Merge",
                "namespace": "layers",
                "useDocsFrom": "Add",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "add",
              "namespace": "layers",
              "paramStr": "(config?)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "inputShape",
                  "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "batchInputShape",
                  "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "batchSize",
                  "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "dtype",
                  "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                  "type": "DataType",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "name",
                  "documentation": "Name for this layer. ",
                  "type": "string",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "trainable",
                  "documentation": "Whether this layer is trainable. Defaults to true. ",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "updatable",
                  "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "weights",
                  "documentation": "Initial weight values of the layer.",
                  "type": "[tf.Tensor](#class:Tensor)[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "inputDType",
                  "documentation": "Legacy support. Do not use for new code. ",
                  "type": "DataType",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Layer that performs element-wise addition on an `Array` of inputs.\n\nIt takes as input a list of tensors, all of the same shape, and returns a\nsingle tensor (also of the same shape). The inputs are specified as an\n`Array` when the `apply` method of the `Add` layer instance is called. For\nexample:\n\n```js\nconst input1 = tf.input({shape: [2, 2]});\nconst input2 = tf.input({shape: [2, 2]});\nconst addLayer = tf.layers.add();\nconst sum = addLayer.apply([input1, input2]);\nconsole.log(JSON.stringify(sum.shape));\n// You get [null, 2, 2], with the first dimension as the undetermined batch\n// dimension.\n```",
              "fileName": "#326",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L326-L328",
              "isFunction": true,
              "displayName": "tf.layers.add",
              "urlHash": "layers.add"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Merge",
                "namespace": "layers",
                "useDocsFrom": "Average",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "average",
              "namespace": "layers",
              "paramStr": "(config?)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "inputShape",
                  "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "batchInputShape",
                  "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "batchSize",
                  "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "dtype",
                  "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                  "type": "DataType",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "name",
                  "documentation": "Name for this layer. ",
                  "type": "string",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "trainable",
                  "documentation": "Whether this layer is trainable. Defaults to true. ",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "updatable",
                  "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "weights",
                  "documentation": "Initial weight values of the layer.",
                  "type": "[tf.Tensor](#class:Tensor)[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "inputDType",
                  "documentation": "Legacy support. Do not use for new code. ",
                  "type": "DataType",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Layer that performs element-wise averaging on an `Array` of inputs.\n\nIt takes as input a list of tensors, all of the same shape, and returns a\nsingle tensor (also of the same shape). For example:\n\n```js\nconst input1 = tf.input({shape: [2, 2]});\nconst input2 = tf.input({shape: [2, 2]});\nconst averageLayer = tf.layers.average();\nconst average = averageLayer.apply([input1, input2]);\nconsole.log(JSON.stringify(average.shape));\n// You get [null, 2, 2], with the first dimension as the undetermined batch\n// dimension.\n```",
              "fileName": "#339",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L339-L341",
              "isFunction": true,
              "displayName": "tf.layers.average",
              "urlHash": "layers.average"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Merge",
                "namespace": "layers",
                "useDocsFrom": "Concatenate",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "concatenate",
              "namespace": "layers",
              "paramStr": "(config?)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "Axis along which to concatenate.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Layer that concatenates an `Array` of inputs.\n\nIt takes a list of tensors, all of the same shape except for the\nconcatenation axis, and returns a single tensor, the concatenation\nof all inputs. For example:\n\n```js\nconst input1 = tf.input({shape: [2, 2]});\nconst input2 = tf.input({shape: [2, 3]});\nconst concatLayer = tf.layers.concatenate();\nconst output = concatLayer.apply([input1, input2]);\nconsole.log(JSON.stringify(output.shape));\n// You get [null, 2, 5], with the first dimension as the undetermined batch\n// dimension. The last dimension (5) is the result of concatenating the\n// last dimensions of the inputs (2 and 3).\n```",
              "fileName": "#352",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L352-L354",
              "isFunction": true,
              "displayName": "tf.layers.concatenate",
              "urlHash": "layers.concatenate"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Merge",
                "namespace": "layers",
                "useDocsFrom": "Maximum",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "maximum",
              "namespace": "layers",
              "paramStr": "(config?)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "inputShape",
                  "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "batchInputShape",
                  "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "batchSize",
                  "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "dtype",
                  "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                  "type": "DataType",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "name",
                  "documentation": "Name for this layer. ",
                  "type": "string",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "trainable",
                  "documentation": "Whether this layer is trainable. Defaults to true. ",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "updatable",
                  "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "weights",
                  "documentation": "Initial weight values of the layer.",
                  "type": "[tf.Tensor](#class:Tensor)[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "inputDType",
                  "documentation": "Legacy support. Do not use for new code. ",
                  "type": "DataType",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Layer that computes the element-wise maximum an `Array` of inputs.\n\nIt takes as input a list of tensors, all of the same shape and returns a\nsingle tensor (also of the same shape). For example:\n\n```js\nconst input1 = tf.input({shape: [2, 2]});\nconst input2 = tf.input({shape: [2, 2]});\nconst maxLayer = tf.layers.maximum();\nconst max = maxLayer.apply([input1, input2]);\nconsole.log(JSON.stringify(max.shape));\n// You get [null, 2, 2], with the first dimension as the undetermined batch\n// dimension.\n```",
              "fileName": "#365",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L365-L367",
              "isFunction": true,
              "displayName": "tf.layers.maximum",
              "urlHash": "layers.maximum"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Merge",
                "namespace": "layers",
                "useDocsFrom": "Minimum",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "minimum",
              "namespace": "layers",
              "paramStr": "(config?)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "inputShape",
                  "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "batchInputShape",
                  "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "batchSize",
                  "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "dtype",
                  "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                  "type": "DataType",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "name",
                  "documentation": "Name for this layer. ",
                  "type": "string",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "trainable",
                  "documentation": "Whether this layer is trainable. Defaults to true. ",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "updatable",
                  "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "weights",
                  "documentation": "Initial weight values of the layer.",
                  "type": "[tf.Tensor](#class:Tensor)[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "inputDType",
                  "documentation": "Legacy support. Do not use for new code. ",
                  "type": "DataType",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Layer that computes the element-wise minimum of an `Array` of inputs.\n\nIt takes as input a list of tensors, all of the same shape and returns a\nsingle tensor (also of the same shape). For example:\n\n```js\nconst input1 = tf.input({shape: [2, 2]});\nconst input2 = tf.input({shape: [2, 2]});\nconst minLayer = tf.layers.minimum();\nconst min = minLayer.apply([input1, input2]);\nconsole.log(JSON.stringify(min.shape));\n// You get [null, 2, 2], with the first dimension as the undetermined batch\n// dimension.\n```",
              "fileName": "#378",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L378-L380",
              "isFunction": true,
              "displayName": "tf.layers.minimum",
              "urlHash": "layers.minimum"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Merge",
                "namespace": "layers",
                "useDocsFrom": "Multiply",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "multiply",
              "namespace": "layers",
              "paramStr": "(config?)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "inputShape",
                  "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "batchInputShape",
                  "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "batchSize",
                  "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "dtype",
                  "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                  "type": "DataType",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "name",
                  "documentation": "Name for this layer. ",
                  "type": "string",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "trainable",
                  "documentation": "Whether this layer is trainable. Defaults to true. ",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "updatable",
                  "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "weights",
                  "documentation": "Initial weight values of the layer.",
                  "type": "[tf.Tensor](#class:Tensor)[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "inputDType",
                  "documentation": "Legacy support. Do not use for new code. ",
                  "type": "DataType",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Layer that multiplies (element-wise) an `Array` of inputs.\n\nIt takes as input an Array of tensors, all of the same\nshape, and returns a single tensor (also of the same shape).\nFor example:\n\n```js\nconst input1 = tf.input({shape: [2, 2]});\nconst input2 = tf.input({shape: [2, 2]});\nconst input3 = tf.input({shape: [2, 2]});\nconst multiplyLayer = tf.layers.multiply();\nconst product = multiplyLayer.apply([input1, input2, input3]);\nconsole.log(product.shape);\n// You get [null, 2, 2], with the first dimension as the undetermined batch\n// dimension.",
              "fileName": "#391",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L391-L393",
              "isFunction": true,
              "displayName": "tf.layers.multiply",
              "urlHash": "layers.multiply"
            }
          ]
        },
        {
          "name": "Normalization",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Normalization",
                "namespace": "layers",
                "useDocsFrom": "BatchNormalization",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "batchNormalization",
              "namespace": "layers",
              "paramStr": "(config?)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "The integer axis that should be normalized (typically the features axis).\nDefaults to -1.\n\nFor instance, after a `Conv2D` layer with `data_format=\"channels_first\"`,\nset `axis=1` in [tf.batchNormalization()](#batchNormalization).",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "momentum",
                  "documentation": "Momentum of the moving average. Defaults to 0.99.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "epsilon",
                  "documentation": "Small float added to the variance to avoid dividing by zero. Defaults to\n1e-3.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "center",
                  "documentation": "If `true`, add offset of `beta` to normalized tensor.\nIf `false`, `beta` is ignored.\nDefaults to `true`.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "scale",
                  "documentation": "If `true`, multiply by `gamma`.\nIf `false`, `gamma` is not used.\nWhen the next layer is linear (also e.g. `nn.relu`),\nthis can be disabled since the scaling will be done by the next layer.\nDefaults to `true`.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "betaInitializer",
                  "documentation": "Initializer for the beta weight.\n  Defaults to 'zeros'.",
                  "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|[tf.initializers.Initializer](#class:initializers.Initializer)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "gammaInitializer",
                  "documentation": "Initializer for the gamma weight.\n  Defaults to [tf.ones()](#ones).",
                  "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|[tf.initializers.Initializer](#class:initializers.Initializer)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "movingMeanInitializer",
                  "documentation": "Initializer for the moving mean.\nDefaults to [tf.zeros()](#zeros)",
                  "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|[tf.initializers.Initializer](#class:initializers.Initializer)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "movingVarianceInitializer",
                  "documentation": "Initializer for the moving variance.\n  Defaults to 'Ones'.",
                  "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|[tf.initializers.Initializer](#class:initializers.Initializer)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "betaConstraint",
                  "documentation": "Constraint for the beta weight.",
                  "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|[tf.constraints.Constraint](#class:constraints.Constraint)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "gammaConstraint",
                  "documentation": "Constraint for gamma weight.",
                  "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|[tf.constraints.Constraint](#class:constraints.Constraint)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "betaRegularizer",
                  "documentation": "Regularizer for the beta weight.",
                  "type": "'l1l2'|string|Regularizer",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "gammaRegularizer",
                  "documentation": "Regularizer for the gamma weight.",
                  "type": "'l1l2'|string|Regularizer",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Batch normalization layer (Ioffe and Szegedy, 2014).\n\nNormalize the activations of the previous layer at each batch,\ni.e. applies a transformation that maintains the mean activation\nclose to 0 and the activation standard deviation close to 1.\n\nInput shape:\n   Arbitrary. Use the keyword argument `inputShape` (Array of integers, does\n   not include the sample axis) when calling the constructor of this class,\n   if this layer is used as a first layer in a model.\n\nOutput shape:\n   Same shape as input.\n\nReferences:\n   - [Batch Normalization: Accelerating Deep Network Training by Reducing\nInternal Covariate Shift](https://arxiv.org/abs/1502.03167)",
              "fileName": "#406",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L406-L409",
              "isFunction": true,
              "displayName": "tf.layers.batchNormalization",
              "urlHash": "layers.batchNormalization"
            }
          ]
        },
        {
          "name": "Pooling",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Pooling",
                "namespace": "layers",
                "useDocsFrom": "AveragePooling1D",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "averagePooling1d",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "poolSize",
                  "documentation": "Size of the window to pool over, should be an integer.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "strides",
                  "documentation": "Period at which to sample the pooled values.\n\nIf `null`, defaults to `poolSize`.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "padding",
                  "documentation": "How to fill in data that's not an integer multiple of poolSize. ",
                  "type": "'valid'|'same'|'causal'",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Average pooling operation for spatial data.\n\nInput shape: `[batchSize, inLength, channels]`\n\nOutput shape: `[batchSize, pooledLength, channels]`\n\n`tf.avgPool1d` is an alias.",
              "fileName": "#436",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L436-L438",
              "isFunction": true,
              "displayName": "tf.layers.averagePooling1d",
              "urlHash": "layers.averagePooling1d"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Pooling",
                "namespace": "layers",
                "useDocsFrom": "AveragePooling2D",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "averagePooling2d",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "poolSize",
                  "documentation": "Factors by which to downscale in each dimension [vertical, horizontal].\nExpects an integer or an array of 2 integers.\n\nFor example, `[2, 2]` will halve the input in both spatial dimension.\nIf only one integer is specified, the same window length\nwill be used for both dimensions.",
                  "type": "number|[number, number]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "strides",
                  "documentation": "The size of the stride in each dimension of the pooling window. Expects\nan integer or an array of 2 integers. Integer, tuple of 2 integers, or\nNone.\n\nIf `null`, defaults to `poolSize`.",
                  "type": "number|[number, number]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "padding",
                  "documentation": "The padding type to use for the pooling layer. ",
                  "type": "'valid'|'same'|'causal'",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "dataFormat",
                  "documentation": "The data format to use for the pooling layer. ",
                  "type": "'channelsFirst'|'channelsLast'",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Average pooling operation for spatial data.\n\nInput shape:\n  - If `dataFormat === CHANNEL_LAST`:\n      4D tensor with shape:\n      `[batchSize, rows, cols, channels]`\n  - If `dataFormat === CHANNEL_FIRST`:\n      4D tensor with shape:\n      `[batchSize, channels, rows, cols]`\n\nOutput shape\n  - If `dataFormat === CHANNEL_LAST`:\n      4D tensor with shape:\n      `[batchSize, pooleRows, pooledCols, channels]`\n  - If `dataFormat === CHANNEL_FIRST`:\n      4D tensor with shape:\n      `[batchSize, channels, pooleRows, pooledCols]`\n\n`tf.avgPool2d` is an alias.",
              "fileName": "#457",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L457-L459",
              "isFunction": true,
              "displayName": "tf.layers.averagePooling2d",
              "urlHash": "layers.averagePooling2d"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Pooling",
                "namespace": "layers",
                "useDocsFrom": "GlobalAveragePooling1D",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "globalAveragePooling1d",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "inputShape",
                  "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "batchInputShape",
                  "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "batchSize",
                  "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "dtype",
                  "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                  "type": "DataType",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "name",
                  "documentation": "Name for this layer. ",
                  "type": "string",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "trainable",
                  "documentation": "Whether this layer is trainable. Defaults to true. ",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "updatable",
                  "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "weights",
                  "documentation": "Initial weight values of the layer.",
                  "type": "[tf.Tensor](#class:Tensor)[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "inputDType",
                  "documentation": "Legacy support. Do not use for new code. ",
                  "type": "DataType",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Global average pooling operation for temporal data.\n\nInput Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n\nOutput Shape:2D tensor with shape: `[batchSize, features]`.",
              "fileName": "#478",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L478-L480",
              "isFunction": true,
              "displayName": "tf.layers.globalAveragePooling1d",
              "urlHash": "layers.globalAveragePooling1d"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Pooling",
                "namespace": "layers",
                "useDocsFrom": "GlobalAveragePooling2D",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "globalAveragePooling2d",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "dataFormat",
                  "documentation": "One of `CHANNEL_LAST` (default) or `CHANNEL_FIRST`.\n\nThe ordering of the dimensions in the inputs. `CHANNEL_LAST` corresponds\nto inputs with shape `[batch, height, width, channels[` while\n`CHANNEL_FIRST` corresponds to inputs with shape\n`[batch, channels, height, width]`.",
                  "type": "'channelsFirst'|'channelsLast'",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Global average pooling operation for spatial data.\n\nInput shape:\n   - If `dataFormat` is `CHANNEL_LAST`:\n       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n   - If `dataFormat` is `CHANNEL_FIRST`:\n       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n\nOutput shape:\n   2D tensor with shape: `[batchSize, channels]`.",
              "fileName": "#491",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L491-L494",
              "isFunction": true,
              "displayName": "tf.layers.globalAveragePooling2d",
              "urlHash": "layers.globalAveragePooling2d"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Pooling",
                "namespace": "layers",
                "useDocsFrom": "GlobalMaxPooling1D",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "globalMaxPooling1d",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "inputShape",
                  "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "batchInputShape",
                  "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "batchSize",
                  "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "dtype",
                  "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                  "type": "DataType",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "name",
                  "documentation": "Name for this layer. ",
                  "type": "string",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "trainable",
                  "documentation": "Whether this layer is trainable. Defaults to true. ",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "updatable",
                  "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "weights",
                  "documentation": "Initial weight values of the layer.",
                  "type": "[tf.Tensor](#class:Tensor)[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "inputDType",
                  "documentation": "Legacy support. Do not use for new code. ",
                  "type": "DataType",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Global max pooling operation for temporal data.\n\nInput Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n\nOutput Shape:2D tensor with shape: `[batchSize, features]`.",
              "fileName": "#505",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L505-L507",
              "isFunction": true,
              "displayName": "tf.layers.globalMaxPooling1d",
              "urlHash": "layers.globalMaxPooling1d"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Pooling",
                "namespace": "layers",
                "useDocsFrom": "GlobalMaxPooling2D",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "globalMaxPooling2d",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "dataFormat",
                  "documentation": "One of `CHANNEL_LAST` (default) or `CHANNEL_FIRST`.\n\nThe ordering of the dimensions in the inputs. `CHANNEL_LAST` corresponds\nto inputs with shape `[batch, height, width, channels[` while\n`CHANNEL_FIRST` corresponds to inputs with shape\n`[batch, channels, height, width]`.",
                  "type": "'channelsFirst'|'channelsLast'",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Global max pooling operation for spatial data.\n\nInput shape:\n   - If `dataFormat` is `CHANNEL_LAST`:\n       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n   - If `dataFormat` is `CHANNEL_FIRST`:\n       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n\nOutput shape:\n   2D tensor with shape: `[batchSize, channels]`.",
              "fileName": "#518",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L518-L520",
              "isFunction": true,
              "displayName": "tf.layers.globalMaxPooling2d",
              "urlHash": "layers.globalMaxPooling2d"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Pooling",
                "namespace": "layers",
                "useDocsFrom": "MaxPooling1D",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "maxPooling1d",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "poolSize",
                  "documentation": "Size of the window to pool over, should be an integer.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "strides",
                  "documentation": "Period at which to sample the pooled values.\n\nIf `null`, defaults to `poolSize`.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "padding",
                  "documentation": "How to fill in data that's not an integer multiple of poolSize. ",
                  "type": "'valid'|'same'|'causal'",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Max pooling operation for temporal data.\n\nInput shape:  `[batchSize, inLength, channels]`\n\nOutput shape: `[batchSize, pooledLength, channels]`",
              "fileName": "#531",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L531-L533",
              "isFunction": true,
              "displayName": "tf.layers.maxPooling1d",
              "urlHash": "layers.maxPooling1d"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Pooling",
                "namespace": "layers",
                "useDocsFrom": "MaxPooling2D",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "maxPooling2d",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "poolSize",
                  "documentation": "Factors by which to downscale in each dimension [vertical, horizontal].\nExpects an integer or an array of 2 integers.\n\nFor example, `[2, 2]` will halve the input in both spatial dimension.\nIf only one integer is specified, the same window length\nwill be used for both dimensions.",
                  "type": "number|[number, number]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "strides",
                  "documentation": "The size of the stride in each dimension of the pooling window. Expects\nan integer or an array of 2 integers. Integer, tuple of 2 integers, or\nNone.\n\nIf `null`, defaults to `poolSize`.",
                  "type": "number|[number, number]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "padding",
                  "documentation": "The padding type to use for the pooling layer. ",
                  "type": "'valid'|'same'|'causal'",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "dataFormat",
                  "documentation": "The data format to use for the pooling layer. ",
                  "type": "'channelsFirst'|'channelsLast'",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Max pooling operation for spatial data.\n\nInput shape\n   - If `dataFormat === CHANNEL_LAST`:\n       4D tensor with shape:\n       `[batchSize, rows, cols, channels]`\n   - If `dataFormat === CHANNEL_FIRST`:\n      4D tensor with shape:\n       `[batchSize, channels, rows, cols]`\n\nOutput shape\n   - If `dataFormat=CHANNEL_LAST`:\n       4D tensor with shape:\n       `[batchSize, pooleRows, pooledCols, channels]`\n   - If `dataFormat=CHANNEL_FIRST`:\n       4D tensor with shape:\n       `[batchSize, channels, pooleRows, pooledCols]`",
              "fileName": "#544",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L544-L546",
              "isFunction": true,
              "displayName": "tf.layers.maxPooling2d",
              "urlHash": "layers.maxPooling2d"
            }
          ]
        },
        {
          "name": "Recurrent",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Recurrent",
                "namespace": "layers",
                "useDocsFrom": "GRU",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "gru",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "recurrentActivation",
                  "documentation": "Activation function to use for the recurrent step.\n\nDefaults to hard sigmoid (`hardSigomid`).\n\nIf `null`, no activation is applied.",
                  "type": "string",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "implementation",
                  "documentation": "Implementation mode, either 1 or 2.\n\nMode 1 will structure its operations as a larger number of\nsmaller dot products and additions.\n\nMode 2 will batch them into fewer, larger operations. These modes will\nhave different performance profiles on different hardware and\nfor different applications.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Gated Recurrent Unit - Cho et al. 2014.\n\nThis is an `RNN` layer consisting of one `GRUCell`. However, unlike\nthe underlying `GRUCell`, the `apply` method of `SimpleRNN` operates\non a sequence of inputs. The shape of the input (not including the first,\nbatch dimension) needs to be at least 2-D, with the first dimension being\ntime steps. For example:\n\n```js\nconst rnn = tf.layers.gru({units: 8, returnSequences: true});\n\n// Create an input with 10 time steps.\nconst input = tf.input({shape: [10, 20]});\nconst output = rnn.apply(input);\n\nconsole.log(JSON.stringify(output.shape));\n// [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n// same as the sequence length of [tf.input()](#input), due to `returnSequences`: `true`;\n// 3rd dimension is the `GRUCell`'s number of units.",
              "fileName": "#559",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L559-L561",
              "isFunction": true,
              "displayName": "tf.layers.gru",
              "urlHash": "layers.gru"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Recurrent",
                "namespace": "layers",
                "useDocsFrom": "GRUCell",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "gruCell",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "recurrentActivation",
                  "documentation": "Activation function to use for the recurrent step.\n\nDefaults to hard sigmoid (`hardSigomid`).\n\nIf `null`, no activation is applied.",
                  "type": "string",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "implementation",
                  "documentation": "Implementation mode, either 1 or 2.\n\nMode 1 will structure its operations as a larger number of\n   smaller dot products and additions.\n\nMode 2 will batch them into fewer, larger operations. These modes will\nhave different performance profiles on different hardware and\nfor different applications.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.RNNCell](#class:RNNCell)",
              "documentation": "Cell class for `GRU`.\n\n`GRUCell` is distinct from the `RNN` subclass `GRU` in that its\n`apply` method takes the input data of only a single time step and returns\nthe cell's output at the time step, while `GRU` takes the input data\nover a number of time steps. For example:\n\n```js\nconst cell = tf.layers.gruCell({units: 2});\nconst input = tf.input({shape: [10]});\nconst output = cell.apply(input);\n\nconsole.log(JSON.stringify(output.shape));\n// [null, 10]: This is the cell's output at a single time step. The 1st\n// dimension is the unknown batch size.\n```\n\nInstance(s) of `GRUCell` can be used to construct `RNN` layers. The\nmost typical use of this workflow is to combine a number of cells into a\nstacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\nRNN. For example:\n\n```js\nconst cells = [\n   tf.layers.gruCell({units: 4}),\n   tf.layers.gruCell({units: 8}),\n];\nconst rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n\n// Create an input with 10 time steps and a length-20 vector at each step.\nconst input = tf.input({shape: [10, 20]});\nconst output = rnn.apply(input);\n\nconsole.log(JSON.stringify(output.shape));\n// [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n// same as the sequence length of [tf.input()](#input), due to `returnSequences`: `true`;\n// 3rd dimension is the last `gruCell`'s number of units.\n```\n\nTo create an `RNN` consisting of only *one* `GRUCell`, use the\n`tf.layers.gru`.",
              "fileName": "#572",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L572-L574",
              "isFunction": true,
              "displayName": "tf.layers.gruCell",
              "urlHash": "layers.gruCell"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Recurrent",
                "namespace": "layers",
                "useDocsFrom": "LSTM",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "lstm",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "recurrentActivation",
                  "documentation": "Activation function to use for the recurrent step.\n\nDefaults to hard sigmoid (`hardSigomid`).\n\nIf `null`, no activation is applied.",
                  "type": "string",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "unitForgetBias",
                  "documentation": "If `true`, add 1 to the bias of the forget gate at initialization.\nSetting it to `true` will also force `biasInitializer = 'zeros'`.\nThis is recommended in\n[Jozefowicz et\nal.](http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf).",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "implementation",
                  "documentation": "Implementation mode, either 1 or 2.\n   Mode 1 will structure its operations as a larger number of\n   smaller dot products and additions, whereas mode 2 will\n   batch them into fewer, larger operations. These modes will\n   have different performance profiles on different hardware and\n   for different applications.",
                  "type": "1|2",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Long-Short Term Memory layer - Hochreiter 1997.\n\nThis is an `RNN` layer consisting of one `LSTMCell`. However, unlike\nthe underlying `LSTMCell`, the `apply` method of `LSTM` operates\non a sequence of inputs. The shape of the input (not including the first,\nbatch dimension) needs to be at least 2-D, with the first dimension being\ntime steps. For example:\n\n```js\nconst lstm = tf.layers.lstm({units: 8, returnSequences: true});\n\n// Create an input with 10 time steps.\nconst input = tf.input({shape: [10, 20]});\nconst output = lstm.apply(input);\n\nconsole.log(JSON.stringify(output.shape));\n// [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n// same as the sequence length of [tf.input()](#input), due to `returnSequences`: `true`;\n// 3rd dimension is the `LSTMCell`'s number of units.",
              "fileName": "#585",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L585-L587",
              "isFunction": true,
              "displayName": "tf.layers.lstm",
              "urlHash": "layers.lstm"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Recurrent",
                "namespace": "layers",
                "useDocsFrom": "LSTMCell",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "lstmCell",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "recurrentActivation",
                  "documentation": "Activation function to use for the recurrent step.\n\nDefaults to hard sigmoid (`hardSigomid`).\n\nIf `null`, no activation is applied.",
                  "type": "'elu'|'hardSigmoid'|'linear'|'relu'|'relu6'|\n    'selu'|'sigmoid'|'softmax'|'softplus'|'softsign'|'tanh'|string",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "unitForgetBias",
                  "documentation": "If `true`, add 1 to the bias of the forget gate at initialization.\nSetting it to `true` will also force `biasInitializer = 'zeros'`.\nThis is recommended in\n[Jozefowicz et\nal.](http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf).",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "implementation",
                  "documentation": "Implementation mode, either 1 or 2.\n\nMode 1 will structure its operations as a larger number of\n   smaller dot products and additions.\n\nMode 2 will batch them into fewer, larger operations. These modes will\nhave different performance profiles on different hardware and\nfor different applications.",
                  "type": "1|2",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.RNNCell](#class:RNNCell)",
              "documentation": "Cell class for `LSTM`.\n\n`LSTMCell` is distinct from the `RNN` subclass `LSTM` in that its\n`apply` method takes the input data of only a single time step and returns\nthe cell's output at the time step, while `LSTM` takes the input data\nover a number of time steps. For example:\n\n```js\nconst cell = tf.layers.lstmCell({units: 2});\nconst input = tf.input({shape: [10]});\nconst output = cell.apply(input);\n\nconsole.log(JSON.stringify(output.shape));\n// [null, 10]: This is the cell's output at a single time step. The 1st\n// dimension is the unknown batch size.\n```\n\nInstance(s) of `LSTMCell` can be used to construct `RNN` layers. The\nmost typical use of this workflow is to combine a number of cells into a\nstacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\nRNN. For example:\n\n```js\nconst cells = [\n   tf.layers.lstmCell({units: 4}),\n   tf.layers.lstmCell({units: 8}),\n];\nconst rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n\n// Create an input with 10 time steps and a length-20 vector at each step.\nconst input = tf.input({shape: [10, 20]});\nconst output = rnn.apply(input);\n\nconsole.log(JSON.stringify(output.shape));\n// [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n// same as the sequence length of [tf.input()](#input), due to `returnSequences`: `true`;\n// 3rd dimension is the last `lstmCell`'s number of units.\n```\n\nTo create an `RNN` consisting of only *one* `LSTMCell`, use the\n`tf.layers.lstm`.",
              "fileName": "#598",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L598-L600",
              "isFunction": true,
              "displayName": "tf.layers.lstmCell",
              "urlHash": "layers.lstmCell"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Recurrent",
                "namespace": "layers",
                "useDocsFrom": "RNN",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "rnn",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "cell",
                  "documentation": "",
                  "type": "[tf.RNNCell](#class:RNNCell)|[tf.RNNCell](#class:RNNCell)[]",
                  "optional": false,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Base class for recurrent layers.\n\nInput shape:\n   3D tensor with shape `[batchSize, timeSteps, inputDim]`.\n\nOutput shape:\n   - if `returnState`, an Array of tensors (i.e., [tf.Tensor](#class:Tensor)s). The first\n     tensor is the output. The remaining tensors are the states at the\n     last time step, each with shape `[batchSize, units]`.\n   - if `returnSequences`, the output will have shape\n     `[batchSize, timeSteps, units]`.\n   - else, the output will have shape `[batchSize, units]`.\n\nMasking:\n   This layer supports masking for input data with a variable number\n   of timesteps. To introduce masks to your data,\n   use an embedding layer with the `mask_zero` parameter\n   set to `True`.\n\nNotes on using statefulness in RNNs:\n   You can set RNN layers to be 'stateful', which means that the states\n   computed for the samples in one batch will be reused as initial states\n   for the samples in the next batch. This assumes a one-to-one mapping\n   between samples in different successive batches.\n\n   To enable statefulness:\n     - specify `stateful: true` in the layer constructor.\n     - specify a fixed batch size for your model, by passing\n       if sequential model:\n         `batchInputShape=[...]` to the first layer in your model.\n       else for functional model with 1 or more Input layers:\n         `batchShape=[...]` to all the first layers in your model.\n       This is the expected shape of your inputs *including the batch size*.\n       It should be a tuple of integers, e.g. `(32, 10, 100)`.\n     - specify `shuffle=False` when calling fit().\n\n   To reset the states of your model, call `.resetStates()` on either\n   a specific layer, or on your entire model.\n\nNote on specifying the initial state of RNNs\n   You can specify the initial state of RNN layers symbolically by\n   calling them with the option `initialState`. The value of\n   `initialState` should be a tensor or list of tensors representing\n   the initial state of the RNN layer.\n\n   You can specify the initial state of RNN layers numerically by\n   calling `resetStates` with the keyword argument `states`. The value of\n   `states` should be a numpy array or list of numpy arrays representing\n   the initial state of the RNN layer.\n\nNote on passing external constants to RNNs\n   You can pass \"external\" constants to the cell using the `constants`\n   keyword argument of `RNN.call` method. This requires that the `cell.call`\n   method accepts the same keyword argument `constants`. Such constants\n   can be used to conditon the cell transformation on additional static inputs\n   (not changing over time), a.k.a an attention mechanism.",
              "fileName": "#637",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L637-L639",
              "isFunction": true,
              "displayName": "tf.layers.rnn",
              "urlHash": "layers.rnn"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Recurrent",
                "namespace": "layers",
                "useDocsFrom": "SimpleRNN",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "simpleRNN",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "units",
                  "documentation": "Positive integer, dimensionality of the output space.",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": true
                },
                {
                  "name": "activation",
                  "documentation": "Activation function to use.\n\nDefaults to  hyperbolic tangent ([tf.tanh()](#tanh))\n\nIf you pass `null`, no activation will be applied.",
                  "type": "'elu'|'hardSigmoid'|'linear'|'relu'|'relu6'|\n    'selu'|'sigmoid'|'softmax'|'softplus'|'softsign'|'tanh'|string",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "useBias",
                  "documentation": "Whether the layer uses a bias vector.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "kernelInitializer",
                  "documentation": "Initializer for the `kernel` weights matrix, used for the linear\ntransformation of the inputs.",
                  "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|[tf.initializers.Initializer](#class:initializers.Initializer)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "recurrentInitializer",
                  "documentation": "Initializer for the `recurrentKernel` weights matrix, used for\nlinear transformation of the recurrent state.",
                  "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|[tf.initializers.Initializer](#class:initializers.Initializer)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "biasInitializer",
                  "documentation": "Initializer for the bias vector.",
                  "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|[tf.initializers.Initializer](#class:initializers.Initializer)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "kernelRegularizer",
                  "documentation": "Regularizer function applied to the kernel weights matrix.",
                  "type": "'l1l2'|string|Regularizer",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "recurrentRegularizer",
                  "documentation": "Regularizer function applied to the recurrentKernel weights matrix.",
                  "type": "'l1l2'|string|Regularizer",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "biasRegularizer",
                  "documentation": "Regularizer function applied to the bias vector.",
                  "type": "'l1l2'|string|Regularizer",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "kernelConstraint",
                  "documentation": "Constraint function applied to the kernel weights matrix.",
                  "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|[tf.constraints.Constraint](#class:constraints.Constraint)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "recurrentConstraint",
                  "documentation": "Constraint function applied to the recurrentKernel weights matrix.",
                  "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|[tf.constraints.Constraint](#class:constraints.Constraint)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "biasConstraint",
                  "documentation": "Constraint function applied to the bias vector.",
                  "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|[tf.constraints.Constraint](#class:constraints.Constraint)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "dropout",
                  "documentation": "Number between 0 and 1. Fraction of the units to drop for the linear\ntransformation of the inputs.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "recurrentDropout",
                  "documentation": "Number between 0 and 1. Fraction of the units to drop for the linear\ntransformation of the recurrent state.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Fully-connected RNN where the output is to be fed back to input.\n\nThis is an `RNN` layer consisting of one `SimpleRNNCell`. However, unlike\nthe underlying `SimpleRNNCell`, the `apply` method of `SimpleRNN` operates\non a sequence of inputs. The shape of the input (not including the first,\nbatch dimension) needs to be at least 2-D, with the first dimension being\ntime steps. For example:\n\n```js\nconst rnn = tf.layers.simpleRNN({units: 8, returnSequences: true});\n\n// Create an input with 10 time steps.\nconst input = tf.input({shape: [10, 20]});\nconst output = rnn.apply(input);\n\nconsole.log(JSON.stringify(output.shape));\n// [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n// same as the sequence length of [tf.input()](#input), due to `returnSequences`: `true`;\n// 3rd dimension is the `SimpleRNNCell`'s number of units.\n```",
              "fileName": "#611",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L611-L613",
              "isFunction": true,
              "displayName": "tf.layers.simpleRNN",
              "urlHash": "layers.simpleRNN"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Recurrent",
                "namespace": "layers",
                "useDocsFrom": "SimpleRNNCell",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "simpleRNNCell",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "units",
                  "documentation": "units: Positive integer, dimensionality of the output space.",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": true
                },
                {
                  "name": "activation",
                  "documentation": "Activation function to use.\nDefault: hyperbolic tangent ('tanh').\nIf you pass `null`,  'linear' activation will be applied.",
                  "type": "'elu'|'hardSigmoid'|'linear'|'relu'|'relu6'|\n    'selu'|'sigmoid'|'softmax'|'softplus'|'softsign'|'tanh'|string",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "useBias",
                  "documentation": "Whether the layer uses a bias vector.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "kernelInitializer",
                  "documentation": "Initializer for the `kernel` weights matrix, used for the linear\ntransformation of the inputs.",
                  "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|[tf.initializers.Initializer](#class:initializers.Initializer)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "recurrentInitializer",
                  "documentation": "Initializer for the `recurrentKernel` weights matrix, used for\nlinear transformation of the recurrent state.",
                  "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|[tf.initializers.Initializer](#class:initializers.Initializer)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "biasInitializer",
                  "documentation": "Initializer for the bias vector.",
                  "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|[tf.initializers.Initializer](#class:initializers.Initializer)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "kernelRegularizer",
                  "documentation": "Regularizer function applied to the `kernel` weights matrix.",
                  "type": "'l1l2'|string|Regularizer",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "recurrentRegularizer",
                  "documentation": "Regularizer function applied to the `recurrent_kernel` weights matrix.",
                  "type": "'l1l2'|string|Regularizer",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "biasRegularizer",
                  "documentation": "Regularizer function applied to the bias vector.",
                  "type": "'l1l2'|string|Regularizer",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "kernelConstraint",
                  "documentation": "Constraint function applied to the `kernel` weights matrix.",
                  "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|[tf.constraints.Constraint](#class:constraints.Constraint)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "recurrentConstraint",
                  "documentation": "Constraint function applied to the `recurrentKernel` weights matrix.",
                  "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|[tf.constraints.Constraint](#class:constraints.Constraint)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "biasConstraint",
                  "documentation": "Constraintfunction applied to the bias vector.",
                  "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|[tf.constraints.Constraint](#class:constraints.Constraint)",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "dropout",
                  "documentation": "Float number between 0 and 1. Fraction of the units to drop for the linear\ntransformation of the inputs.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "recurrentDropout",
                  "documentation": "Float number between 0 and 1. Fraction of the units to drop for the linear\ntransformation of the recurrent state.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.RNNCell](#class:RNNCell)",
              "documentation": "Cell class for `SimpleRNN`.\n\n`SimpleRNNCell` is distinct from the `RNN` subclass `SimpleRNN` in that its\n`apply` method takes the input data of only a single time step and returns\nthe cell's output at the time step, while `SimpleRNN` takes the input data\nover a number of time steps. For example:\n\n```js\nconst cell = tf.layers.simpleRNNCell({units: 2});\nconst input = tf.input({shape: [10]});\nconst output = cell.apply(input);\n\nconsole.log(JSON.stringify(output.shape));\n// [null, 10]: This is the cell's output at a single time step. The 1st\n// dimension is the unknown batch size.\n```\n\nInstance(s) of `SimpleRNNCell` can be used to construct `RNN` layers. The\nmost typical use of this workflow is to combine a number of cells into a\nstacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\nRNN. For example:\n\n```js\nconst cells = [\n   tf.layers.simpleRNNCell({units: 4}),\n   tf.layers.simpleRNNCell({units: 8}),\n];\nconst rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n\n// Create an input with 10 time steps and a length-20 vector at each step.\nconst input = tf.input({shape: [10, 20]});\nconst output = rnn.apply(input);\n\nconsole.log(JSON.stringify(output.shape));\n// [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n// same as the sequence length of [tf.input()](#input), due to `returnSequences`: `true`;\n// 3rd dimension is the last `SimpleRNNCell`'s number of units.\n```\n\nTo create an `RNN` consisting of only *one* `SimpleRNNCell`, use the\n`tf.layers.simpleRNN`.",
              "fileName": "#624",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L624-L626",
              "isFunction": true,
              "displayName": "tf.layers.simpleRNNCell",
              "urlHash": "layers.simpleRNNCell"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Recurrent",
                "namespace": "layers",
                "useDocsFrom": "RNN",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "stackedRNNCells",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "cells",
                  "documentation": "A `Array` of [tf.RNNCell](#class:RNNCell) instances.",
                  "type": "[tf.RNNCell](#class:RNNCell)[]",
                  "optional": false,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.RNNCell](#class:RNNCell)",
              "documentation": "Base class for recurrent layers.\n\nInput shape:\n   3D tensor with shape `[batchSize, timeSteps, inputDim]`.\n\nOutput shape:\n   - if `returnState`, an Array of tensors (i.e., [tf.Tensor](#class:Tensor)s). The first\n     tensor is the output. The remaining tensors are the states at the\n     last time step, each with shape `[batchSize, units]`.\n   - if `returnSequences`, the output will have shape\n     `[batchSize, timeSteps, units]`.\n   - else, the output will have shape `[batchSize, units]`.\n\nMasking:\n   This layer supports masking for input data with a variable number\n   of timesteps. To introduce masks to your data,\n   use an embedding layer with the `mask_zero` parameter\n   set to `True`.\n\nNotes on using statefulness in RNNs:\n   You can set RNN layers to be 'stateful', which means that the states\n   computed for the samples in one batch will be reused as initial states\n   for the samples in the next batch. This assumes a one-to-one mapping\n   between samples in different successive batches.\n\n   To enable statefulness:\n     - specify `stateful: true` in the layer constructor.\n     - specify a fixed batch size for your model, by passing\n       if sequential model:\n         `batchInputShape=[...]` to the first layer in your model.\n       else for functional model with 1 or more Input layers:\n         `batchShape=[...]` to all the first layers in your model.\n       This is the expected shape of your inputs *including the batch size*.\n       It should be a tuple of integers, e.g. `(32, 10, 100)`.\n     - specify `shuffle=False` when calling fit().\n\n   To reset the states of your model, call `.resetStates()` on either\n   a specific layer, or on your entire model.\n\nNote on specifying the initial state of RNNs\n   You can specify the initial state of RNN layers symbolically by\n   calling them with the option `initialState`. The value of\n   `initialState` should be a tensor or list of tensors representing\n   the initial state of the RNN layer.\n\n   You can specify the initial state of RNN layers numerically by\n   calling `resetStates` with the keyword argument `states`. The value of\n   `states` should be a numpy array or list of numpy arrays representing\n   the initial state of the RNN layer.\n\nNote on passing external constants to RNNs\n   You can pass \"external\" constants to the cell using the `constants`\n   keyword argument of `RNN.call` method. This requires that the `cell.call`\n   method accepts the same keyword argument `constants`. Such constants\n   can be used to conditon the cell transformation on additional static inputs\n   (not changing over time), a.k.a an attention mechanism.",
              "fileName": "#650",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L650-L652",
              "isFunction": true,
              "displayName": "tf.layers.stackedRNNCells",
              "urlHash": "layers.stackedRNNCells"
            }
          ]
        },
        {
          "name": "Wrapper",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Wrapper",
                "namespace": "layers",
                "useDocsFrom": "Bidirectional",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "bidirectional",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "layer",
                  "documentation": "The instance of an `RNN` layer to be wrapped.",
                  "type": "RNN",
                  "optional": false,
                  "isConfigParam": true
                },
                {
                  "name": "mergeMode",
                  "documentation": "Mode by which outputs of the forward and backward RNNs are\ncombinied. If `null` or `undefined`, the output will not be\ncombined, they will be returned as an `Array`.",
                  "type": "BidirectionalMergeMode",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "Wrapper",
              "documentation": "",
              "fileName": "#665",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L665-L667",
              "isFunction": true,
              "displayName": "tf.layers.bidirectional",
              "urlHash": "layers.bidirectional"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Wrapper",
                "namespace": "layers",
                "useDocsFrom": "TimeDistributed",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "timeDistributed",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "layer",
                  "documentation": "The layer to be wrapped.",
                  "type": "[tf.layers.Layer](#class:layers.Layer)",
                  "optional": false,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "This wrapper applies a layer to every temporal slice of an input.\n\nThe input should be at least 3D,  and the dimension of the index `1` will be\nconsidered to be the temporal dimension.\n\nConsider a batch of 32 samples, where each sample is a sequence of 10 vectors\nof 16 dimensions. The batch input shape of the layer is then `[32,  10,\n16]`, and the `inputShape`, not including the sample dimension, is\n`[10, 16]`.\n\nYou can then use `TimeDistributed` to apply a `Dense` layer to each of the 10\ntimesteps, independently:\n\n```js\nconst model = tf.sequential();\nmodel.add(tf.layers.timeDistributed({\n   layer: tf.layers.dense({units: 8}),\n   inputShape: [10, 16],\n}));\n\n// Now model.outputShape = [null, 10, 8].\n// The output will then have shape `[32, 10, 8]`.\n\n// In subsequent layers, there is no need for `inputShape`:\nmodel.add(tf.layers.timeDistributed({layer: tf.layers.dense({units: 32})}));\nconsole.log(JSON.stringify(model.outputs[0].shape));\n// Now model.outputShape = [null, 10, 32].\n```\n\nThe output will then have shape `[32, 10, 32]`.\n\n`TimeDistributed` can be used with arbitrary layers, not just `Dense`, for\ninstance a `Conv2D` layer.\n\n```js\nconst model = tf.sequential();\nmodel.add(tf.layers.timeDistributed({\n   layer: tf.layers.conv2d({filters: 64, kernelSize: [3, 3]}),\n   inputShape: [10, 299, 299, 3],\n}));\nconsole.log(JSON.stringify(model.outputs[0].shape));\n```",
              "fileName": "#678",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L678-L680",
              "isFunction": true,
              "displayName": "tf.layers.timeDistributed",
              "urlHash": "layers.timeDistributed"
            }
          ]
        },
        {
          "name": "Classes",
          "symbols": [
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Classes",
                "namespace": "layers"
              },
              "symbolName": "Layer",
              "namespace": "layers",
              "documentation": "A layer is a grouping of operations and weights that can be composed to\ncreate a [tf.Model](#class:Model).\n\nLayers are constructed by using the functions under the\n[tf.layers](#Layers-Basic) namespace.",
              "fileName": "#401",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/engine/topology.ts#L401-L1506",
              "methods": [
                {
                  "docInfo": {
                    "heading": "Models",
                    "subheading": "Classes"
                  },
                  "symbolName": "apply",
                  "paramStr": "(inputs, kwargs?)",
                  "parameters": [
                    {
                      "name": "inputs",
                      "documentation": "a [tf.Tensor](#class:Tensor) or [tf.SymbolicTensor](#class:SymbolicTensor) or an Array of them.",
                      "type": "[tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[]|[tf.SymbolicTensor](#class:SymbolicTensor)|[tf.SymbolicTensor](#class:SymbolicTensor)[]",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "kwargs",
                      "documentation": "Additional keyword arguments to be passed to `call()`.",
                      "type": "Kwargs",
                      "optional": true,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "[tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[]|[tf.SymbolicTensor](#class:SymbolicTensor)|[tf.SymbolicTensor](#class:SymbolicTensor)[]",
                  "documentation": "Builds or executes a `Layer's logic.\n\nWhen called with [tf.Tensor](#class:Tensor)(s), execute the `Layer`s computation and\nreturn Tensor(s). For example:\n\n```js\nconst denseLayer = tf.layers.dense({\n   units: 1,\n   kernelInitializer: 'zeros',\n   useBias: false\n});\n\n// Invoke the layer's apply() method with a [tf.Tensor](#class:Tensor) (with concrete\n// numeric values).\nconst input = tf.ones([2, 2]);\nconst output = denseLayer.apply(input);\n\n// The output's value is expected to be [[0], [0]], due to the fact that\n// the dense layer has a kernel initialized to all-zeros and does not have\n// a bias.\noutput.print();\n```\n\nWhen called with [tf.SymbolicTensor](#class:SymbolicTensor)(s), this will prepare the layer for\nfuture execution.  This entails internal book-keeping on shapes of\nexpected Tensors, wiring layers together, and initializing weights.\n\nCalling `apply` with [tf.SymbolicTensor](#class:SymbolicTensor)s are typically used during the\nbuilding of non-[tf.Sequential](#class:Sequential) models. For example:\n\n```js\nconst flattenLayer = tf.layers.flatten();\nconst denseLayer = tf.layers.dense({units: 1});\n\n// Use tf.layers.input() to obtain a SymbolicTensor as input to apply().\nconst input = tf.input({shape: [2, 2]});\nconst output1 = flattenLayer.apply(input);\n\n// output1.shape is [null, 4]. The first dimension is the undetermined\n// batch size. The second dimension comes from flattening the [2, 2]\n// shape.\nconsole.log(JSON.stringify(output1.shape));\n\n// The output SymbolicTensor of the flatten layer can be used to call\n// the apply() of the dense layer:\nconst output2 = denseLayer.apply(output1);\n\n// output2.shape is [null, 1]. The first dimension is the undetermined\n// batch size. The second dimension matches the number of units of the\n// dense layer.\nconsole.log(JSON.stringify(output2.shape));\n\n// The input and output and be used to construct a model that consists\n// of the flatten and dense layers.\nconst model = tf.model({inputs: input, outputs: output2});\n```",
                  "fileName": "#925",
                  "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/engine/topology.ts#L925-L1068",
                  "isFunction": true,
                  "urlHash": "tf.layers.Layer.apply"
                }
              ],
              "isClass": true,
              "inheritsFrom": "serialization.Serializable",
              "displayName": "tf.layers.Layer",
              "urlHash": "class:layers.Layer"
            },
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Classes"
              },
              "symbolName": "RNNCell",
              "documentation": "An RNNCell layer.",
              "fileName": "#820",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/layers/recurrent.ts#L820-L828",
              "methods": [],
              "isClass": true,
              "inheritsFrom": "Layer",
              "displayName": "tf.RNNCell",
              "urlHash": "class:RNNCell"
            }
          ]
        },
        {
          "name": "Inputs",
          "symbols": [
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Inputs",
                "namespace": "layers",
                "useDocsFrom": "InputLayer",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "inputLayer",
              "namespace": "layers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "inputShape",
                  "documentation": "Input shape, not including the batch axis. ",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "batchSize",
                  "documentation": "Optional input batch size (integer or null). ",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "batchInputShape",
                  "documentation": "Batch input shape, including the batch axis. ",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "dtype",
                  "documentation": "Datatype of the input.  ",
                  "type": "DataType",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "sparse",
                  "documentation": "Whether the placeholder created is meant to be sparse.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "name",
                  "documentation": "Name of the layer. ",
                  "type": "string",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "An input layer is an entry point into a [tf.Model](#class:Model).\n\n`InputLayer` is generated automatically for [tf.Sequential](#class:Sequential) models by specifying\nthe `inputshape` or `batchInputShape` for the first layer.  It should not be\nspecified explicitly.\n\n```js\n// Define a model which simply adds two inputs.\nconst inputA = tf.input({shape: [3]});\nconst inputB = tf.input({shape: [3]});\nconst sum = tf.layers.add().apply([inputA, inputB]);\nconst model = tf.model({inputs: [inputA, inputB], outputs: sum});\nconst batchSize = 2;\nmodel.predict([tf.ones([batchSize, 3]), tf.ones([batchSize, 3])]).print();\n```",
              "fileName": "#42",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L42-L44",
              "isFunction": true,
              "displayName": "tf.layers.inputLayer",
              "urlHash": "layers.inputLayer"
            }
          ]
        },
        {
          "name": "Padding",
          "symbols": [
            {
              "docInfo": {
                "heading": "Layers",
                "subheading": "Padding",
                "namespace": "layers",
                "useDocsFrom": "ZeroPadding2D",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "zeroPadding2d",
              "namespace": "layers",
              "paramStr": "(config?)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "padding",
                  "documentation": "Integer, or `Array` of 2 integers, or `Array` of 2 `Array`s, each of\nwhich is an `Array` of 2 integers.\n- If integer, the same symmetric padding is applied to width and height.\n- If Array` of 2 integers, interpreted as two different symmetric values\n   for height and width:\n   `[symmetricHeightPad, symmetricWidthPad]`.\n- If `Array` of 2 `Array`s, interpreted as:\n   `[[topPad, bottomPad], [leftPad, rightPad]]`.",
                  "type": "number|[number, number]|[[number, number], [number, number]]",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "dataFormat",
                  "documentation": "One of `'channelsLast'` (default) and `'channelsFirst'`.\n\nThe ordering of the dimensions in the inputs.\n`channelsLast` corresponds to inputs with shape\n`[batch, height, width, channels]` while `channelsFirst`\ncorresponds to inputs with shape\n`[batch, channels, height, width]`.",
                  "type": "'channelsFirst'|'channelsLast'",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.layers.Layer](#class:layers.Layer)",
              "documentation": "Zero-padding layer for 2D input (e.g., image).\n\nThis layer can add rows and columns of zeros\nat the top, bottom, left and right side of an image tensor.\n\nInput shape:\n   4D tensor with shape:\n   - If `dataFormat` is `\"channelsLast\"`:\n     `[batch, rows, cols, channels]`\n   - If `data_format` is `\"channels_first\"`:\n     `[batch, channels, rows, cols]`.\n\nOutput shape:\n   4D with shape:\n   - If `dataFormat` is `\"channelsLast\"`:\n     `[batch, paddedRows, paddedCols, channels]`\n    - If `dataFormat` is `\"channelsFirst\"`:\n     `[batch, channels, paddedRows, paddedCols]`.",
              "fileName": "#422",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_layers.ts#L422-L424",
              "isFunction": true,
              "displayName": "tf.layers.zeroPadding2d",
              "urlHash": "layers.zeroPadding2d"
            }
          ]
        }
      ]
    },
    {
      "name": "Operations",
      "description": "",
      "subheadings": [
        {
          "name": "Arithmetic",
          "description": "<p>To perform mathematical computation on Tensors, we use\noperations. Tensors are immutable, so all operations always return\nnew Tensors and never modify input Tensors.</p>",
          "symbols": [
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Arithmetic"
              },
              "symbolName": "add",
              "paramStr": "(a, b)",
              "parameters": [
                {
                  "name": "a",
                  "documentation": "The first [tf.Tensor](#class:Tensor) to add.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "b",
                  "documentation": "The second [tf.Tensor](#class:Tensor) to add. Must have the same type as `a`.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Adds two [tf.Tensor](#class:Tensor)s element-wise, A + B. Supports broadcasting.\n\nWe also expose `addStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 2, 3, 4]);\nconst b = tf.tensor1d([10, 20, 30, 40]);\n\na.add(b).print();  // or tf.add(a, b)\n```\n\n```js\n// Broadcast add a with b.\nconst a = tf.scalar(5);\nconst b = tf.tensor1d([10, 20, 30, 40]);\n\na.add(b).print();  // or tf.add(a, b)\n```",
              "fileName": "#55",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/binary_ops.ts#L55-L84",
              "isFunction": true,
              "displayName": "tf.add",
              "urlHash": "add"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Arithmetic"
              },
              "symbolName": "sub",
              "paramStr": "(a, b)",
              "parameters": [
                {
                  "name": "a",
                  "documentation": "The first [tf.Tensor](#class:Tensor) to subtract from.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "b",
                  "documentation": "The second [tf.Tensor](#class:Tensor) to be subtracted. Must have the same dtype as\n`a`.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Subtracts two [tf.Tensor](#class:Tensor)s element-wise, A - B. Supports broadcasting.\n\nWe also expose `subStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([10, 20, 30, 40]);\nconst b = tf.tensor1d([1, 2, 3, 4]);\n\na.sub(b).print();  // or tf.sub(a, b)\n```\n\n```js\n// Broadcast subtract a with b.\nconst a = tf.tensor1d([10, 20, 30, 40]);\nconst b = tf.scalar(5);\n\na.sub(b).print();  // or tf.sub(a, b)\n```",
              "fileName": "#172",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/binary_ops.ts#L172-L201",
              "isFunction": true,
              "displayName": "tf.sub",
              "urlHash": "sub"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Arithmetic"
              },
              "symbolName": "mul",
              "paramStr": "(a, b)",
              "parameters": [
                {
                  "name": "a",
                  "documentation": "The first tensor to multiply.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "b",
                  "documentation": "The second tensor to multiply. Must have the same dtype as `a`.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Multiplies two [tf.Tensor](#class:Tensor)s element-wise, A * B. Supports broadcasting.\n\nWe also expose `mulStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 2, 3, 4]);\nconst b = tf.tensor1d([2, 3, 4, 5]);\n\na.mul(b).print();  // or tf.mul(a, b)\n```\n\n```js\n// Broadcast mul a with b.\nconst a = tf.tensor1d([1, 2, 3, 4]);\nconst b = tf.scalar(5);\n\na.mul(b).print();  // or tf.mul(a, b)\n```",
              "fileName": "#315",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/binary_ops.ts#L315-L344",
              "isFunction": true,
              "displayName": "tf.mul",
              "urlHash": "mul"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Arithmetic"
              },
              "symbolName": "div",
              "paramStr": "(a, b)",
              "parameters": [
                {
                  "name": "a",
                  "documentation": "The first tensor as the numerator.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "b",
                  "documentation": "The second tensor as the denominator. Must have the same dtype as\n`a`.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Divides two [tf.Tensor](#class:Tensor)s element-wise, A / B. Supports broadcasting.\n\nWe also expose `divStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 4, 9, 16]);\nconst b = tf.tensor1d([1, 2, 3, 4]);\n\na.div(b).print();  // or tf.div(a, b)\n```\n\n```js\n// Broadcast div a with b.\nconst a = tf.tensor1d([2, 4, 6, 8]);\nconst b = tf.scalar(2);\n\na.div(b).print();  // or tf.div(a, b)\n```",
              "fileName": "#386",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/binary_ops.ts#L386-L421",
              "isFunction": true,
              "displayName": "tf.div",
              "urlHash": "div"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Arithmetic"
              },
              "symbolName": "addN",
              "paramStr": "(tensors)",
              "parameters": [
                {
                  "name": "tensors",
                  "documentation": "A list of tensors with the same shape and dtype.",
                  "type": "Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Adds a list of [tf.Tensor](#class:Tensor)s element-wise, each with the same shape and dtype.\n\n```js\nconst a = tf.tensor1d([1, 2]);\nconst b = tf.tensor1d([3, 4]);\nconst c = tf.tensor1d([5, 6]);\n\ntf.addN([a, b, c]).print();\n```",
              "fileName": "#99",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/binary_ops.ts#L99-L132",
              "isFunction": true,
              "displayName": "tf.addN",
              "urlHash": "addN"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Arithmetic"
              },
              "symbolName": "floorDiv",
              "paramStr": "(a, b)",
              "parameters": [
                {
                  "name": "a",
                  "documentation": "The first tensor as the numerator.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "b",
                  "documentation": "The second tensor as the denominator. Must have the same dtype as\n`a`.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Divides two [tf.Tensor](#class:Tensor)s element-wise, A / B. Supports broadcasting.\nThe result is rounded with floor function.\n\n\n```js\nconst a = tf.tensor1d([1, 4, 9, 16]);\nconst b = tf.tensor1d([1, 2, 3, 4]);\n\na.floorDiv(b).print();  // or tf.div(a, b)\n```\n\n```js\n// Broadcast div a with b.\nconst a = tf.tensor1d([2, 4, 6, 8]);\nconst b = tf.scalar(2);\n\na.floorDiv(b).print();  // or tf.floorDiv(a, b)\n```",
              "fileName": "#448",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/binary_ops.ts#L448-L478",
              "isFunction": true,
              "displayName": "tf.floorDiv",
              "urlHash": "floorDiv"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Arithmetic"
              },
              "symbolName": "maximum",
              "paramStr": "(a, b)",
              "parameters": [
                {
                  "name": "a",
                  "documentation": "The first tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "b",
                  "documentation": "The second tensor. Must have the same type as `a`.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Returns the max of a and b (`a > b ? a : b`) element-wise.\nSupports broadcasting.\n\nWe also expose `maximumStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 4, 3, 16]);\nconst b = tf.tensor1d([1, 2, 9, 4]);\n\na.maximum(b).print();  // or tf.maximum(a, b)\n```\n\n```js\n// Broadcast maximum a with b.\nconst a = tf.tensor1d([2, 4, 6, 8]);\nconst b = tf.scalar(5);\n\na.maximum(b).print();  // or tf.maximum(a, b)\n```",
              "fileName": "#646",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/binary_ops.ts#L646-L666",
              "isFunction": true,
              "displayName": "tf.maximum",
              "urlHash": "maximum"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Arithmetic"
              },
              "symbolName": "minimum",
              "paramStr": "(a, b)",
              "parameters": [
                {
                  "name": "a",
                  "documentation": "The first tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "b",
                  "documentation": "The second tensor. Must have the same type as `a`.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Returns the min of a and b (`a < b ? a : b`) element-wise.\nSupports broadcasting.\n\nWe also expose `minimumStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 4, 3, 16]);\nconst b = tf.tensor1d([1, 2, 9, 4]);\n\na.minimum(b).print();  // or tf.minimum(a, b)\n```\n\n```js\n// Broadcast minimum a with b.\nconst a = tf.tensor1d([2, 4, 6, 8]);\nconst b = tf.scalar(5);\n\na.minimum(b).print();  // or tf.minimum(a, b)\n```",
              "fileName": "#586",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/binary_ops.ts#L586-L606",
              "isFunction": true,
              "displayName": "tf.minimum",
              "urlHash": "minimum"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Arithmetic"
              },
              "symbolName": "mod",
              "paramStr": "(a, b)",
              "parameters": [
                {
                  "name": "a",
                  "documentation": "The first tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "b",
                  "documentation": "The second tensor. Must have the same type as `a`.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Returns the mod of a and b element-wise.\n`floor(x / y) * y + mod(x, y) = x`\nSupports broadcasting.\n\nWe also expose `modStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 4, 3, 16]);\nconst b = tf.tensor1d([1, 2, 9, 4]);\n\na.mod(b).print();  // or tf.mod(a, b)\n```\n\n```js\n// Broadcast a mod b.\nconst a = tf.tensor1d([2, 4, 6, 8]);\nconst b = tf.scalar(5);\n\na.mod(b).print();  // or tf.mod(a, b)\n```",
              "fileName": "#519",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/binary_ops.ts#L519-L546",
              "isFunction": true,
              "displayName": "tf.mod",
              "urlHash": "mod"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Arithmetic"
              },
              "symbolName": "pow",
              "paramStr": "(base, exp)",
              "parameters": [
                {
                  "name": "base",
                  "documentation": "The base [tf.Tensor](#class:Tensor) to pow element-wise.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "exp",
                  "documentation": "The exponent [tf.Tensor](#class:Tensor) to pow element-wise.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the power of one [tf.Tensor](#class:Tensor) to another. Supports broadcasting.\n\nGiven a [tf.Tensor](#class:Tensor) x and a [tf.Tensor](#class:Tensor) y, this operation computes x^y for\ncorresponding elements in x and y. The result's dtype will be the upcasted\ntype of the `base` and [tf.exp()](#exp) dtypes.\n\n```js\nconst a = tf.tensor([[2, 3], [4, 5]])\nconst b = tf.tensor([[1, 2], [3, 0]]).toInt();\n\na.pow(b).print();  // or tf.pow(a, b)\n```\n\n```js\nconst a = tf.tensor([[1, 2], [3, 4]])\nconst b = tf.tensor(2).toInt();\n\na.pow(b).print();  // or tf.pow(a, b)\n```\nWe also expose `powStrict` which has the same signature as this op and\nasserts that `base` and [tf.exp()](#exp) are the same shape (does not broadcast).",
              "fileName": "#244",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/binary_ops.ts#L244-L275",
              "isFunction": true,
              "displayName": "tf.pow",
              "urlHash": "pow"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Arithmetic"
              },
              "symbolName": "squaredDifference",
              "paramStr": "(a, b)",
              "parameters": [
                {
                  "name": "a",
                  "documentation": "The first tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "b",
                  "documentation": "The second tensor. Must have the same type as `a`.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Returns (a - b) * (a - b) element-wise.\nSupports broadcasting.\n\nWe also expose `squaredDifferenceStrict` which has the same signature as\nthis op and asserts that `a` and `b` are the same shape (does not\nbroadcast).\n\n```js\nconst a = tf.tensor1d([1, 4, 3, 16]);\nconst b = tf.tensor1d([1, 2, 9, 4]);\n\na.squaredDifference(b).print();  // or tf.squaredDifference(a, b)\n```\n\n```js\n// Broadcast squared difference  a with b.\nconst a = tf.tensor1d([2, 4, 6, 8]);\nconst b = tf.scalar(5);\n\na.squaredDifference(b).print();  // or tf.squaredDifference(a, b)\n```",
              "fileName": "#707",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/binary_ops.ts#L707-L722",
              "isFunction": true,
              "displayName": "tf.squaredDifference",
              "urlHash": "squaredDifference"
            }
          ]
        },
        {
          "name": "Basic math",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "abs",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input [tf.Tensor](#class:Tensor).",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes absolute value element-wise: `abs(x)`\n\n```js\nconst x = tf.tensor1d([-1, 2, -3, 4]);\n\nx.abs().print();  // or tf.abs(x)\n```",
              "fileName": "#310",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L310-L317",
              "isFunction": true,
              "displayName": "tf.abs",
              "urlHash": "abs"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "acos",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes acos of the input [tf.Tensor](#class:Tensor) element-wise: `acos(x)`\n\n```js\nconst x = tf.tensor1d([0, 1, -1, .7]);\n\nx.acos().print();  // or tf.acos(x)\n```",
              "fileName": "#509",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L509-L519",
              "isFunction": true,
              "displayName": "tf.acos",
              "urlHash": "acos"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "acosh",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the inverse hyperbolic cos of the input [tf.Tensor](#class:Tensor) element-wise:\n`acosh(x)`\n\n```js\nconst x = tf.tensor1d([10, 1, 3, 5.7]);\n\nx.acosh().print();  // or tf.acosh(x)\n```",
              "fileName": "#638",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L638-L647",
              "isFunction": true,
              "displayName": "tf.acosh",
              "urlHash": "acosh"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "asin",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes asin of the input [tf.Tensor](#class:Tensor) element-wise: `asin(x)`\n\n```js\nconst x = tf.tensor1d([0, 1, -1, .7]);\n\nx.asin().print();  // or tf.asin(x)\n```",
              "fileName": "#487",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L487-L496",
              "isFunction": true,
              "displayName": "tf.asin",
              "urlHash": "asin"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "asinh",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes inverse hyperbolic sin of the input [tf.Tensor](#class:Tensor) element-wise:\n`asinh(x)`\n\n```js\nconst x = tf.tensor1d([0, 1, -1, .7]);\n\nx.asinh().print();  // or tf.asinh(x)\n```",
              "fileName": "#615",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L615-L624",
              "isFunction": true,
              "displayName": "tf.asinh",
              "urlHash": "asinh"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "atan",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes atan of the input [tf.Tensor](#class:Tensor) element-wise: `atan(x)`\n\n```js\nconst x = tf.tensor1d([0, 1, -1, .7]);\n\nx.atan().print();  // or tf.atan(x)\n```",
              "fileName": "#532",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L532-L539",
              "isFunction": true,
              "displayName": "tf.atan",
              "urlHash": "atan"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "atan2",
              "paramStr": "(a, b)",
              "parameters": [
                {
                  "name": "a",
                  "documentation": "The first tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "b",
                  "documentation": "The second tensor. Must have the same dtype as `a`.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes arctangent of [tf.Tensor](#class:Tensor)s a / b element-wise: `atan2(a, b)`.\nSupports broadcasting.\n\n```js\nconst a = tf.tensor1d([1.0, 1.0, -1.0, .7]);\nconst b = tf.tensor1d([2.0, 13.0, 3.5, .21]);\n\ntf.atan2(a, b).print()\n```",
              "fileName": "#755",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/binary_ops.ts#L755-L787",
              "isFunction": true,
              "displayName": "tf.atan2",
              "urlHash": "atan2"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "atanh",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes inverse hyperbolic tan of the input [tf.Tensor](#class:Tensor) element-wise:\n`atanh(x)`\n\n```js\nconst x = tf.tensor1d([0, .1, -.1, .7]);\n\nx.atanh().print();  // or tf.atanh(x)\n```",
              "fileName": "#661",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L661-L668",
              "isFunction": true,
              "displayName": "tf.atanh",
              "urlHash": "atanh"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "ceil",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input Tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes ceiling of input [tf.Tensor](#class:Tensor) element-wise: `ceil(x)`\n\n```js\nconst x = tf.tensor1d([.6, 1.1, -3.3]);\n\nx.ceil().print();  // or tf.ceil(x)\n```",
              "fileName": "#59",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L59-L67",
              "isFunction": true,
              "displayName": "tf.ceil",
              "urlHash": "ceil"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "clipByValue",
              "paramStr": "(x, clipValueMin, clipValueMax)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "clipValueMin",
                  "documentation": "Lower-bound of range to be clipped to.",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "clipValueMax",
                  "documentation": "Upper-bound of range to be clipped to.",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Clips values element-wise. `max(min(x, clipValueMax), clipValueMin)`\n\n```js\nconst x = tf.tensor1d([-1, 2, -3, 4]);\n\nx.clipByValue(-2, 3).print();  // or tf.clipByValue(x, -2, 3)\n```",
              "fileName": "#332",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L332-L350",
              "isFunction": true,
              "displayName": "tf.clipByValue",
              "urlHash": "clipByValue"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "cos",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes cos of the input [tf.Tensor](#class:Tensor) element-wise: `cos(x)`\n\n```js\nconst x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n\nx.cos().print();  // or tf.cos(x)\n```",
              "fileName": "#447",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L447-L454",
              "isFunction": true,
              "displayName": "tf.cos",
              "urlHash": "cos"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "cosh",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes hyperbolic cos of the input [tf.Tensor](#class:Tensor) element-wise: `cosh(x)`\n\n```js\nconst x = tf.tensor1d([0, 1, -1, .7]);\n\nx.cosh().print();  // or tf.cosh(x)\n```",
              "fileName": "#572",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L572-L579",
              "isFunction": true,
              "displayName": "tf.cosh",
              "urlHash": "cosh"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "elu",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes exponential linear element-wise: `x > 0 ? e ^ x - 1 : 0`.\n\n```js\nconst x = tf.tensor1d([-1, 1, -3, 2]);\n\nx.elu().print();  // or tf.elu(x)\n```",
              "fileName": "#64",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/relu_ops.ts#L64-L76",
              "isFunction": true,
              "displayName": "tf.elu",
              "urlHash": "elu"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "erf",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes gause error function of the input [tf.Tensor](#class:Tensor) element-wise:\n`erf(x)`\n\n```js\nconst x = tf.tensor1d([0, .1, -.1, .7]);\n\nx.erf().print(); // or tf.erf(x);\n```",
              "fileName": "#682",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L682-L699",
              "isFunction": true,
              "displayName": "tf.erf",
              "urlHash": "erf"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "exp",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes exponential of the input [tf.Tensor](#class:Tensor) element-wise. `e ^ x`\n\n```js\nconst x = tf.tensor1d([1, 2, -3]);\n\nx.exp().print();  // or tf.exp(x)\n```",
              "fileName": "#145",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L145-L154",
              "isFunction": true,
              "displayName": "tf.exp",
              "urlHash": "exp"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "expm1",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes exponential of the input [tf.Tensor](#class:Tensor) minus one element-wise.\n`e ^ x - 1`\n\n```js\nconst x = tf.tensor1d([1, 2, -3]);\n\nx.expm1().print();  // or tf.expm1(x)\n```",
              "fileName": "#168",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L168-L175",
              "isFunction": true,
              "displayName": "tf.expm1",
              "urlHash": "expm1"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "floor",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes floor of input [tf.Tensor](#class:Tensor) element-wise: `floor(x)`.\n\n```js\nconst x = tf.tensor1d([.6, 1.1, -3.3]);\n\nx.floor().print();  // or tf.floor(x)\n```",
              "fileName": "#80",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L80-L89",
              "isFunction": true,
              "displayName": "tf.floor",
              "urlHash": "floor"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "leakyRelu",
              "paramStr": "(x, alpha?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "alpha",
                  "documentation": "The scaling factor for negative values, defaults to 0.2.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes leaky rectified linear element-wise.\n\nSee\n[http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf](\n     http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf)\n\n```js\nconst x = tf.tensor1d([-1, 2, -3, 4]);\n\nx.leakyRelu(0.1).print();  // or tf.leakyRelu(x, 0.1)\n```",
              "fileName": "#128",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/relu_ops.ts#L128-L131",
              "isFunction": true,
              "displayName": "tf.leakyRelu",
              "urlHash": "leakyRelu"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "log",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes natural logarithm of the input [tf.Tensor](#class:Tensor) element-wise: `ln(x)`\n\n```js\nconst x = tf.tensor1d([1, 2, Math.E]);\n\nx.log().print();  // or tf.log(x)\n```",
              "fileName": "#188",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L188-L195",
              "isFunction": true,
              "displayName": "tf.log",
              "urlHash": "log"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "log1p",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes natural logarithm of the input [tf.Tensor](#class:Tensor) plus one\nelement-wise: `ln(1 + x)`\n\n```js\nconst x = tf.tensor1d([1, 2, Math.E - 1]);\n\nx.log1p().print();  // or tf.log1p(x)\n```",
              "fileName": "#209",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L209-L216",
              "isFunction": true,
              "displayName": "tf.log1p",
              "urlHash": "log1p"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "logSigmoid",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes log sigmoid of the input [tf.Tensor](#class:Tensor) element-wise:\n`logSigmoid(x)`. For numerical stability, we use `-tf.softplus(-x)`.\n\n```js\nconst x = tf.tensor1d([0, 1, -1, .7]);\n\nx.logSigmoid().print();  // or tf.logSigmoid(x)\n```",
              "fileName": "#386",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L386-L394",
              "isFunction": true,
              "displayName": "tf.logSigmoid",
              "urlHash": "logSigmoid"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "neg",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes `-1 * x` element-wise.\n\n```js\nconst x = tf.tensor2d([1, 2, -2, 0], [2, 2]);\n\nx.neg().print();  // or tf.neg(x)\n```",
              "fileName": "#39",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L39-L46",
              "isFunction": true,
              "displayName": "tf.neg",
              "urlHash": "neg"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "prelu",
              "paramStr": "(x, alpha)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "alpha",
                  "documentation": "Scaling factor for negative values.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes leaky rectified linear element-wise with parametric alphas.\n\n`x < 0 ? alpha * x : f(x) = x`\n\n```js\nconst x = tf.tensor1d([-1, 2, -3, 4]);\nconst alpha = tf.scalar(0.1);\n\nx.prelu(alpha).print();  // or tf.prelu(x, alpha)\n```",
              "fileName": "#148",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/relu_ops.ts#L148-L154",
              "isFunction": true,
              "displayName": "tf.prelu",
              "urlHash": "prelu"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "reciprocal",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes reciprocal of x element-wise: `1 / x`\n\n```js\nconst x = tf.tensor1d([0, 1, 2]);\n\nx.reciprocal().print();  // or tf.reciprocal(x)\n```",
              "fileName": "#290",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L290-L297",
              "isFunction": true,
              "displayName": "tf.reciprocal",
              "urlHash": "reciprocal"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "relu",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor. If the dtype is `bool`, the output dtype will be\n`int32'.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes rectified linear element-wise: `max(x, 0)`.\n\n```js\nconst x = tf.tensor1d([-1, 2, -3, 4]);\n\nx.relu().print();  // or tf.relu(x)\n```",
              "fileName": "#40",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/relu_ops.ts#L40-L51",
              "isFunction": true,
              "displayName": "tf.relu",
              "urlHash": "relu"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "round",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes round of input [tf.Tensor](#class:Tensor) element-wise: `round(x)`.\nIt implements banker's rounding.\n\n```js\nconst x = tf.tensor1d([.6, 1.1, -3.3]);\n\nx.round().print();  // or tf.round(x)\n```",
              "fileName": "#123",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L123-L132",
              "isFunction": true,
              "displayName": "tf.round",
              "urlHash": "round"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "rsqrt",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes reciprocal of square root of the input [tf.Tensor](#class:Tensor) element-wise:\n`y = 1 / sqrt(x)`\n\n```js\nconst x = tf.tensor1d([1, 2, 4, -1]);\n\nx.rsqrt().print();  // or tf.rsqrt(x)\n```",
              "fileName": "#250",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L250-L257",
              "isFunction": true,
              "displayName": "tf.rsqrt",
              "urlHash": "rsqrt"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "selu",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes scaled exponential linear element-wise.\n\n`x < 0 ? scale * alpha * (exp(x) - 1) : x`\n\n```js\nconst x = tf.tensor1d([-1, 2, -3, 4]);\n\nx.selu().print();  // or tf.selu(x)\n```",
              "fileName": "#91",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/relu_ops.ts#L91-L110",
              "isFunction": true,
              "displayName": "tf.selu",
              "urlHash": "selu"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "sigmoid",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes sigmoid element-wise, `1 / (1 + exp(-x))`\n\n```js\nconst x = tf.tensor1d([0, -1, 2, -3]);\n\nx.sigmoid().print();  // or tf.sigmoid(x)\n```",
              "fileName": "#363",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L363-L372",
              "isFunction": true,
              "displayName": "tf.sigmoid",
              "urlHash": "sigmoid"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "sign",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input Tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Returns an element-wise indication of the sign of a number.\n\n```js\nconst x = tf.tensor1d([.6, 1.1, -3.3, NaN, 0]);\n\nx.sign().print();  // or tf.sign(x)\n```",
              "fileName": "#102",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L102-L109",
              "isFunction": true,
              "displayName": "tf.sign",
              "urlHash": "sign"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "sin",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes sin of the input Tensor element-wise: `sin(x)`\n\n```js\nconst x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n\nx.sin().print();  // or tf.sin(x)\n```",
              "fileName": "#427",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L427-L434",
              "isFunction": true,
              "displayName": "tf.sin",
              "urlHash": "sin"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "sinh",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes hyperbolic sin of the input [tf.Tensor](#class:Tensor) element-wise: `sinh(x)`\n\n```js\nconst x = tf.tensor1d([0, 1, -1, .7]);\n\nx.sinh().print();  // or tf.sinh(x)\n```",
              "fileName": "#552",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L552-L559",
              "isFunction": true,
              "displayName": "tf.sinh",
              "urlHash": "sinh"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "softplus",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes softplus of the input [tf.Tensor](#class:Tensor) element-wise: `log(exp(x) + 1)`\n\n```js\nconst x = tf.tensor1d([0, 1, -1, .7]);\n\nx.softplus().print();  // or tf.softplus(x)\n```",
              "fileName": "#407",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L407-L414",
              "isFunction": true,
              "displayName": "tf.softplus",
              "urlHash": "softplus"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "sqrt",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes square root of the input [tf.Tensor](#class:Tensor) element-wise: `y = sqrt(x)`\n\n```js\nconst x = tf.tensor1d([1, 2, 4, -1]);\n\nx.sqrt().print();  // or tf.sqrt(x)\n```",
              "fileName": "#229",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L229-L236",
              "isFunction": true,
              "displayName": "tf.sqrt",
              "urlHash": "sqrt"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "square",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input Tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes square of `x` element-wise: `x ^ 2`\n\n```js\nconst x = tf.tensor1d([1, 2, Math.sqrt(2), -1]);\n\nx.square().print();  // or tf.square(x)\n```",
              "fileName": "#270",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L270-L277",
              "isFunction": true,
              "displayName": "tf.square",
              "urlHash": "square"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "step",
              "paramStr": "(x, alpha?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "alpha",
                  "documentation": "The gradient when input is negative.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes step of the input [tf.Tensor](#class:Tensor) element-wise: `x > 0 ? 1 : alpha * x`\n\n```js\nconst x = tf.tensor1d([0, 2, -1, -3]);\n\nx.step(.5).print();  // or tf.step(x, .5)\n```",
              "fileName": "#713",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L713-L722",
              "isFunction": true,
              "displayName": "tf.step",
              "urlHash": "step"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "tan",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes tan of the input [tf.Tensor](#class:Tensor) element-wise, `tan(x)`\n\n```js\nconst x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n\nx.tan().print();  // or tf.tan(x)\n```",
              "fileName": "#467",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L467-L474",
              "isFunction": true,
              "displayName": "tf.tan",
              "urlHash": "tan"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Basic math"
              },
              "symbolName": "tanh",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes hyperbolic tangent of the input [tf.Tensor](#class:Tensor) element-wise: `tanh(x)`\n\n```js\nconst x = tf.tensor1d([0, 1, -1, 70]);\n\nx.tanh().print();  // or tf.tanh(x)\n```",
              "fileName": "#592",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/unary_ops.ts#L592-L601",
              "isFunction": true,
              "displayName": "tf.tanh",
              "urlHash": "tanh"
            }
          ]
        },
        {
          "name": "Matrices",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Matrices"
              },
              "symbolName": "dot",
              "paramStr": "(t1, t2)",
              "parameters": [
                {
                  "name": "t1",
                  "documentation": "The first tensor in the dot operation.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "t2",
                  "documentation": "The second tensor in the dot operation.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the dot product of two matrices and/or vectors, t1 and t2.\n\n```js\nconst a = tf.tensor1d([1, 2]);\nconst b = tf.tensor2d([[1, 2], [3, 4]]);\nconst c = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);\n\na.dot(b).print();  // or tf.dot(a, b)\nb.dot(a).print();\nb.dot(c).print();\n```",
              "fileName": "#158",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/matmul.ts#L158-L183",
              "isFunction": true,
              "displayName": "tf.dot",
              "urlHash": "dot"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Matrices"
              },
              "symbolName": "matMul",
              "paramStr": "(a, b, transposeA?, transposeB?)",
              "parameters": [
                {
                  "name": "a",
                  "documentation": "First matrix in dot product operation.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "b",
                  "documentation": "Second matrix in dot product operation.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "transposeA",
                  "documentation": "If true, `a` is transposed before multiplication.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "transposeB",
                  "documentation": "If true, `b` is transposed before multiplication.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the dot product of two matrices, A * B. These must be matrices.\n\n```js\nconst a = tf.tensor2d([1, 2], [1, 2]);\nconst b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\na.matMul(b).print();  // or tf.matMul(a, b)\n```",
              "fileName": "#40",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/matmul.ts#L40-L114",
              "isFunction": true,
              "displayName": "tf.matMul",
              "urlHash": "matMul"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Matrices"
              },
              "symbolName": "norm",
              "paramStr": "(x, ord?, axis?, keepDims?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input array.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "ord",
                  "documentation": "Optional. Order of the norm. Supported norm types are\nfollowing:\n\n| ord        | norm for matrices         | norm for vectors\n|------------|---------------------------|---------------------\n|'euclidean' |Frobenius norm             |2-norm\n|'fro'       |Frobenius norm\t           |\n|Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))\n|-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))\n|1           |max(sum(abs(x), axis=0))   |sum(abs(x))\n|2           |                           |sum(abs(x)^2)^1/2*",
                  "type": "number|'euclidean'|'fro'",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "Optional. If axis is null (the default), the input is\nconsidered a vector and a single vector norm is computed over the entire\nset of values in the Tensor, i.e. norm(x, ord) is equivalent\nto norm(x.reshape([-1]), ord). If axis is a integer, the input\nis considered a batch of vectors, and axis determines the axis in x\nover which to compute vector norms. If axis is a 2-tuple of integer it is\nconsidered a batch of matrices and axis determines the axes in NDArray\nover which to compute a matrix norm.",
                  "type": "number|number[]",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "keepDims",
                  "documentation": "Optional. If true, the norm have the same dimensionality\nas the input.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the norm of scalar, vectors, and matrices.\nThis function can compute several different vector norms (the 1-norm, the\nEuclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)\nand matrix norms (Frobenius, 1-norm, and inf-norm).\n\n```js\nconst x = tf.tensor1d([1, 2, 3, 4]);\n\nx.norm().print();  // or tf.norm(x)\n```",
              "fileName": "#62",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/norm.ts#L62-L74",
              "isFunction": true,
              "displayName": "tf.norm",
              "urlHash": "norm"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Matrices"
              },
              "symbolName": "outerProduct",
              "paramStr": "(v1, v2)",
              "parameters": [
                {
                  "name": "v1",
                  "documentation": "The first vector in the outer product operation.",
                  "type": "[tf.Tensor1D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "v2",
                  "documentation": "The second vector in the outer product operation.",
                  "type": "[tf.Tensor1D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor2D](#class:Tensor)",
              "documentation": "Computes the outer product of two vectors, v1 and v2.\n\n```js\nconst a = tf.tensor1d([1, 2, 3]);\nconst b = tf.tensor1d([3, 4, 5]);\n\ntf.outerProduct(a, b).print();\n```",
              "fileName": "#129",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/matmul.ts#L129-L140",
              "isFunction": true,
              "displayName": "tf.outerProduct",
              "urlHash": "outerProduct"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Matrices"
              },
              "symbolName": "transpose",
              "paramStr": "(x, perm?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The tensor to transpose.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "perm",
                  "documentation": "The permutation of the dimensions of a.",
                  "type": "number[]",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Transposes the [tf.Tensor](#class:Tensor). Permutes the dimensions according to `perm`.\n\nThe returned [tf.Tensor](#class:Tensor)'s dimension `i` will correspond to the input\ndimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,\nwhere `n` is the rank of the input [tf.Tensor](#class:Tensor). Hence by default, this\noperation performs a regular matrix transpose on 2-D input [tf.Tensor](#class:Tensor)s.\n\n```js\nconst a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\n\na.transpose().print();  // or tf.transpose(a)\n```",
              "fileName": "#44",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/transpose.ts#L44-L71",
              "isFunction": true,
              "displayName": "tf.transpose",
              "urlHash": "transpose"
            }
          ]
        },
        {
          "name": "Convolution",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Convolution"
              },
              "symbolName": "avgPool",
              "paramStr": "(x, filterSize, strides, pad, dimRoundingMode?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor, of rank 4 or rank 3 of shape\n`[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.",
                  "type": "[tf.Tensor3D](#class:Tensor)|[tf.Tensor4D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "filterSize",
                  "documentation": "The filter size, a tuple `[filterHeight, filterWidth]`.",
                  "type": "[number, number]|number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "strides",
                  "documentation": "The strides of the pooling: `[strideHeight, strideWidth]`.",
                  "type": "[number, number]|number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "pad",
                  "documentation": "The type of padding algorithm:\n- `same` and stride 1: output will be of same size as input,\nregardless of filter size.\n- `valid`: output will be smaller than input if filter is larger\nthan 1x1.\n- For more info, see this guide:\n[https://www.tensorflow.org/api_guides/python/nn#Convolution](\nhttps://www.tensorflow.org/api_guides/python/nn#Convolution)",
                  "type": "'valid'|'same'|number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "dimRoundingMode",
                  "documentation": "The rounding mode used when computing output\ndimensions if pad is a number. If none is provided, it will not round\nand error if the output is of fractional size.",
                  "type": "'floor'|'round'|'ceil'",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor3D](#class:Tensor)|[tf.Tensor4D](#class:Tensor)",
              "documentation": "Computes the 2D average pooling of an image.",
              "fileName": "#106",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/pool.ts#L106-L142",
              "isFunction": true,
              "displayName": "tf.avgPool",
              "urlHash": "avgPool"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Convolution"
              },
              "symbolName": "conv1d",
              "paramStr": "(x, filter, stride, pad, dataFormat?, dilation?, dimRoundingMode?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor, of rank 3 or rank 2, of shape\n`[batch, width, inChannels]`. If rank 2, batch of 1 is assumed.",
                  "type": "[tf.Tensor2D](#class:Tensor)|[tf.Tensor3D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "filter",
                  "documentation": "The filter, rank 3, of shape\n`[filterWidth, inDepth, outDepth]`.",
                  "type": "[tf.Tensor3D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "stride",
                  "documentation": "The number of entries by which the filter is moved right at\neach step.",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "pad",
                  "documentation": "The type of padding algorithm.\n- `same` and stride 1: output will be of same size as input,\nregardless of filter size.\n- `valid`: output will be smaller than input if filter is larger\nthan 1x1.\n- For more info, see this guide:\n[https://www.tensorflow.org/api_guides/python/nn#Convolution](\nhttps://www.tensorflow.org/api_guides/python/nn#Convolution)",
                  "type": "'valid'|'same'|number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "dataFormat",
                  "documentation": "An optional string from \"NWC\", \"NCW\". Defaults to \"NWC\",\nthe data is stored in the order of [batch, in_width, in_channels]. Only\n\"NWC\" is currently supported.",
                  "type": "'NWC'|'NCW'",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "dilation",
                  "documentation": "The dilation rate in which we sample input values in\natrous convolution. Defaults to `1`. If it is greater than 1, then\nstride must be `1`.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "dimRoundingMode",
                  "documentation": "The rounding mode used when computing output\ndimensions if pad is a number. If none is provided, it will not round\nand error if the output is of fractional size.",
                  "type": "'floor'|'round'|'ceil'",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor2D](#class:Tensor)|[tf.Tensor3D](#class:Tensor)",
              "documentation": "Computes a 1D convolution over the input x.",
              "fileName": "#55",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/conv.ts#L55-L112",
              "isFunction": true,
              "displayName": "tf.conv1d",
              "urlHash": "conv1d"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Convolution"
              },
              "symbolName": "conv2d",
              "paramStr": "(x, filter, strides, pad, dataFormat?, dilations?, dimRoundingMode?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor, of rank 4 or rank 3, of shape\n`[batch, height, width, inChannels]`. If rank 3, batch of 1 is\nassumed.",
                  "type": "[tf.Tensor3D](#class:Tensor)|[tf.Tensor4D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "filter",
                  "documentation": "The filter, rank 4, of shape\n`[filterHeight, filterWidth, inDepth, outDepth]`.",
                  "type": "[tf.Tensor4D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "strides",
                  "documentation": "The strides of the convolution: `[strideHeight,\nstrideWidth]`.",
                  "type": "[number, number]|number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "pad",
                  "documentation": "The type of padding algorithm.\n- `same` and stride 1: output will be of same size as input,\nregardless of filter size.\n- `valid`: output will be smaller than input if filter is larger\nthan 1x1.\n- For more info, see this guide:\n[https://www.tensorflow.org/api_guides/python/nn#Convolution](\nhttps://www.tensorflow.org/api_guides/python/nn#Convolution)",
                  "type": "'valid'|'same'|number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "dataFormat",
                  "documentation": ": An optional string from: \"NHWC\", \"NCHW\". Defaults to\n\"NHWC\". Specify the data format of the input and output data. With the\ndefault format \"NHWC\", the data is stored in the order of: [batch,\nheight, width, channels]. Only \"NHWC\" is currently supported.",
                  "type": "'NHWC'|'NCHW'",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "dilations",
                  "documentation": "The dilation rates: `[dilationHeight, dilationWidth]`\nin which we sample input values across the height and width dimensions\nin atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single\nnumber, then `dilationHeight == dilationWidth`. If it is greater than\n1, then all values of `strides` must be 1.",
                  "type": "[number, number]|number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "dimRoundingMode",
                  "documentation": "The rounding mode used when computing output\ndimensions if pad is a number. If none is provided, it will not round\nand error if the output is of fractional size.",
                  "type": "'floor'|'round'|'ceil'",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor3D](#class:Tensor)|[tf.Tensor4D](#class:Tensor)",
              "documentation": "Computes a 2D convolution over the input x.",
              "fileName": "#146",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/conv.ts#L146-L222",
              "isFunction": true,
              "displayName": "tf.conv2d",
              "urlHash": "conv2d"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Convolution"
              },
              "symbolName": "conv2dTranspose",
              "paramStr": "(x, filter, outputShape, strides, pad, dimRoundingMode?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input image, of rank 4 or rank 3, of shape\n`[batch, height, width, inDepth]`. If rank 3, batch of 1 is assumed.",
                  "type": "[tf.Tensor3D](#class:Tensor)|[tf.Tensor4D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "filter",
                  "documentation": "The filter, rank 4, of shape\n`[filterHeight, filterWidth, outDepth, inDepth]`.\n`inDepth` must match `inDepth` in `x`.",
                  "type": "[tf.Tensor4D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "outputShape",
                  "documentation": "Output shape, of rank 4 or rank 3:\n`[batch, height, width, outDepth]`. If rank 3, batch of 1 is assumed.",
                  "type": "[number, number, number, number]|[number, number, number]",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "strides",
                  "documentation": "The strides of the original convolution:\n`[strideHeight, strideWidth]`.",
                  "type": "[number, number]|number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "pad",
                  "documentation": "The type of padding algorithm used in the non-transpose version\nof the op.",
                  "type": "'valid'|'same'|number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "dimRoundingMode",
                  "documentation": "The rounding mode used when computing output\ndimensions if pad is a number. If none is provided, it will not round\nand error if the output is of fractional size.",
                  "type": "'floor'|'round'|'ceil'",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor3D](#class:Tensor)|[tf.Tensor4D](#class:Tensor)",
              "documentation": "Computes the transposed 2D convolution of an image, also known as a\ndeconvolution.",
              "fileName": "#389",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/conv.ts#L389-L399",
              "isFunction": true,
              "displayName": "tf.conv2dTranspose",
              "urlHash": "conv2dTranspose"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Convolution"
              },
              "symbolName": "depthwiseConv2d",
              "paramStr": "(x, filter, strides, pad, dataFormat?, dilations?, dimRoundingMode?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor, of rank 4 or rank 3, of shape\n`[batch, height, width, inChannels]`. If rank 3, batch of 1 is\nassumed.",
                  "type": "[tf.Tensor3D](#class:Tensor)|[tf.Tensor4D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "filter",
                  "documentation": "The filter tensor, rank 4, of shape\n`[filterHeight, filterWidth, inChannels, channelMultiplier]`.",
                  "type": "[tf.Tensor4D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "strides",
                  "documentation": "The strides of the convolution: `[strideHeight,\nstrideWidth]`. If strides is a single number, then `strideHeight ==\nstrideWidth`.",
                  "type": "[number, number]|number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "pad",
                  "documentation": "The type of padding algorithm.\n- `same` and stride 1: output will be of same size as input,\nregardless of filter size.\n- `valid`: output will be smaller than input if filter is larger\nthan 1x1.\n- For more info, see this guide:\n[https://www.tensorflow.org/api_guides/python/nn#Convolution](\nhttps://www.tensorflow.org/api_guides/python/nn#Convolution)",
                  "type": "'valid'|'same'|number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "dataFormat",
                  "documentation": ": An optional string from: \"NHWC\", \"NCHW\". Defaults to\n\"NHWC\". Specify the data format of the input and output data. With the\ndefault format \"NHWC\", the data is stored in the order of: [batch,\nheight, width, channels]. Only \"NHWC\" is currently supported.",
                  "type": "'NHWC'|'NCHW'",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "dilations",
                  "documentation": "The dilation rates: `[dilationHeight, dilationWidth]`\nin which we sample input values across the height and width dimensions\nin atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\nnumber, then `dilationHeight == dilationWidth`. If it is greater than\n1, then all values of `strides` must be 1.",
                  "type": "[number, number]|number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "dimRoundingMode",
                  "documentation": "The rounding mode used when computing output\ndimensions if pad is a number. If none is provided, it will not round\nand error if the output is of fractional size.",
                  "type": "'floor'|'round'|'ceil'",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor3D](#class:Tensor)|[tf.Tensor4D](#class:Tensor)",
              "documentation": "Depthwise 2D convolution.\n\nGiven a 4D [tf.input()](#input) array and a `filter` array of shape\n`[filterHeight, filterWidth, inChannels, channelMultiplier]` containing\n`inChannels` convolutional filters of depth 1, this op applies a\ndifferent filter to each input channel (expanding from 1 channel to\n`channelMultiplier` channels for each), then concatenates the results\ntogether. The output has `inChannels * channelMultiplier` channels.\n\nSee\n[https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](\n     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)\nfor more details.",
              "fileName": "#446",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/conv.ts#L446-L511",
              "isFunction": true,
              "displayName": "tf.depthwiseConv2d",
              "urlHash": "depthwiseConv2d"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Convolution"
              },
              "symbolName": "maxPool",
              "paramStr": "(x, filterSize, strides, pad, dimRoundingMode?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor, of rank 4 or rank 3 of shape\n`[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.",
                  "type": "[tf.Tensor3D](#class:Tensor)|[tf.Tensor4D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "filterSize",
                  "documentation": "The filter size, a tuple `[filterHeight, filterWidth]`.",
                  "type": "[number, number]|number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "strides",
                  "documentation": "The strides of the pooling: `[strideHeight, strideWidth]`.",
                  "type": "[number, number]|number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "pad",
                  "documentation": "The type of padding algorithm.\n- `same` and stride 1: output will be of same size as input,\nregardless of filter size.\n- `valid`: output will be smaller than input if filter is larger\nthan 1x1.\n- For more info, see this guide:\n[https://www.tensorflow.org/api_guides/python/nn#Convolution](\nhttps://www.tensorflow.org/api_guides/python/nn#Convolution)",
                  "type": "'valid'|'same'|number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "dimRoundingMode",
                  "documentation": "The rounding mode used when computing output\ndimensions if pad is a number. If none is provided, it will not round\nand error if the output is of fractional size.",
                  "type": "'floor'|'round'|'ceil'",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor3D](#class:Tensor)|[tf.Tensor4D](#class:Tensor)",
              "documentation": "Computes the 2D max pooling of an image.",
              "fileName": "#46",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/pool.ts#L46-L84",
              "isFunction": true,
              "displayName": "tf.maxPool",
              "urlHash": "maxPool"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Convolution"
              },
              "symbolName": "separableConv2d",
              "paramStr": "(x, depthwiseFilter, pointwiseFilter, strides, pad, dilation?, dataFormat?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor, of rank 4 or rank 3, of shape\n`[batch, height, width, inChannels]`. If rank 3, batch of 1 is\nassumed.",
                  "type": "[tf.Tensor3D](#class:Tensor)|[tf.Tensor4D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "depthwiseFilter",
                  "documentation": "The depthwise filter tensor, rank 4, of shape\n`[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is\nthe filter used in the first step.",
                  "type": "[tf.Tensor4D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "pointwiseFilter",
                  "documentation": "The pointwise filter tensor, rank 4, of shape\n`[1, 1, inChannels * channelMultiplier, outChannels]`. This is\nthe filter used in the second step.",
                  "type": "[tf.Tensor4D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "strides",
                  "documentation": "The strides of the convolution: `[strideHeight,\nstrideWidth]`. If strides is a single number, then `strideHeight ==\nstrideWidth`.",
                  "type": "[number, number]|number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "pad",
                  "documentation": "The type of padding algorithm.\n- `same` and stride 1: output will be of same size as input,\nregardless of filter size.\n- `valid`: output will be smaller than input if filter is larger\nthan 1x1.\n- For more info, see this guide:\n[https://www.tensorflow.org/api_guides/python/nn#Convolution](\nhttps://www.tensorflow.org/api_guides/python/nn#Convolution)",
                  "type": "'valid'|'same'",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "dilation",
                  "documentation": "",
                  "type": "[number, number]|number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "dataFormat",
                  "documentation": ": An optional string from: \"NHWC\", \"NCHW\". Defaults to\n\"NHWC\". Specify the data format of the input and output data. With the\ndefault format \"NHWC\", the data is stored in the order of: [batch,\nheight, width, channels]. Only \"NHWC\" is currently supported.",
                  "type": "'NHWC'|'NCHW'",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor3D](#class:Tensor)|[tf.Tensor4D](#class:Tensor)",
              "documentation": "2-D convolution with separable filters.\n\nPerforms a depthwise convolution that acts separately on channels followed\nby a pointwise convolution that mixes channels. Note that this is\nseparability between dimensions [1, 2] and 3, not spatial separability\nbetween dimensions 1 and 2.\n\nSee\n[https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](\n     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)\nfor more details.",
              "fileName": "#557",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/conv.ts#L557-L619",
              "isFunction": true,
              "displayName": "tf.separableConv2d",
              "urlHash": "separableConv2d"
            }
          ]
        },
        {
          "name": "Reduction",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Reduction"
              },
              "symbolName": "all",
              "paramStr": "(x, axis?, keepDims?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor. Must be of dtype bool.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "The dimension(s) to reduce. By default it reduces\nall dimensions.",
                  "type": "number|number[]",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "keepDims",
                  "documentation": "If true, retains reduced dimensions with size 1.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the logical and of elements across dimensions of a [tf.Tensor](#class:Tensor).\n\nReduces the input along the dimensions given in `axes`. Unless `keepDims`\nis true, the rank of the [tf.Tensor](#class:Tensor) is reduced by 1 for each entry in `axes`.\nIf `keepDims` is true, the reduced dimensions are retained with length 1.\nIf `axes` has no entries, all dimensions are reduced, and an [tf.Tensor](#class:Tensor) with\na single element is returned.\n\n```js\nconst x = tf.tensor1d([1, 1, 1]);\n\nx.all().print();  // or tf.all(x)\n```\n\n```js\nconst x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');\n\nconst axis = 1;\nx.all(axis).print();  // or tf.all(x, axis)\n```",
              "fileName": "#446",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/reduction_ops.ts#L446-L466",
              "isFunction": true,
              "displayName": "tf.all",
              "urlHash": "all"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Reduction"
              },
              "symbolName": "any",
              "paramStr": "(x, axis?, keepDims?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor. Must be of dtype bool.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "The dimension(s) to reduce. By default it reduces\nall dimensions.",
                  "type": "number|number[]",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "keepDims",
                  "documentation": "If true, retains reduced dimensions with size 1.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the logical or of elements across dimensions of a [tf.Tensor](#class:Tensor).\n\nReduces the input along the dimensions given in `axes`. Unless `keepDims`\nis true, the rank of the [tf.Tensor](#class:Tensor) is reduced by 1 for each entry in `axes`.\nIf `keepDims` is true, the reduced dimensions are retained with length 1.\nIf `axes` has no entries, all dimensions are reduced, and an [tf.Tensor](#class:Tensor) with\na single element is returned.\n\n```js\nconst x = tf.tensor1d([1, 1, 1]);\n\nx.any().print();  // or tf.any(x)\n```\n\n```js\nconst x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');\n\nconst axis = 1;\nx.any(axis).print();  // or tf.any(x, axis)\n```",
              "fileName": "#496",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/reduction_ops.ts#L496-L516",
              "isFunction": true,
              "displayName": "tf.any",
              "urlHash": "any"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Reduction"
              },
              "symbolName": "argMax",
              "paramStr": "(x, axis?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "The dimension to reduce. Defaults to 0 (outer-most dimension).",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Returns the indices of the maximum values along an `axis`.\n\nThe result has the same shape as [tf.input()](#input) with the dimension along `axis`\nremoved.\n\n```js\nconst x = tf.tensor1d([1, 2, 3]);\n\nx.argMax().print();  // or tf.argMax(x)\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 4, 3], [2, 2]);\n\nconst axis = 1;\nx.argMax(axis).print();  // or tf.argMax(x, axis)\n```",
              "fileName": "#399",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/reduction_ops.ts#L399-L416",
              "isFunction": true,
              "displayName": "tf.argMax",
              "urlHash": "argMax"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Reduction"
              },
              "symbolName": "argMin",
              "paramStr": "(x, axis?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "The dimension to reduce. Defaults to 0 (outer-most dimension).",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Returns the indices of the minimum values along an `axis`.\n\nThe result has the same shape as [tf.input()](#input) with the dimension along `axis`\nremoved.\n\n```js\nconst x = tf.tensor1d([1, 2, 3]);\n\nx.argMin().print();  // or tf.argMin(x)\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 4, 3], [2, 2]);\n\nconst axis = 1;\nx.argMin(axis).print();  // or tf.argMin(x, axis)\n```",
              "fileName": "#357",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/reduction_ops.ts#L357-L374",
              "isFunction": true,
              "displayName": "tf.argMin",
              "urlHash": "argMin"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Reduction"
              },
              "symbolName": "logSumExp",
              "paramStr": "(x, axis?, keepDims?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "The dimension(s) to reduce. If null (the default),\nreduces all dimensions.",
                  "type": "number|number[]",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "keepDims",
                  "documentation": "If true, retains reduced dimensions with length\nof 1. Defaults to false.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the log(sum(exp(elements across the reduction dimensions)).\n\nReduces the input along the dimensions given in `axis`. Unless `keepDims`\nis true, the rank of the array is reduced by 1 for each entry in `axis`.\nIf `keepDims` is true, the reduced dimensions are retained with length 1.\nIf `axis` has no entries, all dimensions are reduced, and an array with a\nsingle element is returned.\n\n```js\nconst x = tf.tensor1d([1, 2, 3]);\n\nx.logSumExp().print();  // or tf.logSumExp(x)\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\nconst axis = 1;\nx.logSumExp(axis).print();  // or tf.logSumExp(a, axis)\n```",
              "fileName": "#56",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/reduction_ops.ts#L56-L73",
              "isFunction": true,
              "displayName": "tf.logSumExp",
              "urlHash": "logSumExp"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Reduction"
              },
              "symbolName": "max",
              "paramStr": "(x, axis?, keepDims?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "The dimension(s) to reduce. By default it reduces\nall dimensions.",
                  "type": "number|number[]",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "keepDims",
                  "documentation": "If true, retains reduced dimensions with size 1.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the maximum of elements across dimensions of a [tf.Tensor](#class:Tensor).\n\nReduces the input along the dimensions given in `axes`. Unless `keepDims`\nis true, the rank of the [tf.Tensor](#class:Tensor) is reduced by 1 for each entry in `axes`.\nIf `keepDims` is true, the reduced dimensions are retained with length 1.\nIf `axes` has no entries, all dimensions are reduced, and an [tf.Tensor](#class:Tensor) with\na single element is returned.\n\n```js\nconst x = tf.tensor1d([1, 2, 3]);\n\nx.max().print();  // or tf.max(x)\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\nconst axis = 1;\nx.max(axis).print();  // or tf.max(x, axis)\n```",
              "fileName": "#309",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/reduction_ops.ts#L309-L331",
              "isFunction": true,
              "displayName": "tf.max",
              "urlHash": "max"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Reduction"
              },
              "symbolName": "mean",
              "paramStr": "(x, axis?, keepDims?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "The dimension(s) to reduce. By default it reduces\nall dimensions.",
                  "type": "number|number[]",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "keepDims",
                  "documentation": "If true, retains reduced dimensions with size 1.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the mean of elements across dimensions of a [tf.Tensor](#class:Tensor).\n\nReduces `x` along the dimensions given in `axis`. Unless `keepDims` is\ntrue, the rank of the [tf.Tensor](#class:Tensor) is reduced by 1 for each entry in `axis`.\nIf `keepDims` is true, the reduced dimensions are retained with length 1.\nIf `axis` has no entries, all dimensions are reduced, and a [tf.Tensor](#class:Tensor) with\na single element is returned.\n\n```js\nconst x = tf.tensor1d([1, 2, 3]);\n\nx.mean().print();  // or tf.mean(a)\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\nconst axis = 1;\nx.mean(axis).print();  // or tf.mean(x, axis)\n```",
              "fileName": "#173",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/reduction_ops.ts#L173-L206",
              "isFunction": true,
              "displayName": "tf.mean",
              "urlHash": "mean"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Reduction"
              },
              "symbolName": "min",
              "paramStr": "(x, axis?, keepDims?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input Tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "The dimension(s) to reduce. By default it reduces\nall dimensions.",
                  "type": "number|number[]",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "keepDims",
                  "documentation": "If true, retains reduced dimensions with size 1.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the minimum value from the input.\n\nReduces the input along the dimensions given in `axes`. Unless `keepDims`\nis true, the rank of the array is reduced by 1 for each entry in `axes`.\nIf `keepDims` is true, the reduced dimensions are retained with length 1.\nIf `axes` has no entries, all dimensions are reduced, and an array with a\nsingle element is returned.\n\n```js\nconst x = tf.tensor1d([1, 2, 3]);\n\nx.min().print();  // or tf.min(x)\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\nconst axis = 1;\nx.min(axis).print();  // or tf.min(x, axis)\n```",
              "fileName": "#257",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/reduction_ops.ts#L257-L279",
              "isFunction": true,
              "displayName": "tf.min",
              "urlHash": "min"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Reduction"
              },
              "symbolName": "sum",
              "paramStr": "(x, axis?, keepDims?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor to compute the sum over. If the dtype is `bool`\nit will be converted to `int32` and the output dtype will be `int32`.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "The dimension(s) to reduce. By default it reduces\nall dimensions.",
                  "type": "number|number[]",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "keepDims",
                  "documentation": "If true, retains reduced dimensions with size 1.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the sum of elements across dimensions of a [tf.Tensor](#class:Tensor).\n\nReduces the input along the dimensions given in `axes`. Unless `keepDims`\nis true, the rank of the [tf.Tensor](#class:Tensor) is reduced by 1 for each entry in `axes`.\nIf `keepDims` is true, the reduced dimensions are retained with length 1.\nIf axes has no entries, all dimensions are reduced, and a [tf.Tensor](#class:Tensor) with a\nsingle element is returned.\n\n```js\nconst x = tf.tensor1d([1, 2, 3]);\n\nx.sum().print();  // or tf.sum(x)\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\nconst axis = 1;\nx.sum(axis).print();  // or tf.sum(x, axis)\n```",
              "fileName": "#104",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/reduction_ops.ts#L104-L143",
              "isFunction": true,
              "displayName": "tf.sum",
              "urlHash": "sum"
            }
          ]
        },
        {
          "name": "Normalization",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Normalization"
              },
              "symbolName": "batchNormalization",
              "paramStr": "(x, mean, variance, varianceEpsilon?, scale?, offset?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input Tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[tf.Tensor1D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "mean",
                  "documentation": "A mean Tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[tf.Tensor1D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "variance",
                  "documentation": "A variance Tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[tf.Tensor1D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "varianceEpsilon",
                  "documentation": "A small float number to avoid dividing by 0.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "scale",
                  "documentation": "A scale Tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[tf.Tensor1D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "offset",
                  "documentation": "An offset Tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[tf.Tensor1D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Batch normalization.\n\nAs described in\n[http://arxiv.org/abs/1502.03167](http://arxiv.org/abs/1502.03167).\n\nMean, variance, scale, and offset can be of two shapes:\n   - The same shape as the input.\n   - In the common case, the depth dimension is the last dimension of x, so\n     the values would be an [tf.Tensor1D](#class:Tensor) of shape [depth].\n\nAlso available are stricter rank-specific methods with the same signature\nas this method that assert that parameters passed are of given rank\n   - `tf.batchNormalization2d`\n   - `tf.batchNormalization3d`\n   - `tf.batchNormalization4d`",
              "fileName": "#222",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/batchnorm.ts#L222-L336",
              "isFunction": true,
              "displayName": "tf.batchNormalization",
              "urlHash": "batchNormalization"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Normalization"
              },
              "symbolName": "localResponseNormalization",
              "paramStr": "(x, depthRadius?, bias?, alpha?, beta?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor. The 4-D input tensor is treated as a 3-D array\nof 1D vectors (along the last dimension), and each vector is\nnormalized independently.",
                  "type": "[tf.Tensor3D](#class:Tensor)|[tf.Tensor4D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "depthRadius",
                  "documentation": "The number of adjacent channels in the 1D normalization\nwindow.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "bias",
                  "documentation": "A constant bias term for the basis.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "alpha",
                  "documentation": "A scale factor, usually positive.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "beta",
                  "documentation": "An exponent.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor3D](#class:Tensor)|[tf.Tensor4D](#class:Tensor)",
              "documentation": "Normalizes the activation of a local neighborhood across or within\nchannels.",
              "fileName": "#39",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/lrn.ts#L39-L75",
              "isFunction": true,
              "displayName": "tf.localResponseNormalization",
              "urlHash": "localResponseNormalization"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Normalization"
              },
              "symbolName": "moments",
              "paramStr": "(x, axis?, keepDims?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "The dimension(s) along with to compute mean and\nvariance. By default it reduces all dimensions.",
                  "type": "number|number[]",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "keepDims",
                  "documentation": "If true, the moments have the same dimensionality as the\ninput.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "{mean: [tf.Tensor](#class:Tensor), variance: [tf.Tensor](#class:Tensor)}",
              "documentation": "Calculates the mean and variance of `x`. The mean and variance are\ncalculated by aggregating the contents of `x` across `axes`. If `x` is\n1-D and `axes = [0]` this is just the mean and variance of a vector.",
              "fileName": "#531",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/reduction_ops.ts#L531-L544",
              "isFunction": true,
              "displayName": "tf.moments",
              "urlHash": "moments"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Normalization"
              },
              "symbolName": "softmax",
              "paramStr": "(logits, dim?)",
              "parameters": [
                {
                  "name": "logits",
                  "documentation": "The logits array.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "dim",
                  "documentation": "The dimension softmax would be performed on. Defaults to `-1`\nwhich indicates the last dimension.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the softmax normalized vector given the logits.\n\n```js\nconst a = tf.tensor1d([1, 2, 3]);\n\na.softmax().print();  // or tf.softmax(a)\n```\n\n```js\nconst a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);\n\na.softmax().print();  // or tf.softmax(a)\n```",
              "fileName": "#44",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/softmax.ts#L44-L74",
              "isFunction": true,
              "displayName": "tf.softmax",
              "urlHash": "softmax"
            }
          ]
        },
        {
          "name": "Images",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Images",
                "namespace": "image"
              },
              "symbolName": "cropAndResize",
              "namespace": "image",
              "paramStr": "(image, boxes, boxInd, cropSize, method?, extrapolationValue?)",
              "parameters": [
                {
                  "name": "image",
                  "documentation": "4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,\nwhere imageHeight and imageWidth must be positive, specifying the\nbatch of images from which to take crops",
                  "type": "[tf.Tensor4D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "boxes",
                  "documentation": "2d float32 tensor of shape `[numBoxes, 4]`. Each entry is\n`[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized\ncoordinates of the box in the boxInd[i]'th image in the batch",
                  "type": "[tf.Tensor2D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "boxInd",
                  "documentation": "1d int32 tensor of shape `[numBoxes]` with values in range\n`[0, batch)` that specifies the image that the `i`-th box refers to.",
                  "type": "[tf.Tensor1D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "cropSize",
                  "documentation": "1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`\nspecifying the size to which all crops are resized to.",
                  "type": "[number, number]",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "method",
                  "documentation": "Optional string from `'bilinear' | 'nearest'`,\ndefaults to bilinear, which specifies the sampling method for resizing",
                  "type": "'bilinear'|'nearest'",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "extrapolationValue",
                  "documentation": "A threshold for deciding when to remove boxes based\non score. Defaults to 0.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor4D](#class:Tensor)",
              "documentation": "Extracts crops from the input image tensor and resizes them using bilinear\nsampling or nearest neighbor sampling (possibly with aspect ratio change)\nto a common output size specified by crop_size.",
              "fileName": "#253",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/image_ops.ts#L253-L302",
              "isFunction": true,
              "displayName": "tf.image.cropAndResize",
              "urlHash": "image.cropAndResize"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Images",
                "namespace": "image"
              },
              "symbolName": "nonMaxSuppression",
              "namespace": "image",
              "paramStr": "(boxes, scores, maxOutputSize, iouThreshold?, scoreThreshold?)",
              "parameters": [
                {
                  "name": "boxes",
                  "documentation": "a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n`[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\nthe bounding box.",
                  "type": "[tf.Tensor2D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "scores",
                  "documentation": "a 1d tensor providing the box scores of shape `[numBoxes]`.",
                  "type": "[tf.Tensor1D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "maxOutputSize",
                  "documentation": "The maximum number of boxes to be selected.",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "iouThreshold",
                  "documentation": "A float representing the threshold for deciding whether\nboxes overlap too much with respect to IOU. Must be between [0, 1].\nDefaults to 0.5 (50% box overlap).",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "scoreThreshold",
                  "documentation": "A threshold for deciding when to remove boxes based\non score. Defaults to -inf, which means any score is accepted.",
                  "type": "[tf.any()](#any)",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor1D](#class:Tensor)",
              "documentation": "Performs non maximum suppression of bounding boxes based on\niou (intersection over union)",
              "fileName": "#155",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/image_ops.ts#L155-L172",
              "isFunction": true,
              "displayName": "tf.image.nonMaxSuppression",
              "urlHash": "image.nonMaxSuppression"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Images",
                "namespace": "image"
              },
              "symbolName": "resizeBilinear",
              "namespace": "image",
              "paramStr": "(images, size, alignCorners?)",
              "parameters": [
                {
                  "name": "images",
                  "documentation": "The images, of rank 4 or rank 3, of shape\n`[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.",
                  "type": "[tf.Tensor3D](#class:Tensor)|[tf.Tensor4D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "size",
                  "documentation": "The new shape `[newHeight, newWidth]` to resize the\nimages to. Each channel is resized individually.",
                  "type": "[number, number]",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "alignCorners",
                  "documentation": "Defaults to False. If true, rescale\ninput by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\ncorners of images and resized images. If false, rescale by\n`new_height / height`. Treat similarly the width dimension.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor3D](#class:Tensor)|[tf.Tensor4D](#class:Tensor)",
              "documentation": "Bilinear resize a batch of 3D images to a new shape.",
              "fileName": "#40",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/image_ops.ts#L40-L78",
              "isFunction": true,
              "displayName": "tf.image.resizeBilinear",
              "urlHash": "image.resizeBilinear"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Images",
                "namespace": "image"
              },
              "symbolName": "resizeNearestNeighbor",
              "namespace": "image",
              "paramStr": "(images, size, alignCorners?)",
              "parameters": [
                {
                  "name": "images",
                  "documentation": "The images, of rank 4 or rank 3, of shape\n`[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.",
                  "type": "[tf.Tensor3D](#class:Tensor)|[tf.Tensor4D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "size",
                  "documentation": "The new shape `[newHeight, newWidth]` to resize the\nimages to. Each channel is resized individually.",
                  "type": "[number, number]",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "alignCorners",
                  "documentation": "Defaults to False. If true, rescale\ninput by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\ncorners of images and resized images. If false, rescale by\n`new_height / height`. Treat similarly the width dimension.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor3D](#class:Tensor)|[tf.Tensor4D](#class:Tensor)",
              "documentation": "NearestNeighbor resize a batch of 3D images to a new shape.",
              "fileName": "#93",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/image_ops.ts#L93-L136",
              "isFunction": true,
              "displayName": "tf.image.resizeNearestNeighbor",
              "urlHash": "image.resizeNearestNeighbor"
            }
          ]
        },
        {
          "name": "RNN",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "RNN"
              },
              "symbolName": "basicLSTMCell",
              "paramStr": "(forgetBias, lstmKernel, lstmBias, data, c, h)",
              "parameters": [
                {
                  "name": "forgetBias",
                  "documentation": "Forget bias for the cell.",
                  "type": "[tf.Scalar](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "lstmKernel",
                  "documentation": "The weights for the cell.",
                  "type": "[tf.Tensor2D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "lstmBias",
                  "documentation": "The bias for the cell.",
                  "type": "[tf.Tensor1D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "data",
                  "documentation": "The input to the cell.",
                  "type": "[tf.Tensor2D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "c",
                  "documentation": "Previous cell state.",
                  "type": "[tf.Tensor2D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "h",
                  "documentation": "Previous cell output.",
                  "type": "[tf.Tensor2D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[[tf.Tensor2D](#class:Tensor), [tf.Tensor2D](#class:Tensor)]",
              "documentation": "Computes the next state and output of a BasicLSTMCell.\n\nReturns `[newC, newH]`.\n\nDerived from tf.contrib.rnn.BasicLSTMCell.",
              "fileName": "#85",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/lstm.ts#L85-L115",
              "isFunction": true,
              "displayName": "tf.basicLSTMCell",
              "urlHash": "basicLSTMCell"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "RNN"
              },
              "symbolName": "multiRNNCell",
              "paramStr": "(lstmCells, data, c, h)",
              "parameters": [
                {
                  "name": "lstmCells",
                  "documentation": "Array of LSTMCell functions.",
                  "type": "(data: [tf.Tensor2D](#class:Tensor), c: [tf.Tensor2D](#class:Tensor), h: [tf.Tensor2D](#class:Tensor)): [[tf.Tensor2D](#class:Tensor), [tf.Tensor2D](#class:Tensor)][]",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "data",
                  "documentation": "The input to the cell.",
                  "type": "[tf.Tensor2D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "c",
                  "documentation": "Array of previous cell states.",
                  "type": "[tf.Tensor2D](#class:Tensor)[]|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array[]",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "h",
                  "documentation": "Array of previous cell outputs.",
                  "type": "[tf.Tensor2D](#class:Tensor)[]|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array[]",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[[tf.Tensor2D](#class:Tensor)[], [tf.Tensor2D](#class:Tensor)[]]",
              "documentation": "Computes the next states and outputs of a stack of LSTMCells.\n\nEach cell output is used as input to the next cell.\n\nReturns `[cellState, cellOutput]`.\n\nDerived from tf.contrib.rn.MultiRNNCell.",
              "fileName": "#45",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/lstm.ts#L45-L68",
              "isFunction": true,
              "displayName": "tf.multiRNNCell",
              "urlHash": "multiRNNCell"
            }
          ]
        },
        {
          "name": "Logical",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Logical"
              },
              "symbolName": "equal",
              "paramStr": "(a, b)",
              "parameters": [
                {
                  "name": "a",
                  "documentation": "The first input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "b",
                  "documentation": "The second input tensor. Must have the same dtype as `a`.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Returns the truth value of (a == b) element-wise. Supports broadcasting.\n\nWe also expose `equalStrict` which has the same signature as this op\nand asserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 2, 3]);\nconst b = tf.tensor1d([2, 2, 2]);\n\na.equal(b).print();\n```",
              "fileName": "#128",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/compare.ts#L128-L136",
              "isFunction": true,
              "displayName": "tf.equal",
              "urlHash": "equal"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Logical"
              },
              "symbolName": "greater",
              "paramStr": "(a, b)",
              "parameters": [
                {
                  "name": "a",
                  "documentation": "The first input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "b",
                  "documentation": "The second input tensor. Must have the same dtype as `a`.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Returns the truth value of (a > b) element-wise. Supports broadcasting.\n\nWe also expose `greaterStrict` which has the same signature as this\nop and asserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 2, 3]);\nconst b = tf.tensor1d([2, 2, 2]);\n\na.greater(b).print();\n```",
              "fileName": "#198",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/compare.ts#L198-L207",
              "isFunction": true,
              "displayName": "tf.greater",
              "urlHash": "greater"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Logical"
              },
              "symbolName": "greaterEqual",
              "paramStr": "(a, b)",
              "parameters": [
                {
                  "name": "a",
                  "documentation": "The first input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "b",
                  "documentation": "The second input tensor. Must have the same dtype as `a`.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Returns the truth value of (a >= b) element-wise. Supports broadcasting.\n\nWe also expose `greaterEqualStrict` which has the same signature as this\nop and asserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 2, 3]);\nconst b = tf.tensor1d([2, 2, 2]);\n\na.greaterEqual(b).print();\n```",
              "fileName": "#233",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/compare.ts#L233-L245",
              "isFunction": true,
              "displayName": "tf.greaterEqual",
              "urlHash": "greaterEqual"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Logical"
              },
              "symbolName": "less",
              "paramStr": "(a, b)",
              "parameters": [
                {
                  "name": "a",
                  "documentation": "The first input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "b",
                  "documentation": "The second input tensor. Must have the same dtype as `a`.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Returns the truth value of (a < b) element-wise. Supports broadcasting.\n\nWe also expose `lessStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 2, 3]);\nconst b = tf.tensor1d([2, 2, 2]);\n\na.less(b).print();\n```",
              "fileName": "#86",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/compare.ts#L86-L94",
              "isFunction": true,
              "displayName": "tf.less",
              "urlHash": "less"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Logical"
              },
              "symbolName": "lessEqual",
              "paramStr": "(a, b)",
              "parameters": [
                {
                  "name": "a",
                  "documentation": "The first input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "b",
                  "documentation": "The second input tensor. Must have the same dtype as `a`.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Returns the truth value of (a <= b) element-wise. Supports broadcasting.\n\nWe also expose `lessEqualStrict` which has the same signature as this op\nand asserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 2, 3]);\nconst b = tf.tensor1d([2, 2, 2]);\n\na.lessEqual(b).print();\n```",
              "fileName": "#162",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/compare.ts#L162-L171",
              "isFunction": true,
              "displayName": "tf.lessEqual",
              "urlHash": "lessEqual"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Logical"
              },
              "symbolName": "logicalAnd",
              "paramStr": "(a, b)",
              "parameters": [
                {
                  "name": "a",
                  "documentation": "The first input tensor. Must be of dtype bool.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "b",
                  "documentation": "The second input tensor. Must be of dtype bool.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Returns the truth value of a AND b element-wise. Supports broadcasting.\n\n```js\nconst a = tf.tensor1d([false, false, true, true], 'bool');\nconst b = tf.tensor1d([false, true, false, true], 'bool');\n\na.logicalAnd(b).print();\n```",
              "fileName": "#61",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/logical_ops.ts#L61-L72",
              "isFunction": true,
              "displayName": "tf.logicalAnd",
              "urlHash": "logicalAnd"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Logical"
              },
              "symbolName": "logicalNot",
              "paramStr": "(x)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor. Must be of dtype 'bool'.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Returns the truth value of `NOT x` element-wise.\n\n```js\nconst a = tf.tensor1d([false, true], 'bool');\n\na.logicalNot().print();\n```",
              "fileName": "#40",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/logical_ops.ts#L40-L45",
              "isFunction": true,
              "displayName": "tf.logicalNot",
              "urlHash": "logicalNot"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Logical"
              },
              "symbolName": "logicalOr",
              "paramStr": "(a, b)",
              "parameters": [
                {
                  "name": "a",
                  "documentation": "The first input tensor. Must be of dtype bool.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "b",
                  "documentation": "The second input tensor. Must be of dtype bool.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Returns the truth value of `a OR b` element-wise. Supports broadcasting.\n\n```js\nconst a = tf.tensor1d([false, false, true, true], 'bool');\nconst b = tf.tensor1d([false, true, false, true], 'bool');\n\na.logicalOr(b).print();\n```",
              "fileName": "#87",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/logical_ops.ts#L87-L98",
              "isFunction": true,
              "displayName": "tf.logicalOr",
              "urlHash": "logicalOr"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Logical"
              },
              "symbolName": "logicalXor",
              "paramStr": "(a, b)",
              "parameters": [
                {
                  "name": "a",
                  "documentation": "The first input tensor. Must be of dtype bool.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "b",
                  "documentation": "The second input tensor. Must be of dtype bool.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Returns the truth value of `a XOR b` element-wise. Supports broadcasting.\n\n```js\nconst a = tf.tensor1d([false, false, true, true], 'bool');\nconst b = tf.tensor1d([false, true, false, true], 'bool');\n\na.logicalXor(b).print();\n```",
              "fileName": "#114",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/logical_ops.ts#L114-L125",
              "isFunction": true,
              "displayName": "tf.logicalXor",
              "urlHash": "logicalXor"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Logical"
              },
              "symbolName": "notEqual",
              "paramStr": "(a, b)",
              "parameters": [
                {
                  "name": "a",
                  "documentation": "The first input tensor.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "b",
                  "documentation": "The second input tensor. Must have the same dtype as `a`.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Returns the truth value of (a != b) element-wise. Supports broadcasting.\n\nWe also expose `notEqualStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 2, 3]);\nconst b = tf.tensor1d([0, 2, 3]);\n\na.notEqual(b).print();\n```",
              "fileName": "#44",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/compare.ts#L44-L52",
              "isFunction": true,
              "displayName": "tf.notEqual",
              "urlHash": "notEqual"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Logical"
              },
              "symbolName": "where",
              "paramStr": "(condition, a, b)",
              "parameters": [
                {
                  "name": "condition",
                  "documentation": "The input condition. Must be of dtype bool.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "a",
                  "documentation": "If `condition` is rank 1, `a` may have a higher rank but\nits first dimension must match the size of `condition`.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "b",
                  "documentation": "A tensor with the same shape and type as `a`.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Returns the elements, either `a` or `b` depending on the `condition`.\n\nIf the condition is true, select from `a`, otherwise select from `b`.\n\n```js\nconst cond = tf.tensor1d([false, false, true], 'bool');\nconst a = tf.tensor1d([1 , 2, 3]);\nconst b = tf.tensor1d([-1, -2, -3]);\n\na.where(cond, b).print();\n```",
              "fileName": "#146",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/logical_ops.ts#L146-L177",
              "isFunction": true,
              "displayName": "tf.where",
              "urlHash": "where"
            }
          ]
        },
        {
          "name": "Scan",
          "symbols": [
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Scan"
              },
              "symbolName": "cumsum",
              "paramStr": "(x, axis?, exclusive?, reverse?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The input tensor to be summed.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "The axis along which to sum. Optional. Defaults to 0.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "exclusive",
                  "documentation": "Whether to perform exclusive cumulative sum. Optional.\nDefaults to false. If set to true then the sum of each tensor entry\ndoes not include its own value, but only the values previous to it\nalong the specified axis.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "reverse",
                  "documentation": "Whether to sum in the opposite direction. Optional.\nDefaults to false.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the cumulative sum of a [tf.Tensor](#class:Tensor) along `axis`.\n\n```js\nconst x = tf.tensor([1, 2, 3, 4]);\nx.cumsum().print();\n```\n```js\nconst x = tf.tensor([[1, 2], [3, 4]]);\nx.cumsum().print();\n```",
              "fileName": "#962",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/array_ops.ts#L962-L986",
              "isFunction": true,
              "displayName": "tf.cumsum",
              "urlHash": "cumsum"
            }
          ]
        },
        {
          "name": "Segment",
          "symbols": [
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Segment"
              },
              "symbolName": "unsortedSegmentSum",
              "paramStr": "(x, segmentIds, numSegments)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The [tf.Tensor](#class:Tensor) that will be summed along its segments.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "segmentIds",
                  "documentation": "A [tf.Tensor1D](#class:Tensor) whose rank is equal to the rank of `x`'s\ndimension along the `axis`.  Maps each element of `x` to a segment.",
                  "type": "[tf.Tensor1D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "numSegments",
                  "documentation": "The number of distinct `segmentIds`.",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the sum along segments of a [tf.Tensor](#class:Tensor).\n\n```js\nconst x = tf.tensor1d([1, 2, 3, 4]);\nconst segmentIds = tf.tensor1d([1, 2, 0, 1], 'int32');\nconst numSegments = 3;\n\nx.unsortedSegmentSum(segmentIds, numSegments).print()\n//or tf.unsortedSegmentSum(x, segmentIds, numSegments)\n```",
              "fileName": "#48",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/segment_ops.ts#L48-L66",
              "isFunction": true,
              "displayName": "tf.unsortedSegmentSum",
              "urlHash": "unsortedSegmentSum"
            }
          ]
        },
        {
          "name": "Moving Average",
          "symbols": [
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Moving Average"
              },
              "symbolName": "movingAverage",
              "paramStr": "(v, x, decay, step?, zeroDebias?)",
              "parameters": [
                {
                  "name": "v",
                  "documentation": "The current moving average value.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "x",
                  "documentation": "New input value, must have the same shape and dtype as `v`.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "decay",
                  "documentation": "The decay factor. Typical values are 0.95 and 0.99.",
                  "type": "number|[tf.Scalar](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "step",
                  "documentation": "Step count.",
                  "type": "number|[tf.Scalar](#class:Tensor)",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "zeroDebias",
                  "documentation": ": Whether zeroDebias is to be performed (default: `true`).",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Compute the moving average of a variable.\n\nWithout zeroDebias, the moving average operation is defined by:\n   `v += delta`\nwhere\n   `delta = (1 - decay) * (x - v)`\n\nWith zeroDebias (default), the `delta` term is scaled to debias the\neffect of the (assumed) zero-initialization of `v`.\n   `delta /= (1 - decay ^ step)`\n\nFor more details on the zero-debiasing algorithm, see:\n   https://arxiv.org/abs/1412.6980\n\nNote that this function is completely stateless and does not keep track of\nstep count. The step count needs to be maintained by the caller and passed\nin as [tf.step()](#step).",
              "fileName": "#54",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/moving_average.ts#L54-L75",
              "isFunction": true,
              "displayName": "tf.movingAverage",
              "urlHash": "movingAverage"
            }
          ]
        },
        {
          "name": "Slicing and Joining",
          "symbols": [
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Slicing and Joining"
              },
              "symbolName": "stridedSlice",
              "paramStr": "(x, begin, end, strides, beginMask?, endMask?, ellipsisMask?, newAxisMask?, shrinkAxisMask?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The tensor to stride slice.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "begin",
                  "documentation": "The coordinates to start the slice from.",
                  "type": "number[]",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "end",
                  "documentation": ": The coordinates to end the slice at.",
                  "type": "number[]",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "strides",
                  "documentation": ": The size of the slice.",
                  "type": "number[]",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "beginMask",
                  "documentation": ": If the ith bit of begin_mask is set, begin[i] is ignored\nand the fullest possible range in that dimension is used instead.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "endMask",
                  "documentation": ": If the ith bit of end_mask is set, end[i] is ignored\nand the fullest possible range in that dimension is used instead.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "ellipsisMask",
                  "documentation": "",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "newAxisMask",
                  "documentation": "",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "shrinkAxisMask",
                  "documentation": ": a bitmask where bit i implies that\nthe ith specification should shrink the dimensionality. begin and end must\nimply a slice of size 1 in the dimension.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Extracts a strided slice of a tensor.\n\nRoughly speaking, this op extracts a slice of size (end-begin)/stride from\nthe given input_ tensor. Starting at the location specified by begin the\nslice continues by adding stride to the index until all dimensions are not\nless than end. Note that a stride can be negative, which causes a reverse\nslice.\n\n```js\nt = tf.tensor3d([1, 1, 1 ,2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6],\n    [3, 2, 3]);\nt.stridedSlice([1, 0, 0], [2, 1, 3], [1, 1, 1]).print()  // [[[3, 3, 3]]]\nt.stridedSlice([1, 0, 0], [2, 2, 3], [1, 1, 1]).print()  // [[[3, 3, 3],\n                                                     // [4, 4, 4]]]\nt.stridedSlice([1, -1, 0], [2, -3, 3], [1, -1, 1]).print() // [[[4, 4, 4],\n                                                     // [3, 3, 3]]]\n```",
              "fileName": "#56",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/strided_slice.ts#L56-L72",
              "isFunction": true,
              "displayName": "tf.stridedSlice",
              "urlHash": "stridedSlice"
            }
          ]
        },
        {
          "name": "Evaluation",
          "symbols": [
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Evaluation"
              },
              "symbolName": "topk",
              "paramStr": "(x, k?, sorted?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "1-D or higher [tf.Tensor](#class:Tensor) with last dimension being at least `k`.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "k",
                  "documentation": "Number of top elements to look for along the last dimension.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "sorted",
                  "documentation": "If true, the resulting `k` elements will be sorted by the\nvalues in descending order.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "{values: [tf.Tensor](#class:Tensor), indices: [tf.Tensor](#class:Tensor)}",
              "documentation": "Finds the values and indices of the `k` largest entries along the last\ndimension.\n\nIf the input is a vector (rank=1), finds the k largest entries in the vector\nand outputs their values and indices as vectors. Thus values[j] is the j-th\nlargest entry in input, and its index is indices[j].\nFor higher rank inputs, computes the top k entries along the last dimension.\n\nIf two elements are equal, the lower-index element appears first.\n\n```js\nconst a = tf.tensor2d([[1, 5], [4, 3]]);\nconst {values, indices} = tf.topk(a);\nvalues.print();\nindices.print();\n```",
              "fileName": "#47",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/topk.ts#L47-L63",
              "isFunction": true,
              "displayName": "tf.topk",
              "urlHash": "topk"
            }
          ]
        },
        {
          "name": "Linear Algebra",
          "symbols": [
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Linear Algebra",
                "namespace": "linalg"
              },
              "symbolName": "gramSchmidt",
              "namespace": "linalg",
              "paramStr": "(xs)",
              "parameters": [
                {
                  "name": "xs",
                  "documentation": "The vectors to be orthogonalized, in one of the two following\nformats:\n- An Array of [tf.Tensor1D](#class:Tensor).\n- A [tf.Tensor2D](#class:Tensor), i.e., a matrix, in which case the vectors are the rows\nof `xs`.\nIn each case, all the vectors must have the same length and the length\nmust be greater than or equal to the number of vectors.",
                  "type": "[tf.Tensor1D](#class:Tensor)[]|[tf.Tensor2D](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor1D](#class:Tensor)[]|[tf.Tensor2D](#class:Tensor)",
              "documentation": "Gram-Schmidt orthogonalization.\n\n```js\nconst x = tf.tensor2d([[1, 2], [3, 4]]);\nlet y = tf.linalg.gramSchmidt(x);\ny.print();\nconsole.log('Othogonalized:');\ny.dot(y.transpose()).print();  // should be nearly the identity matrix.\nconsole.log('First row direction maintained:');\nconsole.log(y.get(0, 1) / y.get(0, 0));  // should be nearly 2.\n```",
              "fileName": "#63",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/linalg_ops.ts#L63-L107",
              "isFunction": true,
              "displayName": "tf.linalg.gramSchmidt",
              "urlHash": "linalg.gramSchmidt"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Linear Algebra",
                "namespace": "linalg"
              },
              "symbolName": "qr",
              "namespace": "linalg",
              "paramStr": "(x, fullMatrices?)",
              "parameters": [
                {
                  "name": "x",
                  "documentation": "The [tf.Tensor](#class:Tensor) to be QR-decomposed. Must have rank >= 2. Suppose\nit has the shape `[..., M, N]`.",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "fullMatrices",
                  "documentation": "An optional boolean parameter. Defaults to `false`.\nIf `true`, compute full-sized `Q`. If `false` (the default),\ncompute only the leading N columns of `Q` and `R`.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[[tf.Tensor](#class:Tensor), [tf.Tensor](#class:Tensor)]",
              "documentation": "Compute QR decomposition of m-by-n matrix using Householder transformation.\n\nImplementation based on\n   [http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf]\n(http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf)\n\n```js\nconst a = tf.tensor2d([[1, 2], [3, 4]]);\nlet [q, r] = tf.linalg.qr(a);\nconsole.log('Q');\nq.print();\nconsole.log('R');\nr.print();\nconsole.log('Orthogonalized');\nq.dot(q.transpose()).print()  // should be nearly the identity matrix.\nconsole.log('Reconstructed');\nq.dot(r).print(); // should be nearly [[1, 2], [3, 4]];\n```",
              "fileName": "#153",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/linalg_ops.ts#L153-L184",
              "isFunction": true,
              "displayName": "tf.linalg.qr",
              "urlHash": "linalg.qr"
            }
          ]
        }
      ]
    },
    {
      "name": "Training",
      "description": "<p>We also provide an API to do perform training, and\ncompute gradients. We compute gradients eagerly, users provide a function\nthat is a combination of operations and we automatically differentiate\nthat function's output with respect to its inputs.\n<p>For those familiar with TensorFlow, the API we expose exactly mirrors\nthe TensorFlow Eager API.\n</p>",
      "subheadings": [
        {
          "name": "Gradients",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Training",
                "subheading": "Gradients"
              },
              "symbolName": "grad",
              "paramStr": "(f)",
              "parameters": [
                {
                  "name": "f",
                  "documentation": "The function f(x), to compute gradient for.",
                  "type": "(x: [tf.Tensor](#class:Tensor)) => [tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "(\n    x: [tf.Tensor](#class:Tensor), dy?: [tf.Tensor](#class:Tensor)) => [tf.Tensor](#class:Tensor)",
              "documentation": "Provided `f(x)`, returns another function `g(x, dy?)`, which gives the\ngradient of `f(x)` with respect to `x`.\n\nIf `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to\n`x` is computed instead. `f(x)` must take a single tensor `x` and return a\nsingle tensor `y`. If `f()` takes multiple inputs, use [tf.grads()](#grads) instead.\n\n```js\n// f(x) = x ^ 2\nconst f = x => x.square();\n// f'(x) = 2x\nconst g = tf.grad(f);\n\nconst x = tf.tensor1d([2, 3]);\ng(x).print();\n```\n\n```js\n// f(x) = x ^ 3\nconst f = x => x.pow(tf.scalar(3, 'int32'));\n// f'(x) = 3x ^ 2\nconst g = tf.grad(f);\n// f''(x) = 6x\nconst gg = tf.grad(g);\n\nconst x = tf.tensor1d([2, 3]);\ngg(x).print();\n```",
              "fileName": "#73",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/gradients.ts#L73-L94",
              "isFunction": true,
              "displayName": "tf.grad",
              "urlHash": "grad"
            },
            {
              "docInfo": {
                "heading": "Training",
                "subheading": "Gradients"
              },
              "symbolName": "grads",
              "paramStr": "(f)",
              "parameters": [
                {
                  "name": "f",
                  "documentation": "The function `f(x1, x2,...)` to compute gradients for.",
                  "type": "(...args: [tf.Tensor](#class:Tensor)[]) => [tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "(\n    args: [tf.Tensor](#class:Tensor)[], dy?: [tf.Tensor](#class:Tensor)) => [tf.Tensor](#class:Tensor)[]",
              "documentation": "Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,\nwhich gives an array of gradients of `f()` with respect to each input\n[`x1`,`x2`,...].\n\nIf `dy` is passed when calling `g()`, the gradient of\n`f(x1,...).mul(dy).sum()` with respect to each input is computed instead.\nThe provided `f` must take one or more tensors and return a single tensor\n`y`. If `f()` takes a single input, we recommend using [tf.grad()](#grad) instead.\n\n```js\n// f(a, b) = a * b\nconst f = (a, b) => a.mul(b);\n// df / da = b, df / db = a\nconst g = tf.grads(f);\n\nconst a = tf.tensor1d([2, 3]);\nconst b = tf.tensor1d([-2, -3]);\nconst [da, db] = g([a, b]);\nconsole.log('da');\nda.print();\nconsole.log('db');\ndb.print();\n```",
              "fileName": "#124",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/gradients.ts#L124-L147",
              "isFunction": true,
              "displayName": "tf.grads",
              "urlHash": "grads"
            },
            {
              "docInfo": {
                "heading": "Training",
                "subheading": "Gradients"
              },
              "symbolName": "customGrad",
              "paramStr": "(f)",
              "parameters": [
                {
                  "name": "f",
                  "documentation": "The function to evaluate in forward mode, which should return\n`{value: Tensor, gradFunc: (dy) => Tensor[]}`, where `gradFunc` returns\nthe custom gradients of `f` with respect to its inputs.",
                  "type": "(a: [tf.Tensor](#class:Tensor), b: [tf.Tensor](#class:Tensor),...) => {\nvalue: [tf.Tensor](#class:Tensor), * gradFunc: (dy: [tf.Tensor](#class:Tensor)) => [tf.Tensor](#class:Tensor) | [tf.Tensor](#class:Tensor)[] * }",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "(...args: [tf.Tensor](#class:Tensor)[]) => [tf.Tensor](#class:Tensor)",
              "documentation": "Overrides the gradient computation of a function `f`.\n\nTakes a function\n`f(...inputs) => {value: Tensor, gradFunc: dy => Tensor[]}` and returns\nanother function `g(...inputs)` which takes the same inputs as `f`. When\ncalled, `g` returns `f().value`. In backward mode, custom gradients with\nrespect to each input of `f` are computed using `f().gradFunc`.\n\n```js\nconst customOp = tf.customGrad(x => {\n   // Override gradient of our custom x ^ 2 op to be dy * abs(x);\n   return {value: x.square(), gradFunc: dy => [dy.mul(x.abs())]};\n});\n\nconst x = tf.tensor1d([-1, -2, 3]);\nconst dx = tf.grad(x => customOp(x));\n\nconsole.log(`f(x):`);\ncustomOp(x).print();\nconsole.log(`f'(x):`);\ndx(x).print();\n```",
              "fileName": "#350",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/gradients.ts#L350-L353",
              "isFunction": true,
              "displayName": "tf.customGrad",
              "urlHash": "customGrad"
            },
            {
              "docInfo": {
                "heading": "Training",
                "subheading": "Gradients"
              },
              "symbolName": "valueAndGrad",
              "paramStr": "(f)",
              "parameters": [
                {
                  "name": "f",
                  "documentation": "",
                  "type": "(x: [tf.Tensor](#class:Tensor)) => [tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "(\n    x: [tf.Tensor](#class:Tensor), dy?: [tf.Tensor](#class:Tensor)) => {\n  value: [tf.Tensor](#class:Tensor);\n  grad: [tf.Tensor](#class:Tensor);\n}",
              "documentation": "Like [tf.grad()](#grad), but also returns the value of `f()`. Useful when `f()`\nreturns a metric you want to show.\n\nThe result is a rich object with the following properties:\n- grad: The gradient of `f(x)` w.r.t `x` (result of [tf.grad()](#grad)).\n- value: The value returned by `f(x)`.\n\n```js\n// f(x) = x ^ 2\nconst f = x => x.square();\n// f'(x) = 2x\nconst g = tf.valueAndGrad(f);\n\nconst x = tf.tensor1d([2, 3]);\nconst {value, grad} = g(x);\n\nconsole.log('value');\nvalue.print();\nconsole.log('grad');\ngrad.print();\n```",
              "fileName": "#173",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/gradients.ts#L173-L191",
              "isFunction": true,
              "displayName": "tf.valueAndGrad",
              "urlHash": "valueAndGrad"
            },
            {
              "docInfo": {
                "heading": "Training",
                "subheading": "Gradients"
              },
              "symbolName": "valueAndGrads",
              "paramStr": "(f)",
              "parameters": [
                {
                  "name": "f",
                  "documentation": "",
                  "type": "(...args: [tf.Tensor](#class:Tensor)[]) => [tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "(\n    args: [tf.Tensor](#class:Tensor)[], dy?: [tf.Tensor](#class:Tensor)) => {\n  grads: [tf.Tensor](#class:Tensor)[];\n  value: [tf.Tensor](#class:Tensor);\n}",
              "documentation": "Like [tf.grads()](#grads), but returns also the value of `f()`. Useful when `f()`\nreturns a metric you want to show.\n\nThe result is a rich object with the following properties:\n- grads: The gradients of `f()` w.r.t each input (result of [tf.grads()](#grads)).\n- value: The value returned by `f(x)`.\n\n```js\n// f(a, b) = a * b\nconst f = (a, b) => a.mul(b);\n// df/da = b, df/db = a\nconst g = tf.valueAndGrads(f);\n\nconst a = tf.tensor1d([2, 3]);\nconst b = tf.tensor1d([-2, -3]);\nconst {value, grads} = g([a, b]);\n\nconst [da, db] = grads;\n\nconsole.log('value');\nvalue.print();\n\nconsole.log('da');\nda.print();\nconsole.log('db');\ndb.print();\n```",
              "fileName": "#223",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/gradients.ts#L223-L248",
              "isFunction": true,
              "displayName": "tf.valueAndGrads",
              "urlHash": "valueAndGrads"
            },
            {
              "docInfo": {
                "heading": "Training",
                "subheading": "Gradients"
              },
              "symbolName": "variableGrads",
              "paramStr": "(f, varList?)",
              "parameters": [
                {
                  "name": "f",
                  "documentation": "The function to execute. f() should return a scalar.",
                  "type": "() => [tf.Scalar](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "varList",
                  "documentation": "The list of trainable variables. Defaults to all variables.",
                  "type": "[tf.Variable](#class:Variable)[]",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "{value: [tf.Scalar](#class:Tensor), grads: {[name: string]: [tf.Tensor](#class:Tensor)}}",
              "documentation": "Computes and returns the gradient of f(x) with respect to the list of\ntrainable variables provided by `varList`. If no list is provided, it\ndefaults to all trainable variables.\n\n```js\nconst a = tf.variable(tf.tensor1d([3, 4]));\nconst b = tf.variable(tf.tensor1d([5, 6]));\nconst x = tf.tensor1d([1, 2]);\n\n// f(a, b) = a * x ^ 2 + b * x\nconst f = () => a.mul(x.square()).add(b.mul(x)).sum();\n// df/da = x ^ 2, df/db = x\nconst {value, grads} = tf.variableGrads(f);\n\nObject.keys(grads).forEach(varName => grads[varName].print());\n```",
              "fileName": "#272",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/gradients.ts#L272-L319",
              "isFunction": true,
              "displayName": "tf.variableGrads",
              "urlHash": "variableGrads"
            }
          ]
        },
        {
          "name": "Optimizers",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Training",
                "subheading": "Optimizers",
                "namespace": "train"
              },
              "symbolName": "sgd",
              "namespace": "train",
              "paramStr": "(learningRate)",
              "parameters": [
                {
                  "name": "learningRate",
                  "documentation": "The learning rate to use for the SGD algorithm.",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.SGDOptimizer](#class:train.Optimizer)",
              "documentation": "Constructs a [tf.SGDOptimizer](#class:train.Optimizer) that uses stochastic gradient descent.\n\n```js\n// Fit a quadratic function by learning the coefficients a, b, c.\nconst xs = tf.tensor1d([0, 1, 2, 3]);\nconst ys = tf.tensor1d([1.1, 5.9, 16.8, 33.9]);\n\nconst a = tf.scalar(Math.random()).variable();\nconst b = tf.scalar(Math.random()).variable();\nconst c = tf.scalar(Math.random()).variable();\n\n// y = a * x^2 + b * x + c.\nconst f = x => a.mul(x.square()).add(b.mul(x)).add(c);\nconst loss = (pred, label) => pred.sub(label).square().mean();\n\nconst learningRate = 0.01;\nconst optimizer = tf.train.sgd(learningRate);\n\n// Train the model.\nfor (let i = 0; i < 10; i++) {\n   optimizer.minimize(() => loss(f(xs), ys));\n}\n\n// Make predictions.\nconsole.log(\n     `a: ${a.dataSync()}, b: ${b.dataSync()}, c: ${c.dataSync()}`);\nconst preds = f(xs).dataSync();\npreds.forEach((pred, i) => {\n   console.log(`x: ${i}, pred: ${pred}`);\n});\n```",
              "fileName": "#65",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/optimizers/optimizer_constructors.ts#L65-L67",
              "isFunction": true,
              "displayName": "tf.train.sgd",
              "urlHash": "train.sgd"
            },
            {
              "docInfo": {
                "heading": "Training",
                "subheading": "Optimizers",
                "namespace": "train"
              },
              "symbolName": "momentum",
              "namespace": "train",
              "paramStr": "(learningRate, momentum, useNesterov?)",
              "parameters": [
                {
                  "name": "learningRate",
                  "documentation": "The learning rate to use for the Momentum gradient\ndescent algorithm.",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "momentum",
                  "documentation": "The momentum to use for the momentum gradient descent\nalgorithm.",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "useNesterov",
                  "documentation": "",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.MomentumOptimizer](#class:train.Optimizer)",
              "documentation": "Constructs a [tf.MomentumOptimizer](#class:train.Optimizer) that uses momentum gradient descent.\n\nSee\n[http://proceedings.mlr.press/v28/sutskever13.pdf](\nhttp://proceedings.mlr.press/v28/sutskever13.pdf)",
              "fileName": "#84",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/optimizers/optimizer_constructors.ts#L84-L87",
              "isFunction": true,
              "displayName": "tf.train.momentum",
              "urlHash": "train.momentum"
            },
            {
              "docInfo": {
                "heading": "Training",
                "subheading": "Optimizers",
                "namespace": "train"
              },
              "symbolName": "adagrad",
              "namespace": "train",
              "paramStr": "(learningRate, initialAccumulatorValue?)",
              "parameters": [
                {
                  "name": "learningRate",
                  "documentation": "The learning rate to use for the Adagrad gradient\ndescent algorithm.",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "initialAccumulatorValue",
                  "documentation": "Starting value for the accumulators, must be\npositive.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.AdagradOptimizer](#class:train.Optimizer)",
              "documentation": "Constructs a [tf.AdagradOptimizer](#class:train.Optimizer) that uses the Adagrad algorithm.\nSee\n[http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf](\nhttp://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)\nor\n[http://ruder.io/optimizing-gradient-descent/index.html#adagrad](\nhttp://ruder.io/optimizing-gradient-descent/index.html#adagrad)",
              "fileName": "#191",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/optimizers/optimizer_constructors.ts#L191-L194",
              "isFunction": true,
              "displayName": "tf.train.adagrad",
              "urlHash": "train.adagrad"
            },
            {
              "docInfo": {
                "heading": "Training",
                "subheading": "Optimizers",
                "namespace": "train"
              },
              "symbolName": "adadelta",
              "namespace": "train",
              "paramStr": "(learningRate?, rho?, epsilon?)",
              "parameters": [
                {
                  "name": "learningRate",
                  "documentation": "The learning rate to use for the Adadelta gradient\ndescent algorithm.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "rho",
                  "documentation": "The learning rate decay over each update.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "epsilon",
                  "documentation": "A constant epsilon used to better condition the grad\nupdate.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.AdadeltaOptimizer](#class:train.Optimizer)",
              "documentation": "Constructs a [tf.AdadeltaOptimizer](#class:train.Optimizer) that uses the Adadelta algorithm.\nSee [https://arxiv.org/abs/1212.5701](https://arxiv.org/abs/1212.5701)",
              "fileName": "#149",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/optimizers/optimizer_constructors.ts#L149-L152",
              "isFunction": true,
              "displayName": "tf.train.adadelta",
              "urlHash": "train.adadelta"
            },
            {
              "docInfo": {
                "heading": "Training",
                "subheading": "Optimizers",
                "namespace": "train"
              },
              "symbolName": "adam",
              "namespace": "train",
              "paramStr": "(learningRate?, beta1?, beta2?, epsilon?)",
              "parameters": [
                {
                  "name": "learningRate",
                  "documentation": "The learning rate to use for the Adam gradient\ndescent algorithm.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "beta1",
                  "documentation": "The exponential decay rate for the 1st moment estimates.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "beta2",
                  "documentation": "The exponential decay rate for the 2nd moment estimates.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "epsilon",
                  "documentation": "A small constant for numerical stability.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "AdamOptimizer",
              "documentation": "Constructs a `AdamOptimizer` that uses the Adam algorithm.\nSee [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)",
              "fileName": "#130",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/optimizers/optimizer_constructors.ts#L130-L134",
              "isFunction": true,
              "displayName": "tf.train.adam",
              "urlHash": "train.adam"
            },
            {
              "docInfo": {
                "heading": "Training",
                "subheading": "Optimizers",
                "namespace": "train"
              },
              "symbolName": "adamax",
              "namespace": "train",
              "paramStr": "(learningRate?, beta1?, beta2?, epsilon?, decay?)",
              "parameters": [
                {
                  "name": "learningRate",
                  "documentation": "The learning rate to use for the Adamax gradient\ndescent algorithm.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "beta1",
                  "documentation": "The exponential decay rate for the 1st moment estimates.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "beta2",
                  "documentation": "The exponential decay rate for the 2nd moment estimates.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "epsilon",
                  "documentation": "A small constant for numerical stability.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "decay",
                  "documentation": "The learning rate decay over each update.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "AdamaxOptimizer",
              "documentation": "Constructs a `AdamaxOptimizer` that uses the Adamax algorithm.\nSee [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)",
              "fileName": "#168",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/optimizers/optimizer_constructors.ts#L168-L172",
              "isFunction": true,
              "displayName": "tf.train.adamax",
              "urlHash": "train.adamax"
            },
            {
              "docInfo": {
                "heading": "Training",
                "subheading": "Optimizers",
                "namespace": "train"
              },
              "symbolName": "rmsprop",
              "namespace": "train",
              "paramStr": "(learningRate, decay?, momentum?, epsilon?, centered?)",
              "parameters": [
                {
                  "name": "learningRate",
                  "documentation": "The learning rate to use for the RMSProp gradient\ndescent algorithm.",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "decay",
                  "documentation": "The discounting factor for the history/coming gradient.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "momentum",
                  "documentation": "The momentum to use for the RMSProp gradient descent\nalgorithm.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "epsilon",
                  "documentation": "Small value to avoid zero denominator.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "centered",
                  "documentation": "If true, gradients are normalized by the estimated\nvariance of the gradient.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.RMSPropOptimizer](#class:train.Optimizer)",
              "documentation": "Constructs a [tf.RMSPropOptimizer](#class:train.Optimizer) that uses RMSProp gradient\ndescent. This implementation uses plain momentum and is not centered\nversion of RMSProp.\n\nSee\n[http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf](\nhttp://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)",
              "fileName": "#110",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/optimizers/optimizer_constructors.ts#L110-L115",
              "isFunction": true,
              "displayName": "tf.train.rmsprop",
              "urlHash": "train.rmsprop"
            }
          ]
        },
        {
          "name": "Losses",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Training",
                "subheading": "Losses",
                "namespace": "losses"
              },
              "symbolName": "absoluteDifference",
              "namespace": "losses",
              "paramStr": "(labels, predictions, weights?, reduction?)",
              "parameters": [
                {
                  "name": "labels",
                  "documentation": "The ground truth output tensor, same dimensions as\n'predictions'.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "predictions",
                  "documentation": "The predicted outputs.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "weights",
                  "documentation": "Tensor whose rank is either 0, or the same rank as\n`labels`, and must be broadcastable to `labels` (i.e., all dimensions\nmust be either `1`, or the same as the corresponding `losses`\ndimension).",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "reduction",
                  "documentation": "Type of reduction to apply to loss. Should be of type\n`Reduction`",
                  "type": "Reduction",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the absolute difference loss between two tensors.",
              "fileName": "#104",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/loss_ops.ts#L104-L120",
              "isFunction": true,
              "displayName": "tf.losses.absoluteDifference",
              "urlHash": "losses.absoluteDifference"
            },
            {
              "docInfo": {
                "heading": "Training",
                "subheading": "Losses",
                "namespace": "losses"
              },
              "symbolName": "computeWeightedLoss",
              "namespace": "losses",
              "paramStr": "(losses, weights?, reduction?)",
              "parameters": [
                {
                  "name": "losses",
                  "documentation": "Tensor of shape `[batch_size, d1, ... dN]`.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "weights",
                  "documentation": "Tensor whose rank is either 0, or the same rank as\n`losses`, and must be broadcastable to `losses` (i.e., all\ndimensions must be either `1`, or the same as the corresponding\n`losses` dimension).",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "reduction",
                  "documentation": "",
                  "type": "Reduction",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the weighted loss between two tensors.",
              "fileName": "#47",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/loss_ops.ts#L47-L88",
              "isFunction": true,
              "displayName": "tf.losses.computeWeightedLoss",
              "urlHash": "losses.computeWeightedLoss"
            },
            {
              "docInfo": {
                "heading": "Training",
                "subheading": "Losses",
                "namespace": "losses"
              },
              "symbolName": "cosineDistance",
              "namespace": "losses",
              "paramStr": "(labels, predictions, axis, weights?, reduction?)",
              "parameters": [
                {
                  "name": "labels",
                  "documentation": "The ground truth output tensor, same dimensions as\n'predictions'.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "predictions",
                  "documentation": "The predicted outputs.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "The dimension along which the cosine distance is computed.",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "weights",
                  "documentation": "Tensor whose rank is either 0, or the same rank as\n`labels`, and must be broadcastable to `labels` (i.e., all dimensions\nmust be either `1`, or the same as the corresponding `losses`\ndimension).",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "reduction",
                  "documentation": "Type of reduction to apply to loss. Should be of type\n`Reduction`",
                  "type": "Reduction",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the cosine distance loss between two tensors.",
              "fileName": "#169",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/loss_ops.ts#L169-L186",
              "isFunction": true,
              "displayName": "tf.losses.cosineDistance",
              "urlHash": "losses.cosineDistance"
            },
            {
              "docInfo": {
                "heading": "Training",
                "subheading": "Losses",
                "namespace": "losses"
              },
              "symbolName": "hingeLoss",
              "namespace": "losses",
              "paramStr": "(labels, predictions, weights?, reduction?)",
              "parameters": [
                {
                  "name": "labels",
                  "documentation": "The ground truth output tensor, same dimensions as\n'predictions'.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "predictions",
                  "documentation": "The predicted outputs.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "weights",
                  "documentation": "Tensor whose rank is either 0, or the same rank as\n`labels`, and must be broadcastable to `labels` (i.e., all dimensions\nmust be either `1`, or the same as the corresponding `losses`\ndimension).",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "reduction",
                  "documentation": "Type of reduction to apply to loss. Should be of type\n`Reduction`",
                  "type": "Reduction",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the Hinge loss between two tensors.",
              "fileName": "#202",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/loss_ops.ts#L202-L219",
              "isFunction": true,
              "displayName": "tf.losses.hingeLoss",
              "urlHash": "losses.hingeLoss"
            },
            {
              "docInfo": {
                "heading": "Training",
                "subheading": "Losses",
                "namespace": "losses"
              },
              "symbolName": "huberLoss",
              "namespace": "losses",
              "paramStr": "(labels, predictions, weights?, delta?, reduction?)",
              "parameters": [
                {
                  "name": "labels",
                  "documentation": "The ground truth output tensor, same dimensions as\n'predictions'.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "predictions",
                  "documentation": "The predicted outputs.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "weights",
                  "documentation": "Tensor whose rank is either 0, or the same rank as\n`labels`, and must be broadcastable to `labels` (i.e., all dimensions\nmust be either `1`, or the same as the corresponding `losses`\ndimension).",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "delta",
                  "documentation": "Point where huber loss changes from quadratic to linear.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "reduction",
                  "documentation": "Type of reduction to apply to loss. Should be of type\n`Reduction`.",
                  "type": "Reduction",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the huber loss between two tensors.",
              "fileName": "#355",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/loss_ops.ts#L355-L375",
              "isFunction": true,
              "displayName": "tf.losses.huberLoss",
              "urlHash": "losses.huberLoss"
            },
            {
              "docInfo": {
                "heading": "Training",
                "subheading": "Losses",
                "namespace": "losses"
              },
              "symbolName": "logLoss",
              "namespace": "losses",
              "paramStr": "(labels, predictions, weights?, epsilon?, reduction?)",
              "parameters": [
                {
                  "name": "labels",
                  "documentation": "The ground truth output tensor, same dimensions as\n'predictions'.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "predictions",
                  "documentation": "The predicted outputs.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "weights",
                  "documentation": "Tensor whose rank is either 0, or the same rank as\n`labels`, and must be broadcastable to `labels` (i.e., all dimensions\nmust be either `1`, or the same as the corresponding `losses`\ndimension).",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "epsilon",
                  "documentation": "A small increment to avoid taking log of zero",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "reduction",
                  "documentation": "Type of reduction to apply to loss. Should be of type\n`Reduction`",
                  "type": "Reduction",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the log loss between two tensors.",
              "fileName": "#236",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/loss_ops.ts#L236-L255",
              "isFunction": true,
              "displayName": "tf.losses.logLoss",
              "urlHash": "losses.logLoss"
            },
            {
              "docInfo": {
                "heading": "Training",
                "subheading": "Losses",
                "namespace": "losses"
              },
              "symbolName": "meanSquaredError",
              "namespace": "losses",
              "paramStr": "(labels, predictions, weights?, reduction?)",
              "parameters": [
                {
                  "name": "labels",
                  "documentation": "The ground truth output tensor, same dimensions as\n'predictions'.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "predictions",
                  "documentation": "The predicted outputs.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "weights",
                  "documentation": "Tensor whose rank is either 0, or the same rank as\n`labels`, and must be broadcastable to `labels` (i.e., all dimensions\nmust be either `1`, or the same as the corresponding `losses`\ndimension).",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "reduction",
                  "documentation": "Type of reduction to apply to loss. Should be of type\n`Reduction`",
                  "type": "Reduction",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the mean squared error between two tensors.",
              "fileName": "#136",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/loss_ops.ts#L136-L152",
              "isFunction": true,
              "displayName": "tf.losses.meanSquaredError",
              "urlHash": "losses.meanSquaredError"
            },
            {
              "docInfo": {
                "heading": "Training",
                "subheading": "Losses",
                "namespace": "losses"
              },
              "symbolName": "sigmoidCrossEntropy",
              "namespace": "losses",
              "paramStr": "(multiClassLabels, logits, weights?, labelSmoothing?, reduction?)",
              "parameters": [
                {
                  "name": "multiClassLabels",
                  "documentation": "The ground truth output tensor of shape\n[batch_size, num_classes], same dimensions as 'predictions'.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "logits",
                  "documentation": "The predicted outputs.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "weights",
                  "documentation": "Tensor whose rank is either 0, or the same rank as\n`labels`, and must be broadcastable to `labels` (i.e., all dimensions\nmust be either `1`, or the same as the corresponding `losses`\ndimension).",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "labelSmoothing",
                  "documentation": "If greater than 0, then smooth the labels.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "reduction",
                  "documentation": "Type of reduction to apply to loss. Should be of type\n`Reduction`",
                  "type": "Reduction",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the sigmoid cross entropy loss between two tensors.\n\nIf labelSmoothing is nonzero, smooth the labels towards 1/2:\n\n   newMulticlassLabels = multiclassLabels * (1 - labelSmoothing)\n                         + 0.5 * labelSmoothing",
              "fileName": "#313",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/loss_ops.ts#L313-L338",
              "isFunction": true,
              "displayName": "tf.losses.sigmoidCrossEntropy",
              "urlHash": "losses.sigmoidCrossEntropy"
            },
            {
              "docInfo": {
                "heading": "Training",
                "subheading": "Losses",
                "namespace": "losses"
              },
              "symbolName": "softmaxCrossEntropy",
              "namespace": "losses",
              "paramStr": "(onehotLabels, logits, weights?, labelSmoothing?, reduction?)",
              "parameters": [
                {
                  "name": "onehotLabels",
                  "documentation": "One hot encoded labels\n[batch_size, num_classes], same dimensions as 'predictions'.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "logits",
                  "documentation": "The predicted outputs.",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "weights",
                  "documentation": "Tensor whose rank is either 0, or 1, and must be\nbroadcastable to `loss`  of shape [batch_size]",
                  "type": "[tf.Tensor](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "labelSmoothing",
                  "documentation": "If greater than 0, then smooth the labels.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "reduction",
                  "documentation": "Type of reduction to apply to loss. Should be of type\n`Reduction`",
                  "type": "Reduction",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Computes the softmax cross entropy loss between two tensors.\n\nIf labelSmoothing is nonzero, smooth the labels towards 1/2:\n\n   newOnehotLabels = onehotLabels * (1 - labelSmoothing)\n                         + labelSmoothing / numClasses",
              "fileName": "#457",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/loss_ops.ts#L457-L485",
              "isFunction": true,
              "displayName": "tf.losses.softmaxCrossEntropy",
              "urlHash": "losses.softmaxCrossEntropy"
            }
          ]
        },
        {
          "name": "Classes",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Training",
                "subheading": "Classes",
                "namespace": "train"
              },
              "symbolName": "Optimizer",
              "namespace": "train",
              "documentation": "",
              "fileName": "#24",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/optimizers/optimizer.ts#L24-L78",
              "methods": [
                {
                  "docInfo": {
                    "heading": "Training",
                    "subheading": "Optimizers"
                  },
                  "symbolName": "minimize",
                  "paramStr": "(f, returnCost?, varList?)",
                  "parameters": [
                    {
                      "name": "f",
                      "documentation": "The function to execute and whose output to minimize.",
                      "type": "() => [tf.Scalar](#class:Tensor)",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "returnCost",
                      "documentation": "Whether to return the scalar cost value produced by\nexecuting `f()`.",
                      "type": "boolean",
                      "optional": true,
                      "isConfigParam": false
                    },
                    {
                      "name": "varList",
                      "documentation": "An optional list of variables to update. If specified, only\nthe trainable variables in varList will be updated by minimize. Defaults to\nall trainable variables.",
                      "type": "[tf.Variable](#class:Variable)[]",
                      "optional": true,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "[tf.Scalar](#class:Tensor)\n      |null",
                  "documentation": "Executes `f()` and minimizes the scalar output of `f()` by computing\ngradients of y with respect to the list of trainable variables provided by\n`varList`. If no list is provided, it defaults to all trainable variables.",
                  "fileName": "#38",
                  "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/optimizers/optimizer.ts#L38-L54",
                  "isFunction": true,
                  "urlHash": "tf.train.Optimizer.minimize"
                }
              ],
              "isClass": true,
              "inheritsFrom": "Serializable",
              "displayName": "tf.train.Optimizer",
              "urlHash": "class:train.Optimizer"
            }
          ]
        }
      ]
    },
    {
      "name": "Performance",
      "description": "",
      "subheadings": [
        {
          "name": "Memory",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Performance",
                "subheading": "Memory"
              },
              "symbolName": "tidy",
              "paramStr": "(nameOrFn, fn?, gradMode?)",
              "parameters": [
                {
                  "name": "nameOrFn",
                  "documentation": "The name of the closure, or the function to execute.\nIf a name is provided, the 2nd argument should be the function.\nIf debug mode is on, the timing and the memory usage of the function\nwill be tracked and displayed on the console using the provided name.",
                  "type": "string|Function",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "fn",
                  "documentation": "The function to execute.",
                  "type": "Function",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "gradMode",
                  "documentation": "",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "void|number|string|[tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[]|{[key:\nstring]:[tf.Tensor](#class:Tensor)|number|string}",
              "documentation": "Executes the provided function `fn` and after it is executed, cleans up all\nintermediate tensors allocated by `fn` except those returned by `fn`.\n`f` must not return a Promise (async functions not allowed).\nThe returned result can be a complex object, however tidy only walks the\ntop-level properties (depth 1) of that object to search for tensors, or\nlists of tensors that need to be tracked in the parent scope.\n\nUsing this method helps avoid memory leaks. In general, wrap calls to\noperations in [tf.tidy()](#tidy) for automatic memory cleanup.\n\nWhen in safe mode, you must enclose all [tf.Tensor](#class:Tensor) creation and ops\ninside a [tf.tidy()](#tidy) to prevent memory leaks.\n\n```js\n// y = 2 ^ 2 + 1\nconst y = tf.tidy(() => {\n   // a, b, and one will be cleaned up when the tidy ends.\n   const one = tf.scalar(1);\n   const a = tf.scalar(2);\n   const b = a.square();\n\n   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\n\n   // The value returned inside the tidy function will return\n   // through the tidy, in this case to the variable y.\n   return b.add(one);\n});\n\nconsole.log('numTensors (outside tidy): ' + tf.memory().numTensors);\ny.print();\n```",
              "fileName": "#187",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/environment.ts#L187-L190",
              "isFunction": true,
              "displayName": "tf.tidy",
              "urlHash": "tidy"
            },
            {
              "docInfo": {
                "heading": "Performance",
                "subheading": "Memory"
              },
              "symbolName": "dispose",
              "paramStr": "(container)",
              "parameters": [
                {
                  "name": "container",
                  "documentation": "an object that may be a [tf.Tensor](#class:Tensor) or may directly contain\n[tf.Tensor](#class:Tensor)s, such as a `Tensor[]` or `{key: Tensor, ...}`. If the\nobject is not a [tf.Tensor](#class:Tensor) or does not contain `Tensors`, nothing\nhappens. In general it is safe to pass any object here, except that\n`Promise`s are not supported.",
                  "type": "void|number|string|[tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[]|{[key:\nstring]:[tf.Tensor](#class:Tensor)|number|string}",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "void",
              "documentation": "Disposes any [tf.Tensor](#class:Tensor)s found within the provided object.",
              "fileName": "#202",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/environment.ts#L202-L205",
              "isFunction": true,
              "displayName": "tf.dispose",
              "urlHash": "dispose"
            },
            {
              "docInfo": {
                "heading": "Performance",
                "subheading": "Memory"
              },
              "symbolName": "keep",
              "paramStr": "(result)",
              "parameters": [
                {
                  "name": "result",
                  "documentation": "The tensor to keep from being disposed.",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "Keeps a [tf.Tensor](#class:Tensor) generated inside a [tf.tidy()](#tidy) from being disposed\nautomatically.\n\n```js\nlet b;\nconst y = tf.tidy(() => {\n   const one = tf.scalar(1);\n   const a = tf.scalar(2);\n\n   // b will not be cleaned up by the tidy. a and one will be cleaned up\n   // when the tidy ends.\n   b = tf.keep(a.square());\n\n   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\n\n   // The value returned inside the tidy function will return\n   // through the tidy, in this case to the variable y.\n   return b.add(one);\n});\n\nconsole.log('numTensors (outside tidy): ' + tf.memory().numTensors);\nconsole.log('y:');\ny.print();\nconsole.log('b:');\nb.print();\n```",
              "fileName": "#238",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/environment.ts#L238-L240",
              "isFunction": true,
              "displayName": "tf.keep",
              "urlHash": "keep"
            },
            {
              "docInfo": {
                "heading": "Performance",
                "subheading": "Memory"
              },
              "symbolName": "memory",
              "paramStr": "()",
              "parameters": [],
              "returnType": "MemoryInfo",
              "documentation": "Returns memory info at the current time in the program. The result is an\nobject with the following properties:\n\n- `numBytes`: Number of bytes allocated (undisposed) at this time.\n- `numTensors`: Number of unique tensors allocated.\n- `numDataBuffers`: Number of unique data buffers allocated\n   (undisposed) at this time, which is ≤ the number of tensors\n   (e.g. `a.reshape(newShape)` makes a new Tensor that shares the same\n   data buffer with `a`).\n- `unreliable`: `Optional` `boolean`:\n    - On WebGL, not present (always reliable).\n    - On CPU, true. Due to automatic garbage collection, these numbers\n     represent undisposed tensors, i.e. not wrapped in `tidy()`, or\n     lacking a call to `tensor.dispose()`.",
              "fileName": "#111",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/environment.ts#L111-L113",
              "isFunction": true,
              "displayName": "tf.memory",
              "urlHash": "memory"
            }
          ]
        },
        {
          "name": "Timing",
          "description": "",
          "symbols": [
            {
              "docInfo": {
                "heading": "Performance",
                "subheading": "Timing"
              },
              "symbolName": "time",
              "paramStr": "(f)",
              "parameters": [
                {
                  "name": "f",
                  "documentation": "The function to execute and time.",
                  "type": "() => void",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "Promise",
              "documentation": "Executes `f()` and returns a promise that resolves with timing\ninformation.\n\nThe result is an object with the following properties:\n\n- `wallMs`: Wall execution time.\n- `kernelMs`: Kernel execution time, ignoring data transfer.\n- On `WebGL` The following additional properties exist:\n   - `uploadWaitMs`: CPU blocking time on texture uploads.\n   - `downloadWaitMs`: CPU blocking time on texture downloads (readPixels).\n\n```js\nconst x = tf.randomNormal([20, 20]);\nconst time = await tf.time(() => x.matMul(x));\n\nconsole.log(`kernelMs: ${time.kernelMs}, wallTimeMs: ${time.wallMs}`);\n```",
              "fileName": "#264",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/environment.ts#L264-L266",
              "isFunction": true,
              "displayName": "tf.time",
              "urlHash": "time"
            },
            {
              "docInfo": {
                "heading": "Performance",
                "subheading": "Timing"
              },
              "symbolName": "nextFrame",
              "paramStr": "()",
              "parameters": [],
              "returnType": "Promise",
              "documentation": "Returns a promise that resolve when a requestAnimationFrame has completed.\n\nOn Node.js this uses setImmediate instead of requestAnimationFrame.\n\nThis is simply a sugar method so that users can do the following:\n`await tf.nextFrame();`",
              "fileName": "#31",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/browser_util.ts#L31-L33",
              "isFunction": true,
              "displayName": "tf.nextFrame",
              "urlHash": "nextFrame"
            }
          ]
        },
        {
          "name": "Profile",
          "symbols": [
            {
              "docInfo": {
                "heading": "Performance",
                "subheading": "Profile"
              },
              "symbolName": "profile",
              "paramStr": "(f)",
              "parameters": [
                {
                  "name": "f",
                  "documentation": "",
                  "type": "() => void|number|string|[tf.Tensor](#class:Tensor)|[tf.Tensor](#class:Tensor)[]|{[key:\nstring]:[tf.Tensor](#class:Tensor)|number|string}",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "Promise",
              "documentation": "Executes the provided function `f()` and returns a promise that resolves\nwith information about the function's memory use:\n- `newBytes`: tne number of new bytes allocated\n- `newTensors`: the number of new tensors created\n- `peakBytes`: the peak number of bytes allocated\n- `kernels`: an array of objects for each kernel involved that reports\ntheir input and output shapes, number of bytes used, and number of new\ntensors created.\n\n```js\nconst profile = await tf.profile(() => {\n   const x = tf.tensor1d([1, 2, 3]);\n   let x2 = x.square();\n   x2.dispose();\n   x2 = x.square();\n   x2.dispose();\n   return x;\n});\n\nconsole.log(`newBytes: ${profile.newBytes}`);\nconsole.log(`newTensors: ${profile.newTensors}`);\nconsole.log(`byte usage over all kernels: ${profile.kernels.map(k =>\nk.totalBytesSnapshot)}`);\n```",
              "fileName": "#143",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/environment.ts#L143-L145",
              "isFunction": true,
              "displayName": "tf.profile",
              "urlHash": "profile"
            }
          ]
        }
      ]
    },
    {
      "name": "Environment",
      "description": "<p>TensorFlow.js can run mathematical operations on\ndifferent backends. Currently, we support WebGL and JavaScript\nCPU. By default, we choose the 'best' backend available, but\nallow users to customize their backend.</p>",
      "subheadings": [
        {
          "symbols": [
            {
              "docInfo": {
                "heading": "Environment"
              },
              "symbolName": "disposeVariables",
              "paramStr": "()",
              "parameters": [],
              "returnType": "void",
              "documentation": "Dispose all variables kept in backend engine.",
              "fileName": "#90",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/environment.ts#L90-L92",
              "isFunction": true,
              "displayName": "tf.disposeVariables",
              "urlHash": "disposeVariables"
            },
            {
              "docInfo": {
                "heading": "Environment"
              },
              "symbolName": "getBackend",
              "paramStr": "()",
              "parameters": [],
              "returnType": "string",
              "documentation": "Returns the current backend name (cpu, webgl, etc). The backend is\nresponsible for creating tensors and executing operations on those tensors.",
              "fileName": "#81",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/environment.ts#L81-L84",
              "isFunction": true,
              "displayName": "tf.getBackend",
              "urlHash": "getBackend"
            },
            {
              "docInfo": {
                "heading": "Environment"
              },
              "symbolName": "setBackend",
              "paramStr": "(backendName, safeMode?)",
              "parameters": [
                {
                  "name": "backendName",
                  "documentation": "The name of the backend. Currently supports\n`'webgl'|'cpu'` in the browser, and `'tensorflow'` under node.js\n(requires tfjs-node).",
                  "type": "string",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "safeMode",
                  "documentation": "Defaults to false. In safe mode, you are forced to\nconstruct tensors and call math operations inside a `tidy()` which\nwill automatically clean up intermediate tensors.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "void",
              "documentation": "Sets the backend (cpu, webgl, etc) responsible for creating tensors and\nexecuting operations on those tensors.\n\nNote this disposes the current backend, if any, as well as any tensors\nassociated with it. A new backend is initialized, even if it is of the\nsame type as the previous one.",
              "fileName": "#69",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/environment.ts#L69-L74",
              "isFunction": true,
              "displayName": "tf.setBackend",
              "urlHash": "setBackend"
            }
          ]
        }
      ]
    },
    {
      "name": "Constraints",
      "description": "<p>Constraints are added to attributes\nof a Layer (such as weights, kernels, or biases) at\nconstruction time to clamp, or otherwise enforce an allowed range,\nof values for different components of the Layer.</p>",
      "subheadings": [
        {
          "name": "Classes",
          "symbols": [
            {
              "docInfo": {
                "heading": "Constraints",
                "subheading": "Classes",
                "namespace": "constraints"
              },
              "symbolName": "Constraint",
              "namespace": "constraints",
              "documentation": "Base class for functions that impose constraints on weight values",
              "fileName": "#37",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/constraints.ts#L37-L43",
              "methods": [],
              "isClass": true,
              "inheritsFrom": "serialization.Serializable",
              "displayName": "tf.constraints.Constraint",
              "urlHash": "class:constraints.Constraint"
            }
          ]
        },
        {
          "symbols": [
            {
              "docInfo": {
                "heading": "Constraints",
                "namespace": "constraints",
                "useDocsFrom": "MaxNorm",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "maxNorm",
              "namespace": "constraints",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "maxValue",
                  "documentation": "Maximum norm for incoming weights",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "axis",
                  "documentation": "Axis along which to calculate norms.\n\n  For instance, in a `Dense` layer the weight matrix\n  has shape `[inputDim, outputDim]`,\n  set `axis` to `0` to constrain each weight vector\n  of length `[inputDim,]`.\n  In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n  the weight tensor has shape\n  `[rows, cols, inputDepth, outputDepth]`,\n  set `axis` to `[0, 1, 2]`\n  to constrain the weights of each filter tensor of size\n  `[rows, cols, inputDepth]`.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.constraints.Constraint](#class:constraints.Constraint)",
              "documentation": "MaxNorm weight constraint.\n\nConstrains the weights incident to each hidden unit\nto have a norm less than or equal to a desired value.\n\nReferences\n       - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting\nSrivastava, Hinton, et al.\n2014](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)",
              "fileName": "#21",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_constraints.ts#L21-L23",
              "isFunction": true,
              "displayName": "tf.constraints.maxNorm",
              "urlHash": "constraints.maxNorm"
            },
            {
              "docInfo": {
                "heading": "Constraints",
                "namespace": "constraints",
                "useDocsFrom": "MinMaxNormConfig",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "minMaxNorm",
              "namespace": "constraints",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "minValue",
                  "documentation": "Minimum norm for incoming weights",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "maxValue",
                  "documentation": "Maximum norm for incoming weights",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "axis",
                  "documentation": "Axis along which to calculate norms.\nFor instance, in a `Dense` layer the weight matrix\nhas shape `[inputDim, outputDim]`,\nset `axis` to `0` to constrain each weight vector\nof length `[inputDim,]`.\nIn a `Conv2D` layer with `dataFormat=\"channels_last\"`,\nthe weight tensor has shape\n`[rows, cols, inputDepth, outputDepth]`,\nset `axis` to `[0, 1, 2]`\nto constrain the weights of each filter tensor of size\n`[rows, cols, inputDepth]`.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "rate",
                  "documentation": "Rate for enforcing the constraint: weights will be rescaled to yield:\n`(1 - rate) * norm + rate * norm.clip(minValue, maxValue)`.\nEffectively, this means that rate=1.0 stands for strict\nenforcement of the constraint, while rate<1.0 means that\nweights will be rescaled at each step to slowly move\ntowards a value inside the desired interval.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.constraints.Constraint](#class:constraints.Constraint)",
              "documentation": "",
              "fileName": "#56",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_constraints.ts#L56-L58",
              "isFunction": true,
              "displayName": "tf.constraints.minMaxNorm",
              "urlHash": "constraints.minMaxNorm"
            },
            {
              "docInfo": {
                "heading": "Constraints",
                "namespace": "constraints",
                "useDocsFrom": "NonNeg"
              },
              "symbolName": "nonNeg",
              "namespace": "constraints",
              "paramStr": "()",
              "parameters": [],
              "returnType": "[tf.constraints.Constraint](#class:constraints.Constraint)",
              "documentation": "Constains the weight to be non-negative.",
              "fileName": "#44",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_constraints.ts#L44-L46",
              "isFunction": true,
              "displayName": "tf.constraints.nonNeg",
              "urlHash": "constraints.nonNeg"
            },
            {
              "docInfo": {
                "heading": "Constraints",
                "namespace": "constraints",
                "useDocsFrom": "UnitNorm",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "unitNorm",
              "namespace": "constraints",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "axis",
                  "documentation": "Axis along which to calculate norms.\n\nFor instance, in a `Dense` layer the weight matrix\nhas shape `[inputDim, outputDim]`,\nset `axis` to `0` to constrain each weight vector\nof length `[inputDim,]`.\nIn a `Conv2D` layer with `dataFormat=\"channels_last\"`,\nthe weight tensor has shape\n[rows, cols, inputDepth, outputDepth]`,\nset `axis` to `[0, 1, 2]`\nto constrain the weights of each filter tensor of size\n`[rows, cols, inputDepth]`.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.constraints.Constraint](#class:constraints.Constraint)",
              "documentation": "Constrains the weights incident to each hidden unit to have unit norm.",
              "fileName": "#33",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_constraints.ts#L33-L35",
              "isFunction": true,
              "displayName": "tf.constraints.unitNorm",
              "urlHash": "constraints.unitNorm"
            }
          ]
        }
      ]
    },
    {
      "name": "Initializers",
      "description": "<p>Initializers are used in Layers\nto establish the starting the values of weights, biases, kernels, \netc.</p>",
      "subheadings": [
        {
          "name": "Classes",
          "symbols": [
            {
              "docInfo": {
                "heading": "Initializers",
                "subheading": "Classes",
                "namespace": "initializers"
              },
              "symbolName": "Initializer",
              "namespace": "initializers",
              "documentation": "Initializer base class.",
              "fileName": "#42",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/initializers.ts#L42-L57",
              "methods": [],
              "isClass": true,
              "inheritsFrom": "serialization.Serializable",
              "displayName": "tf.initializers.Initializer",
              "urlHash": "class:initializers.Initializer"
            }
          ]
        },
        {
          "symbols": [
            {
              "docInfo": {
                "heading": "Initializers",
                "namespace": "initializers",
                "useDocsFrom": "Constant",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "constant",
              "namespace": "initializers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "value",
                  "documentation": "The value for each element in the variable. ",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.initializers.Initializer](#class:initializers.Initializer)",
              "documentation": "Initializer that generates values initialized to some constant.",
              "fileName": "#43",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_initializers.ts#L43-L45",
              "isFunction": true,
              "displayName": "tf.initializers.constant",
              "urlHash": "initializers.constant"
            },
            {
              "docInfo": {
                "heading": "Initializers",
                "namespace": "initializers",
                "useDocsFrom": "GlorotNormal",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "glorotNormal",
              "namespace": "initializers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "seed",
                  "documentation": "Random number generator seed. ",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.initializers.Initializer](#class:initializers.Initializer)",
              "documentation": "Glorot normal initializer, also called Xavier normal initializer.\nIt draws samples from a truncated normal distribution centered on 0\nwith `stddev = sqrt(2 / (fan_in + fan_out))`\nwhere `fan_in` is the number of input units in the weight tensor\nand `fan_out` is the number of output units in the weight tensor.\n\nReference:\n   Glorot & Bengio, AISTATS 2010\n       http://jmlr.org/proceedings/papers/v9/glorot10a/glorot10a.pdf",
              "fileName": "#127",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_initializers.ts#L127-L129",
              "isFunction": true,
              "displayName": "tf.initializers.glorotNormal",
              "urlHash": "initializers.glorotNormal"
            },
            {
              "docInfo": {
                "heading": "Initializers",
                "namespace": "initializers",
                "useDocsFrom": "GlorotUniform",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "glorotUniform",
              "namespace": "initializers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "seed",
                  "documentation": "Random number generator seed. ",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.initializers.Initializer](#class:initializers.Initializer)",
              "documentation": "Glorot uniform initializer, also called Xavier uniform initializer.\nIt draws samples from a uniform distribution within [-limit, limit]\nwhere `limit` is `sqrt(6 / (fan_in + fan_out))`\nwhere `fan_in` is the number of input units in the weight tensor\nand `fan_out` is the number of output units in the weight tensor\n\nReference:\n   Glorot & Bengio, AISTATS 2010\n       http://jmlr.org/proceedings/papers/v9/glorot10a/glorot10a.pdf.",
              "fileName": "#115",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_initializers.ts#L115-L117",
              "isFunction": true,
              "displayName": "tf.initializers.glorotUniform",
              "urlHash": "initializers.glorotUniform"
            },
            {
              "docInfo": {
                "heading": "Initializers",
                "namespace": "initializers",
                "useDocsFrom": "HeNormal",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "heNormal",
              "namespace": "initializers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "seed",
                  "documentation": "Random number generator seed. ",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.initializers.Initializer](#class:initializers.Initializer)",
              "documentation": "He normal initializer.\n\nIt draws samples from a truncated normal distribution centered on 0\nwith `stddev = sqrt(2 / fanIn)`\nwhere `fanIn` is the number of input units in the weight tensor.\n\nReference:\n     He et al., http://arxiv.org/abs/1502.01852",
              "fileName": "#139",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_initializers.ts#L139-L141",
              "isFunction": true,
              "displayName": "tf.initializers.heNormal",
              "urlHash": "initializers.heNormal"
            },
            {
              "docInfo": {
                "heading": "Initializers",
                "namespace": "initializers",
                "useDocsFrom": "Identity",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "identity",
              "namespace": "initializers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "gain",
                  "documentation": "Multiplicative factor to apply to the identity matrix.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.initializers.Initializer](#class:initializers.Initializer)",
              "documentation": "Initializer that generates the identity matrix.\nOnly use for square 2D matrices.",
              "fileName": "#91",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_initializers.ts#L91-L93",
              "isFunction": true,
              "displayName": "tf.initializers.identity",
              "urlHash": "initializers.identity"
            },
            {
              "docInfo": {
                "heading": "Initializers",
                "namespace": "initializers",
                "useDocsFrom": "LeCunNormal",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "leCunNormal",
              "namespace": "initializers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "seed",
                  "documentation": "Random number generator seed. ",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.initializers.Initializer](#class:initializers.Initializer)",
              "documentation": "LeCun normal initializer.\n\nIt draws samples from a truncated normal distribution centered on 0\nwith `stddev = sqrt(1 / fanIn)`\nwhere `fanIn` is the number of input units in the weight tensor.\n\nReferences:\n   [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n   [Efficient Backprop](http://yann.lecun.com/exdb/publis/pdf/lecun-98b.pdf)",
              "fileName": "#151",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_initializers.ts#L151-L153",
              "isFunction": true,
              "displayName": "tf.initializers.leCunNormal",
              "urlHash": "initializers.leCunNormal"
            },
            {
              "docInfo": {
                "heading": "Initializers",
                "namespace": "initializers",
                "useDocsFrom": "Ones"
              },
              "symbolName": "ones",
              "namespace": "initializers",
              "paramStr": "()",
              "parameters": [],
              "returnType": "[tf.initializers.Initializer](#class:initializers.Initializer)",
              "documentation": "Initializer that generates tensors initialized to 1.",
              "fileName": "#31",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_initializers.ts#L31-L33",
              "isFunction": true,
              "displayName": "tf.initializers.ones",
              "urlHash": "initializers.ones"
            },
            {
              "docInfo": {
                "heading": "Initializers",
                "namespace": "initializers",
                "useDocsFrom": "Orthogonal",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "orthogonal",
              "namespace": "initializers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "gain",
                  "documentation": "Multiplicative factor to apply to the orthogonal matrix. Defaults to 1.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.initializers.Initializer](#class:initializers.Initializer)",
              "documentation": "Initializer that generates a random orthogonal matrix.\n\nReference:\n[Saxe et al., http://arxiv.org/abs/1312.6120](http://arxiv.org/abs/1312.6120)",
              "fileName": "#163",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_initializers.ts#L163-L165",
              "isFunction": true,
              "displayName": "tf.initializers.orthogonal",
              "urlHash": "initializers.orthogonal"
            },
            {
              "docInfo": {
                "heading": "Initializers",
                "namespace": "initializers",
                "useDocsFrom": "RandomNormal",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "randomNormal",
              "namespace": "initializers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "mean",
                  "documentation": "Mean of the random values to generate. ",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "stddev",
                  "documentation": "Standard deviation of the random values to generate. ",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "seed",
                  "documentation": "Used to seed the random generator. ",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.initializers.Initializer](#class:initializers.Initializer)",
              "documentation": "Initializer that generates random values initialized to a normal\ndistribution.",
              "fileName": "#67",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_initializers.ts#L67-L69",
              "isFunction": true,
              "displayName": "tf.initializers.randomNormal",
              "urlHash": "initializers.randomNormal"
            },
            {
              "docInfo": {
                "heading": "Initializers",
                "namespace": "initializers",
                "useDocsFrom": "RandomUniform",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "randomUniform",
              "namespace": "initializers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "minval",
                  "documentation": "Lower bound of the range of random values to generate. ",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "maxval",
                  "documentation": "Upper bound of the range of random values to generate. ",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "seed",
                  "documentation": "Used to seed the random generator. ",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.initializers.Initializer](#class:initializers.Initializer)",
              "documentation": "Initializer that generates random values initialized to a uniform\ndistribution.\n\nValues will be distributed uniformly between the configured minval and\nmaxval.",
              "fileName": "#55",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_initializers.ts#L55-L57",
              "isFunction": true,
              "displayName": "tf.initializers.randomUniform",
              "urlHash": "initializers.randomUniform"
            },
            {
              "docInfo": {
                "heading": "Initializers",
                "namespace": "initializers",
                "useDocsFrom": "TruncatedNormal",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "truncatedNormal",
              "namespace": "initializers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "mean",
                  "documentation": "Mean of the random values to generate. ",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "stddev",
                  "documentation": "Standard deviation of the random values to generate. ",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "seed",
                  "documentation": "Used to seed the random generator. ",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.initializers.Initializer](#class:initializers.Initializer)",
              "documentation": "Initializer that generates random values initialized to a truncated normal.\ndistribution.\n\nThese values are similar to values from a `RandomNormal` except that values\nmore than two standard deviations from the mean are discarded and re-drawn.\nThis is the recommended initializer for neural network weights and filters.",
              "fileName": "#79",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_initializers.ts#L79-L81",
              "isFunction": true,
              "displayName": "tf.initializers.truncatedNormal",
              "urlHash": "initializers.truncatedNormal"
            },
            {
              "docInfo": {
                "heading": "Initializers",
                "namespace": "initializers",
                "useDocsFrom": "VarianceScaling",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "varianceScaling",
              "namespace": "initializers",
              "paramStr": "(config)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "scale",
                  "documentation": "Scaling factor (positive float). ",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": true
                },
                {
                  "name": "mode",
                  "documentation": "Fanning mode for inputs and outputs. ",
                  "type": "'fanIn'|'fanOut'|'fanAvg'",
                  "optional": false,
                  "isConfigParam": true
                },
                {
                  "name": "distribution",
                  "documentation": "Probabilistic distribution of the values. ",
                  "type": "'normal'|'uniform'",
                  "optional": false,
                  "isConfigParam": true
                },
                {
                  "name": "seed",
                  "documentation": "Random number generator seed. ",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "[tf.initializers.Initializer](#class:initializers.Initializer)",
              "documentation": "Initializer capable of adapting its scale to the shape of weights.\nWith distribution=NORMAL, samples are drawn from a truncated normal\ndistribution centered on zero, with `stddev = sqrt(scale / n)` where n is:\n   - number of input units in the weight tensor, if mode = FAN_IN.\n   - number of output units, if mode = FAN_OUT.\n   - average of the numbers of input and output units, if mode = FAN_AVG.\nWith distribution=UNIFORM,\nsamples are drawn from a uniform distribution\nwithin [-limit, limit], with `limit = sqrt(3 * scale / n)`.",
              "fileName": "#103",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_initializers.ts#L103-L105",
              "isFunction": true,
              "displayName": "tf.initializers.varianceScaling",
              "urlHash": "initializers.varianceScaling"
            },
            {
              "docInfo": {
                "heading": "Initializers",
                "namespace": "initializers",
                "useDocsFrom": "Zeros"
              },
              "symbolName": "zeros",
              "namespace": "initializers",
              "paramStr": "()",
              "parameters": [],
              "returnType": "Zeros",
              "documentation": "Initializer that generates tensors initialized to 0.",
              "fileName": "#20",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_initializers.ts#L20-L22",
              "isFunction": true,
              "displayName": "tf.initializers.zeros",
              "urlHash": "initializers.zeros"
            }
          ]
        }
      ]
    },
    {
      "name": "Regularizers",
      "description": "<p>Regularizers can be attached to various components\nof a Layer to add a 'scoring' function to help drive weights, or \nother trainable values, away from excessively large values.  They're\ntypically used to promote a notion that a 'simpler' model is better\nthan a complicated model, assuming equal performance.</p>",
      "subheadings": [
        {
          "symbols": [
            {
              "docInfo": {
                "heading": "Regularizers",
                "namespace": "regularizers"
              },
              "symbolName": "L1L2",
              "namespace": "regularizers",
              "documentation": "Regularizer for L1 and L2 regularization.\n\nAdds a term to the loss to penalize large weights:\nloss += sum(l1 * abs(x)) + sum(l2 * x^2)",
              "fileName": "#51",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/regularizers.ts#L51-L97",
              "methods": [],
              "isClass": true,
              "inheritsFrom": "Regularizer",
              "displayName": "tf.regularizers.L1L2",
              "urlHash": "class:regularizers.L1L2"
            },
            {
              "docInfo": {
                "heading": "Regularizers",
                "namespace": "regularizers",
                "useDocsFrom": "L1L2",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "l1",
              "namespace": "regularizers",
              "paramStr": "(config?)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "l1",
                  "documentation": "L1 regularization rate. Defaults to 0.01. ",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": true
                }
              ],
              "returnType": "Regularizer",
              "documentation": "Regularizer for L1 and L2 regularization.\n\nAdds a term to the loss to penalize large weights:\nloss += sum(l1 * abs(x)) + sum(l2 * x^2)",
              "fileName": "#34",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_regularizers.ts#L34-L36",
              "isFunction": true,
              "displayName": "tf.regularizers.l1",
              "urlHash": "regularizers.l1"
            },
            {
              "docInfo": {
                "heading": "Regularizers",
                "namespace": "regularizers",
                "useDocsFrom": "L1L2",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "l1l2",
              "namespace": "regularizers",
              "paramStr": "(config?)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "l1",
                  "documentation": "L1 regularization rate. Defaults to 0.01. ",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                },
                {
                  "name": "l2",
                  "documentation": "L2 regularization rate. Defaults to 0.01. ",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": true
                }
              ],
              "returnType": "Regularizer",
              "documentation": "Regularizer for L1 and L2 regularization.\n\nAdds a term to the loss to penalize large weights:\nloss += sum(l1 * abs(x)) + sum(l2 * x^2)",
              "fileName": "#22",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_regularizers.ts#L22-L24",
              "isFunction": true,
              "displayName": "tf.regularizers.l1l2",
              "urlHash": "regularizers.l1l2"
            },
            {
              "docInfo": {
                "heading": "Regularizers",
                "namespace": "regularizers",
                "useDocsFrom": "L1L2",
                "configParamIndices": [
                  0
                ]
              },
              "symbolName": "l2",
              "namespace": "regularizers",
              "paramStr": "(config?)",
              "parameters": [
                {
                  "name": "config",
                  "documentation": "",
                  "type": "Object",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "l2",
                  "documentation": "L2 regularization rate. Defaults to 0.01. ",
                  "type": "number",
                  "optional": false,
                  "isConfigParam": true
                }
              ],
              "returnType": "Regularizer",
              "documentation": "Regularizer for L1 and L2 regularization.\n\nAdds a term to the loss to penalize large weights:\nloss += sum(l1 * abs(x)) + sum(l2 * x^2)",
              "fileName": "#46",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_regularizers.ts#L46-L48",
              "isFunction": true,
              "displayName": "tf.regularizers.l2",
              "urlHash": "regularizers.l2"
            }
          ]
        }
      ]
    },
    {
      "name": "Visualization",
      "description": "",
      "subheadings": [
        {
          "symbols": [
            {
              "docInfo": {
                "heading": "Visualization"
              },
              "symbolName": "toPixels",
              "paramStr": "(img, canvas?)",
              "parameters": [
                {
                  "name": "img",
                  "documentation": "A rank-2 or rank-3 tensor. If rank-2, draws grayscale. If\nrank-3, must have depth of 1, 3 or 4. When depth of 1, draws\ngrayscale. When depth of 3, we draw with the first three components of\nthe depth dimension corresponding to r, g, b and alpha = 1. When depth of\n4, all four components of the depth dimension correspond to r, g, b, a.",
                  "type": "[tf.Tensor2D](#class:Tensor)|[tf.Tensor3D](#class:Tensor)|[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)|Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "canvas",
                  "documentation": "The canvas to draw to.",
                  "type": "[HTMLCanvasElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement)",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "Promise",
              "documentation": "Draws a [tf.Tensor](#class:Tensor) of pixel values to a byte array or optionally a\ncanvas.\n\nWhen the dtype of the input is 'float32', we assume values in the range\n[0-1]. Otherwise, when input is 'int32', we assume values in the range\n[0-255].\n\nReturns a promise that resolves when the canvas has been drawn to.",
              "fileName": "#353",
              "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.13.0/src/ops/array_ops.ts#L353-L435",
              "isFunction": true,
              "displayName": "tf.toPixels",
              "urlHash": "toPixels"
            }
          ]
        }
      ]
    },
    {
      "name": "Metrics",
      "description": "",
      "subheadings": [
        {
          "symbols": [
            {
              "docInfo": {
                "heading": "Metrics",
                "namespace": "metrics",
                "useDocsFrom": "binaryAccuracy"
              },
              "symbolName": "binaryAccuracy",
              "namespace": "metrics",
              "paramStr": "(yTrue, yPred)",
              "parameters": [
                {
                  "name": "yTrue",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "yPred",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "",
              "fileName": "#22",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_metrics.ts#L22-L24",
              "isFunction": true,
              "displayName": "tf.metrics.binaryAccuracy",
              "urlHash": "metrics.binaryAccuracy"
            },
            {
              "docInfo": {
                "heading": "Metrics",
                "namespace": "metrics",
                "useDocsFrom": "binaryCrossentropy"
              },
              "symbolName": "binaryCrossentropy",
              "namespace": "metrics",
              "paramStr": "(yTrue, yPred)",
              "parameters": [
                {
                  "name": "yTrue",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "yPred",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "",
              "fileName": "#33",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_metrics.ts#L33-L35",
              "isFunction": true,
              "displayName": "tf.metrics.binaryCrossentropy",
              "urlHash": "metrics.binaryCrossentropy"
            },
            {
              "docInfo": {
                "heading": "Metrics",
                "namespace": "metrics",
                "useDocsFrom": "categoricalAccuracy"
              },
              "symbolName": "categoricalAccuracy",
              "namespace": "metrics",
              "paramStr": "(yTrue, yPred)",
              "parameters": [
                {
                  "name": "yTrue",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "yPred",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "",
              "fileName": "#44",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_metrics.ts#L44-L46",
              "isFunction": true,
              "displayName": "tf.metrics.categoricalAccuracy",
              "urlHash": "metrics.categoricalAccuracy"
            },
            {
              "docInfo": {
                "heading": "Metrics",
                "namespace": "metrics",
                "useDocsFrom": "categoricalCrossentropy"
              },
              "symbolName": "categoricalCrossentropy",
              "namespace": "metrics",
              "paramStr": "(yTrue, yPred)",
              "parameters": [
                {
                  "name": "yTrue",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "yPred",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "",
              "fileName": "#55",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_metrics.ts#L55-L57",
              "isFunction": true,
              "displayName": "tf.metrics.categoricalCrossentropy",
              "urlHash": "metrics.categoricalCrossentropy"
            },
            {
              "docInfo": {
                "heading": "Metrics",
                "namespace": "metrics",
                "useDocsFrom": "cosineProximity"
              },
              "symbolName": "cosineProximity",
              "namespace": "metrics",
              "paramStr": "(yTrue, yPred)",
              "parameters": [
                {
                  "name": "yTrue",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "yPred",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "",
              "fileName": "#88",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_metrics.ts#L88-L90",
              "isFunction": true,
              "displayName": "tf.metrics.cosineProximity",
              "urlHash": "metrics.cosineProximity"
            },
            {
              "docInfo": {
                "heading": "Metrics",
                "namespace": "metrics",
                "useDocsFrom": "meanAbsoluteError"
              },
              "symbolName": "meanAbsoluteError",
              "namespace": "metrics",
              "paramStr": "(yTrue, yPred)",
              "parameters": [
                {
                  "name": "yTrue",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "yPred",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "",
              "fileName": "#99",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_metrics.ts#L99-L101",
              "isFunction": true,
              "displayName": "tf.metrics.meanAbsoluteError",
              "urlHash": "metrics.meanAbsoluteError"
            },
            {
              "docInfo": {
                "heading": "Metrics",
                "namespace": "metrics",
                "useDocsFrom": "meanAbsolutePercentageError"
              },
              "symbolName": "meanAbsolutePercentageError",
              "namespace": "metrics",
              "paramStr": "(yTrue, yPred)",
              "parameters": [
                {
                  "name": "yTrue",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "yPred",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "",
              "fileName": "#110",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_metrics.ts#L110-L113",
              "isFunction": true,
              "displayName": "tf.metrics.meanAbsolutePercentageError",
              "urlHash": "metrics.meanAbsolutePercentageError"
            },
            {
              "docInfo": {
                "heading": "Metrics",
                "namespace": "metrics",
                "useDocsFrom": "meanSquaredError"
              },
              "symbolName": "meanSquaredError",
              "namespace": "metrics",
              "paramStr": "(yTrue, yPred)",
              "parameters": [
                {
                  "name": "yTrue",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "yPred",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "",
              "fileName": "#130",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_metrics.ts#L130-L132",
              "isFunction": true,
              "displayName": "tf.metrics.meanSquaredError",
              "urlHash": "metrics.meanSquaredError"
            },
            {
              "docInfo": {
                "heading": "Metrics",
                "namespace": "metrics",
                "useDocsFrom": "precision"
              },
              "symbolName": "precision",
              "namespace": "metrics",
              "paramStr": "(yTrue, yPred)",
              "parameters": [
                {
                  "name": "yTrue",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "yPred",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "",
              "fileName": "#66",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_metrics.ts#L66-L68",
              "isFunction": true,
              "displayName": "tf.metrics.precision",
              "urlHash": "metrics.precision"
            },
            {
              "docInfo": {
                "heading": "Metrics",
                "namespace": "metrics",
                "useDocsFrom": "recall"
              },
              "symbolName": "recall",
              "namespace": "metrics",
              "paramStr": "(yTrue, yPred)",
              "parameters": [
                {
                  "name": "yTrue",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "yPred",
                  "documentation": "",
                  "type": "[tf.Tensor](#class:Tensor)",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "[tf.Tensor](#class:Tensor)",
              "documentation": "",
              "fileName": "#77",
              "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.0/src/exports_metrics.ts#L77-L79",
              "isFunction": true,
              "displayName": "tf.metrics.recall",
              "urlHash": "metrics.recall"
            }
          ]
        }
      ]
    }
  ]
}