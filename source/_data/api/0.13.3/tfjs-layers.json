{
  "docs": {
    "headings": [
      {
        "name": "Constraints",
        "description": "",
        "subheadings": [
          {
            "name": "Classes",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Constraints",
                  "subheading": "Classes",
                  "namespace": "constraints"
                },
                "symbolName": "Constraint",
                "namespace": "constraints",
                "documentation": "Base class for functions that impose constraints on weight values",
                "fileName": "#37",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/constraints.ts#L37-L43",
                "methods": [],
                "isClass": true,
                "inheritsFrom": "serialization.Serializable"
              }
            ]
          },
          {
            "symbols": [
              {
                "docInfo": {
                  "heading": "Constraints",
                  "namespace": "constraints",
                  "useDocsFrom": "MaxNorm",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "maxNorm",
                "namespace": "constraints",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "maxValue",
                    "documentation": "Maximum norm for incoming weights",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "axis",
                    "documentation": "Axis along which to calculate norms.\n\n  For instance, in a `Dense` layer the weight matrix\n  has shape `[inputDim, outputDim]`,\n  set `axis` to `0` to constrain each weight vector\n  of length `[inputDim,]`.\n  In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n  the weight tensor has shape\n  `[rows, cols, inputDepth, outputDepth]`,\n  set `axis` to `[0, 1, 2]`\n  to constrain the weights of each filter tensor of size\n  `[rows, cols, inputDepth]`.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Constraint",
                "documentation": "MaxNorm weight constraint.\n\nConstrains the weights incident to each hidden unit\nto have a norm less than or equal to a desired value.\n\nReferences\n       - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting\nSrivastava, Hinton, et al.\n2014](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)",
                "fileName": "#21",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_constraints.ts#L21-L23",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Constraints",
                  "namespace": "constraints",
                  "useDocsFrom": "UnitNorm",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "unitNorm",
                "namespace": "constraints",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "Axis along which to calculate norms.\n\nFor instance, in a `Dense` layer the weight matrix\nhas shape `[inputDim, outputDim]`,\nset `axis` to `0` to constrain each weight vector\nof length `[inputDim,]`.\nIn a `Conv2D` layer with `dataFormat=\"channels_last\"`,\nthe weight tensor has shape\n[rows, cols, inputDepth, outputDepth]`,\nset `axis` to `[0, 1, 2]`\nto constrain the weights of each filter tensor of size\n`[rows, cols, inputDepth]`.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Constraint",
                "documentation": "Constrains the weights incident to each hidden unit to have unit norm.",
                "fileName": "#33",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_constraints.ts#L33-L35",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Constraints",
                  "namespace": "constraints",
                  "useDocsFrom": "NonNeg"
                },
                "symbolName": "nonNeg",
                "namespace": "constraints",
                "paramStr": "()",
                "parameters": [],
                "returnType": "Constraint",
                "documentation": "Constains the weight to be non-negative.",
                "fileName": "#44",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_constraints.ts#L44-L46",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Constraints",
                  "namespace": "constraints",
                  "useDocsFrom": "MinMaxNormConfig",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "minMaxNorm",
                "namespace": "constraints",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "minValue",
                    "documentation": "Minimum norm for incoming weights",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "maxValue",
                    "documentation": "Maximum norm for incoming weights",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "axis",
                    "documentation": "Axis along which to calculate norms.\nFor instance, in a `Dense` layer the weight matrix\nhas shape `[inputDim, outputDim]`,\nset `axis` to `0` to constrain each weight vector\nof length `[inputDim,]`.\nIn a `Conv2D` layer with `dataFormat=\"channels_last\"`,\nthe weight tensor has shape\n`[rows, cols, inputDepth, outputDepth]`,\nset `axis` to `[0, 1, 2]`\nto constrain the weights of each filter tensor of size\n`[rows, cols, inputDepth]`.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "rate",
                    "documentation": "Rate for enforcing the constraint: weights will be rescaled to yield:\n`(1 - rate) * norm + rate * norm.clip(minValue, maxValue)`.\nEffectively, this means that rate=1.0 stands for strict\nenforcement of the constraint, while rate<1.0 means that\nweights will be rescaled at each step to slowly move\ntowards a value inside the desired interval.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Constraint",
                "documentation": "",
                "fileName": "#56",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_constraints.ts#L56-L58",
                "isFunction": true
              }
            ]
          }
        ]
      },
      {
        "name": "Initializers",
        "description": "",
        "subheadings": [
          {
            "name": "Classes",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Initializers",
                  "subheading": "Classes",
                  "namespace": "initializers"
                },
                "symbolName": "Initializer",
                "namespace": "initializers",
                "documentation": "Initializer base class.",
                "fileName": "#42",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/initializers.ts#L42-L57",
                "methods": [],
                "isClass": true,
                "inheritsFrom": "serialization.Serializable"
              }
            ]
          },
          {
            "symbols": [
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "Zeros"
                },
                "symbolName": "zeros",
                "namespace": "initializers",
                "paramStr": "()",
                "parameters": [],
                "returnType": "Zeros",
                "documentation": "Initializer that generates tensors initialized to 0.",
                "fileName": "#20",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_initializers.ts#L20-L22",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "Ones"
                },
                "symbolName": "ones",
                "namespace": "initializers",
                "paramStr": "()",
                "parameters": [],
                "returnType": "Initializer",
                "documentation": "Initializer that generates tensors initialized to 1.",
                "fileName": "#31",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_initializers.ts#L31-L33",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "Constant",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "constant",
                "namespace": "initializers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "value",
                    "documentation": "The value for each element in the variable. ",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Initializer",
                "documentation": "Initializer that generates values initialized to some constant.",
                "fileName": "#43",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_initializers.ts#L43-L45",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "RandomUniform",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "randomUniform",
                "namespace": "initializers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "minval",
                    "documentation": "Lower bound of the range of random values to generate. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "maxval",
                    "documentation": "Upper bound of the range of random values to generate. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "seed",
                    "documentation": "Used to seed the random generator. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Initializer",
                "documentation": "Initializer that generates random values initialized to a uniform\ndistribution.\n\nValues will be distributed uniformly between the configured minval and\nmaxval.",
                "fileName": "#55",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_initializers.ts#L55-L57",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "RandomNormal",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "randomNormal",
                "namespace": "initializers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "mean",
                    "documentation": "Mean of the random values to generate. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "stddev",
                    "documentation": "Standard deviation of the random values to generate. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "seed",
                    "documentation": "Used to seed the random generator. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Initializer",
                "documentation": "Initializer that generates random values initialized to a normal\ndistribution.",
                "fileName": "#67",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_initializers.ts#L67-L69",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "TruncatedNormal",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "truncatedNormal",
                "namespace": "initializers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "mean",
                    "documentation": "Mean of the random values to generate. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "stddev",
                    "documentation": "Standard deviation of the random values to generate. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "seed",
                    "documentation": "Used to seed the random generator. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Initializer",
                "documentation": "Initializer that generates random values initialized to a truncated normal.\ndistribution.\n\nThese values are similar to values from a `RandomNormal` except that values\nmore than two standard deviations from the mean are discarded and re-drawn.\nThis is the recommended initializer for neural network weights and filters.",
                "fileName": "#79",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_initializers.ts#L79-L81",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "Identity",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "identity",
                "namespace": "initializers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "gain",
                    "documentation": "Multiplicative factor to apply to the identity matrix.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Initializer",
                "documentation": "Initializer that generates the identity matrix.\nOnly use for square 2D matrices.",
                "fileName": "#91",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_initializers.ts#L91-L93",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "VarianceScaling",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "varianceScaling",
                "namespace": "initializers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "scale",
                    "documentation": "Scaling factor (positive float). ",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "mode",
                    "documentation": "Fanning mode for inputs and outputs. ",
                    "type": "'fanIn'|'fanOut'|'fanAvg'",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "distribution",
                    "documentation": "Probabilistic distribution of the values. ",
                    "type": "'normal'|'uniform'",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "seed",
                    "documentation": "Random number generator seed. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Initializer",
                "documentation": "Initializer capable of adapting its scale to the shape of weights.\nWith distribution=NORMAL, samples are drawn from a truncated normal\ndistribution centered on zero, with `stddev = sqrt(scale / n)` where n is:\n   - number of input units in the weight tensor, if mode = FAN_IN.\n   - number of output units, if mode = FAN_OUT.\n   - average of the numbers of input and output units, if mode = FAN_AVG.\nWith distribution=UNIFORM,\nsamples are drawn from a uniform distribution\nwithin [-limit, limit], with `limit = sqrt(3 * scale / n)`.",
                "fileName": "#103",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_initializers.ts#L103-L105",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "GlorotUniform",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "glorotUniform",
                "namespace": "initializers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "seed",
                    "documentation": "Random number generator seed. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Initializer",
                "documentation": "Glorot uniform initializer, also called Xavier uniform initializer.\nIt draws samples from a uniform distribution within [-limit, limit]\nwhere `limit` is `sqrt(6 / (fan_in + fan_out))`\nwhere `fan_in` is the number of input units in the weight tensor\nand `fan_out` is the number of output units in the weight tensor\n\nReference:\n   Glorot & Bengio, AISTATS 2010\n       http://jmlr.org/proceedings/papers/v9/glorot10a/glorot10a.pdf.",
                "fileName": "#115",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_initializers.ts#L115-L117",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "GlorotNormal",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "glorotNormal",
                "namespace": "initializers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "seed",
                    "documentation": "Random number generator seed. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Initializer",
                "documentation": "Glorot normal initializer, also called Xavier normal initializer.\nIt draws samples from a truncated normal distribution centered on 0\nwith `stddev = sqrt(2 / (fan_in + fan_out))`\nwhere `fan_in` is the number of input units in the weight tensor\nand `fan_out` is the number of output units in the weight tensor.\n\nReference:\n   Glorot & Bengio, AISTATS 2010\n       http://jmlr.org/proceedings/papers/v9/glorot10a/glorot10a.pdf",
                "fileName": "#127",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_initializers.ts#L127-L129",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "HeNormal",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "heNormal",
                "namespace": "initializers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "seed",
                    "documentation": "Random number generator seed. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Initializer",
                "documentation": "He normal initializer.\n\nIt draws samples from a truncated normal distribution centered on 0\nwith `stddev = sqrt(2 / fanIn)`\nwhere `fanIn` is the number of input units in the weight tensor.\n\nReference:\n     He et al., http://arxiv.org/abs/1502.01852",
                "fileName": "#139",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_initializers.ts#L139-L141",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "LeCunNormal",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "leCunNormal",
                "namespace": "initializers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "seed",
                    "documentation": "Random number generator seed. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Initializer",
                "documentation": "LeCun normal initializer.\n\nIt draws samples from a truncated normal distribution centered on 0\nwith `stddev = sqrt(1 / fanIn)`\nwhere `fanIn` is the number of input units in the weight tensor.\n\nReferences:\n   [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n   [Efficient Backprop](http://yann.lecun.com/exdb/publis/pdf/lecun-98b.pdf)",
                "fileName": "#151",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_initializers.ts#L151-L153",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Initializers",
                  "namespace": "initializers",
                  "useDocsFrom": "Orthogonal",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "orthogonal",
                "namespace": "initializers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "gain",
                    "documentation": "Multiplicative factor to apply to the orthogonal matrix. Defaults to 1.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Initializer",
                "documentation": "Initializer that generates a random orthogonal matrix.\n\nReference:\n[Saxe et al., http://arxiv.org/abs/1312.6120](http://arxiv.org/abs/1312.6120)",
                "fileName": "#163",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_initializers.ts#L163-L165",
                "isFunction": true
              }
            ]
          }
        ]
      },
      {
        "name": "Regularizers",
        "description": "",
        "subheadings": [
          {
            "symbols": [
              {
                "docInfo": {
                  "heading": "Regularizers",
                  "namespace": "regularizers"
                },
                "symbolName": "L1L2",
                "namespace": "regularizers",
                "documentation": "Regularizer for L1 and L2 regularization.\n\nAdds a term to the loss to penalize large weights:\nloss += sum(l1 * abs(x)) + sum(l2 * x^2)",
                "fileName": "#51",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/regularizers.ts#L51-L97",
                "methods": [],
                "isClass": true,
                "inheritsFrom": "Regularizer"
              },
              {
                "docInfo": {
                  "heading": "Regularizers",
                  "namespace": "regularizers",
                  "useDocsFrom": "L1L2",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "l1l2",
                "namespace": "regularizers",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "l1",
                    "documentation": "L1 regularization rate. Defaults to 0.01. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "l2",
                    "documentation": "L2 regularization rate. Defaults to 0.01. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Regularizer",
                "documentation": "Regularizer for L1 and L2 regularization.\n\nAdds a term to the loss to penalize large weights:\nloss += sum(l1 * abs(x)) + sum(l2 * x^2)",
                "fileName": "#22",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_regularizers.ts#L22-L24",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Regularizers",
                  "namespace": "regularizers",
                  "useDocsFrom": "L1L2",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "l1",
                "namespace": "regularizers",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "l1",
                    "documentation": "L1 regularization rate. Defaults to 0.01. ",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Regularizer",
                "documentation": "Regularizer for L1 and L2 regularization.\n\nAdds a term to the loss to penalize large weights:\nloss += sum(l1 * abs(x)) + sum(l2 * x^2)",
                "fileName": "#34",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_regularizers.ts#L34-L36",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Regularizers",
                  "namespace": "regularizers",
                  "useDocsFrom": "L1L2",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "l2",
                "namespace": "regularizers",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "l2",
                    "documentation": "L2 regularization rate. Defaults to 0.01. ",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Regularizer",
                "documentation": "Regularizer for L1 and L2 regularization.\n\nAdds a term to the loss to penalize large weights:\nloss += sum(l1 * abs(x)) + sum(l2 * x^2)",
                "fileName": "#46",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_regularizers.ts#L46-L48",
                "isFunction": true
              }
            ]
          }
        ]
      },
      {
        "name": "Models",
        "description": "",
        "subheadings": [
          {
            "name": "Classes",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Classes"
                },
                "symbolName": "SymbolicTensor",
                "documentation": "`SymbolicTensor` is a placeholder for a Tensor without any concrete value.\n\nThey are most often encountered when building a graph of `Layer`s for a\na `Model` and the input data's shape, but not values are known.",
                "fileName": "#96",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/engine/topology.ts#L96-L143",
                "methods": [],
                "isClass": true
              },
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Classes"
                },
                "symbolName": "Model",
                "documentation": "A `Model` is a directed, acyclic graph of `Layer`s plus methods for\ntraining, evaluation, prediction and saving.\n\n`Model` is the basic unit of training, inference and evaluation in\nTensorFlow.js. To create a `Model`, use `model`.\n\nSee also:\n   `Sequential`, `loadModel`.",
                "fileName": "#450",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/engine/training.ts#L450-L1600",
                "methods": [
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes"
                    },
                    "symbolName": "summary",
                    "paramStr": "(lineLength?, positions?, printFn?)",
                    "parameters": [
                      {
                        "name": "lineLength",
                        "documentation": "Custom line length, in number of characters.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "positions",
                        "documentation": "Custom widths of each of the columns, as either\nfractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number\nof characters (e.g., `[30, 50, 65]`). Each number corresponds to\nright-most (i.e., ending) position of a column.",
                        "type": "number[]",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "printFn",
                        "documentation": "Custom print function. Can be used to replace the default\n`console.log`. For example, you can use `x => {}` to mute the printed\nmessages in the console.",
                        "type": "(message?: any, ...optionalParams: any[]) => void",
                        "optional": true,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "void",
                    "documentation": "Print a text summary of the model's layers.\n\nThe summary includes\n- Name and type of all layers that comprise the model.\n- Output shape(s) of the layers\n- Number of weight parameters of each layer\n- If the model has non-sequential-like topology, the inputs each layer\n   receives\n- The total number of trainable and non-trainable parameters of the model.\n\n```js\nconst input1 = tf.input({shape: [10]});\nconst input2 = tf.input({shape: [20]});\nconst dense1 = tf.layers.dense({units: 4}).apply(input1);\nconst dense2 = tf.layers.dense({units: 8}).apply(input2);\nconst concat = tf.layers.concatenate().apply([dense1, dense2]);\nconst output =\n     tf.layers.dense({units: 3, activation: 'softmax'}).apply(concat);\n\nconst model = tf.model({inputs: [input1, input2], outputs: output});\nmodel.summary();\n```",
                    "fileName": "#522",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/engine/training.ts#L522-L534",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes",
                      "configParamIndices": [
                        0
                      ]
                    },
                    "symbolName": "compile",
                    "paramStr": "(config)",
                    "parameters": [
                      {
                        "name": "config",
                        "documentation": "a `ModelCompileConfig` specifying the loss, optimizer, and\nmetrics to be used for fitting and evaluating this model.",
                        "type": "Object",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "optimizer",
                        "documentation": "An instance of `tf.train.Optimizer` or a string name for an Optimizer.",
                        "type": "string|Optimizer",
                        "optional": false,
                        "isConfigParam": true
                      },
                      {
                        "name": "loss",
                        "documentation": "Object function(s) or name(s) of object function(s).\nIf the model has multiple outputs, you can use a different loss\non each output by passing a dictionary or an Array of losses.\nThe loss value that will be minimized by the model will then be the sum\nof all individual losses.",
                        "type": "string|string[]|{[outputName: string]: string}|LossOrMetricFn|\n      LossOrMetricFn[]|{[outputName: string]: LossOrMetricFn}",
                        "optional": false,
                        "isConfigParam": true
                      },
                      {
                        "name": "metrics",
                        "documentation": "List of metrics to be evaluated by the model during training and testing.\nTypically you will use `metrics=['accuracy']`.\nTo specify different metrics for different outputs of a multi-output\nmodel, you could also pass a dictionary.",
                        "type": "string[]|{[outputName: string]: string}",
                        "optional": true,
                        "isConfigParam": true
                      }
                    ],
                    "returnType": "void",
                    "documentation": "Configures and prepares the model for training and evaluation.  Compiling\noutfits the model with an optimizer, loss, and/or metrics.  Calling `fit`\nor `evaluate` on an un-compiled model will throw an error.",
                    "fileName": "#547",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/engine/training.ts#L547-L746",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes",
                      "configParamIndices": [
                        2
                      ]
                    },
                    "symbolName": "evaluate",
                    "paramStr": "(x, y, config?)",
                    "parameters": [
                      {
                        "name": "x",
                        "documentation": "`Tensor` of test data, or an `Array` of `Tensor`s if the model has\nmultiple inputs.",
                        "type": "Tensor|Tensor[]",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "y",
                        "documentation": "`Tensor` of target data, or an `Array` of `Tensor`s if the model\nhas multiple outputs.",
                        "type": "Tensor|Tensor[]",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "config",
                        "documentation": "A `ModelEvaluateConfig`, containing optional fields.",
                        "type": "Object",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "batchSize",
                        "documentation": "Batch size (Integer). If unspecified, it will default to 32.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "verbose",
                        "documentation": "Verbosity mode.",
                        "type": "ModelLoggingVerbosity",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "sampleWeight",
                        "documentation": "Tensor of weights to weight the contribution of different samples to the\nloss and metrics.",
                        "type": "Tensor",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "steps",
                        "documentation": "integer: total number of steps (batches of samples)\nbefore declaring the evaluation round finished. Ignored with the default\nvalue of `undefined`.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      }
                    ],
                    "returnType": "Scalar|Scalar[]",
                    "documentation": "Returns the loss value & metrics values for the model in test mode.\n\nLoss and metrics are specified during `compile()`, which needs to happen\nbefore calls to `evaluate()`.\n\nComputation is done in batches.\n\n```js\nconst model = tf.sequential({\n   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n});\nmodel.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\nconst result = model.evaluate(\n     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});\nresult.print();\n```",
                    "fileName": "#802",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/engine/training.ts#L802-L819",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes",
                      "configParamIndices": [
                        2
                      ]
                    },
                    "symbolName": "evaluateDataset",
                    "paramStr": "(dataset, config)",
                    "parameters": [
                      {
                        "name": "dataset",
                        "documentation": "A dataset object. Its `iterator()` method is expected\nto generate a dataset iterator object, the `next()` method of which\nis expected to produce data batches for evaluation. The return value\nof the `next()` call ought to contain a boolean `done` field and a\n`value` field. The `value` field is expected to be an array of two\n`Tensor`s or an array of two nested `Tensor` structures. The former\ncase is for models with exactly one input and one output (e.g..\na sequential model). The latter case is for models with multiple\ninputs and/or multiple outputs. Of the two items in the array, the\nfirst is the input feature(s) and the second is the output target(s).",
                        "type": "Dataset",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "config",
                        "documentation": "A configuration object for the dataset-based evaluation.",
                        "type": "ModelEvaluateDatasetConfig",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Promise",
                    "documentation": "Evaluate model using a dataset object.\n\nNote: Unlike `evaluate()`, this method is asynchronous (`async`);",
                    "fileName": "#844",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/engine/training.ts#L844-L849",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes",
                      "configParamIndices": [
                        1
                      ]
                    },
                    "symbolName": "predict",
                    "paramStr": "(x, config?)",
                    "parameters": [
                      {
                        "name": "x",
                        "documentation": "The input data, as an Tensor, or an `Array` of `Tensor`s if\nthe model has multiple inputs.",
                        "type": "Tensor|Tensor[]",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "config",
                        "documentation": "A `ModelPredictConfig` object containing optional fields.",
                        "type": "Object",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "batchSize",
                        "documentation": "Optional. Batch size (Integer). If unspecified, it will default to 32.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "verbose",
                        "documentation": "Optional. Verbosity mode. Defaults to false.",
                        "type": "boolean",
                        "optional": true,
                        "isConfigParam": true
                      }
                    ],
                    "returnType": "Tensor\n      |Tensor[]",
                    "documentation": "Generates output predictions for the input samples.\n\nComputation is done in batches.\n\nNote: the \"step\" mode of predict() is currently not supported.\n   This is because the TensorFlow.js core backend is imperative only.\n\n```js\nconst model = tf.sequential({\n   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n});\nmodel.predict(tf.ones([8, 10]), {batchSize: 4}).print();\n```",
                    "fileName": "#1071",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/engine/training.ts#L1071-L1081",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes"
                    },
                    "symbolName": "predictOnBatch",
                    "paramStr": "(x)",
                    "parameters": [
                      {
                        "name": "x",
                        "documentation": ": Input samples, as an Tensor",
                        "type": "Tensor",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Tensor|Tensor[]",
                    "documentation": "Returns predictions for a single batch of samples.\n\n```js\nconst model = tf.sequential({\n   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n});\nmodel.predictOnBatch(tf.ones([8, 10])).print();\n```",
                    "fileName": "#1096",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/engine/training.ts#L1096-L1101",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes",
                      "configParamIndices": [
                        2
                      ]
                    },
                    "symbolName": "fit",
                    "paramStr": "(x, y, config?)",
                    "parameters": [
                      {
                        "name": "x",
                        "documentation": "`Tensor` of training data, or an array of `Tensor`s if the\nmodel has multiple inputs. If all inputs in the model are named, you\ncan also pass a dictionary mapping input names to `Tensor`s.",
                        "type": "Tensor|Tensor[]|{[inputName: string]: Tensor}",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "y",
                        "documentation": "`Tensor` of target (label) data, or an array of `Tensor`s if\nthe model has multiple outputs. If all outputs in the model are named,\nyou can also pass a dictionary mapping output names to `Tensor`s.",
                        "type": "Tensor|Tensor[]|{[inputName: string]: Tensor}",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "config",
                        "documentation": "A `ModelFitConfig`, containing optional fields.",
                        "type": "Object",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "batchSize",
                        "documentation": "Number of samples per gradient update. If unspecified, it\nwill default to 32.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "epochs",
                        "documentation": "The number of times to iterate over the training data arrays. ",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "verbose",
                        "documentation": "Verbosity level.\n\nExpected to be 0, 1, or 2. Default: 1.\n\n0 - No printed message during fit() call.\n1 - In Node.js (tfjs-node), prints the progress bar, together with\n     real-time updates of loss and metric values and training speed.\n     In the browser: no action. This is the default.\n2 - Not implemented yet.",
                        "type": "ModelLoggingVerbosity",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "callbacks",
                        "documentation": "List of callbacks to be called during training.\nCan consist of one or more of the following fields: `onTrainBegin`,\n`onTrainEnd`, `onEpochBegin`, `onEpochEnd`, `onBatchBegin`, `onBatchEnd`.",
                        "type": "BaseCallback[]|CustomCallbackConfig|CustomCallbackConfig[]",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "validationSplit",
                        "documentation": "Float between 0 and 1: fraction of the training data\nto be used as validation data. The model will set apart this fraction of\nthe training data, will not train on it, and will evaluate the loss and\nany model metrics on this data at the end of each epoch.\nThe validation data is selected from the last samples in the `x` and `y`\ndata provided, before shuffling.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "validationData",
                        "documentation": "Data on which to evaluate the loss and any model\nmetrics at the end of each epoch. The model will not be trained on this\ndata. This could be a tuple [xVal, yVal] or a tuple [xVal, yVal,\nvalSampleWeights]. The model will not be trained on this data.\n`validationData` will override `validationSplit`.",
                        "type": "[\n    Tensor|Tensor[], Tensor|Tensor[]\n  ]|[Tensor | Tensor[], Tensor|Tensor[], Tensor|Tensor[]]",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "shuffle",
                        "documentation": "Whether to shuffle the training data before each epoch. Has\nno effect when `stepsPerEpoch` is not `null`.",
                        "type": "boolean",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "classWeight",
                        "documentation": "Optional dictionary mapping class indices (integers) to\na weight (float) to apply to the model's loss for the samples from this\nclass during training. This can be useful to tell the model to \"pay more\nattention\" to samples from an under-represented class.",
                        "type": "{[classIndex: string]: number}",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "sampleWeight",
                        "documentation": "Optional array of the same length as x, containing\nweights to apply to the model's loss for each sample. In the case of\ntemporal data, you can pass a 2D array with shape (samples,\nsequenceLength), to apply a different weight to every timestep of every\nsample. In this case you should make sure to specify\nsampleWeightMode=\"temporal\" in compile().",
                        "type": "Tensor",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "initialEpoch",
                        "documentation": "Epoch at which to start training (useful for resuming a previous training\nrun).",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "stepsPerEpoch",
                        "documentation": "Total number of steps (batches of samples) before\ndeclaring one epoch finished and starting the next epoch. When training\nwith Input Tensors such as TensorFlow data tensors, the default `null` is\nequal to the number of unique samples in your dataset divided by the\nbatch size, or 1 if that cannot be determined.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "validationSteps",
                        "documentation": "Only relevant if `stepsPerEpoch` is specified. Total number of steps\n(batches of samples) to validate before stopping.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "yieldEvery",
                        "documentation": "Configures the frequency of yielding the main thread to other tasks.\n\nIn the browser environment, yielding the main thread can improve the\nresponsiveness of the page during training. In the Node.js environment,\nit can ensure tasks queued in the event loop can be handled in a timely\nmanner.\n\n- The value can be one of the following strings:\n   - 'auto': automatically determine how frequently the yielding happens\n     by measuring the duration of each batch of training (default).\n   - 'batch': yield every batch.\n   - 'epoch': yield every epoch.\n   - 'never': never yield. (But yielding can still happen through `await\n      nextFrame()` calls in custom callbacks.)",
                        "type": "YieldEveryOptions",
                        "optional": true,
                        "isConfigParam": true
                      }
                    ],
                    "returnType": "Promise",
                    "documentation": "Trains the model for a fixed number of epochs (iterations on a\ndataset).\n\n```js\nconst model = tf.sequential({\n     layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n});\nmodel.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\nfor (let i = 1; i < 5 ; ++i) {\n   const h = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\n       batchSize: 4,\n       epochs: 3\n   });\n   console.log(\"Loss after Epoch \" + i + \" : \" + h.history.loss[0]);\n}\n```",
                    "fileName": "#1390",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/engine/training.ts#L1390-L1395",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes",
                      "configParamIndices": [
                        2
                      ]
                    },
                    "symbolName": "fitDataset",
                    "paramStr": "(dataset, config)",
                    "parameters": [
                      {
                        "name": "dataset",
                        "documentation": "A dataset object. Its `iterator()` method is expected\nto generate a dataset iterator object, the `next()` method of which\nis expected to produce data batches for training. The return value\nof the `next()` call ought to contain a boolean `done` field and a\n`value` field. The `value` field is expected to be an array of two\n`Tensor`s or an array of two nested `Tensor` structures.\ncase is for models with exactly one input and one output (e.g..\na sequential model). The latter case is for models with multiple\ninputs and/or multiple outputs.\nOf the two items in the array, the first is the input feature(s) and\nthe second is the output target(s).",
                        "type": "Dataset",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "config",
                        "documentation": "A `ModelFitDatasetConfig`, containing optional fields.",
                        "type": "ModelFitDatasetConfig",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Promise",
                    "documentation": "Trains the model using a dataset object.",
                    "fileName": "#1421",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/engine/training.ts#L1421-L1424",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes",
                      "configParamIndices": [
                        1
                      ]
                    },
                    "symbolName": "save",
                    "paramStr": "(handlerOrURL, config?)",
                    "parameters": [
                      {
                        "name": "handlerOrURL",
                        "documentation": "An instance of `IOHandler` or a URL-like,\nscheme-based string shortcut for `IOHandler`.",
                        "type": "io.IOHandler|string",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "config",
                        "documentation": "Options for saving the model.",
                        "type": "Object",
                        "optional": true,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Promise",
                    "documentation": "Save the configuration and/or weights of the Model.\n\nAn `IOHandler` is an object that has a `save` method of the proper\nsignature defined. The `save` method manages the storing or\ntransmission of serialized data (\"artifacts\") that represent the\nmodel's topology and weights onto or via a specific medium, such as\nfile downloads, local storage, IndexedDB in the web browser and HTTP\nrequests to a server. TensorFlow.js provides `IOHandler`\nimplementations for a number of frequently used saving mediums, such as\n`tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\nfor more details.\n\nThis method also allows you to refer to certain types of `IOHandler`s\nas URL-like string shortcuts, such as 'localstorage://' and\n'indexeddb://'.\n\nExample 1: Save `model`'s topology and weights to browser [local\nstorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\nthen load it back.\n\n```js\nconst model = tf.sequential(\n     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\nconsole.log('Prediction from original model:');\nmodel.predict(tf.ones([1, 3])).print();\n\nconst saveResults = await model.save('localstorage://my-model-1');\n\nconst loadedModel = await tf.loadModel('localstorage://my-model-1');\nconsole.log('Prediction from loaded model:');\nloadedModel.predict(tf.ones([1, 3])).print();\n```\n\nExample 2. Saving `model`'s topology and weights to browser\n[IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\nthen load it back.\n\n```js\nconst model = tf.sequential(\n     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\nconsole.log('Prediction from original model:');\nmodel.predict(tf.ones([1, 3])).print();\n\nconst saveResults = await model.save('indexeddb://my-model-1');\n\nconst loadedModel = await tf.loadModel('indexeddb://my-model-1');\nconsole.log('Prediction from loaded model:');\nloadedModel.predict(tf.ones([1, 3])).print();\n```\n\nExample 3. Saving `model`'s topology and weights as two files\n(`my-model-1.json` and `my-model-1.weights.bin`) downloaded from\nbrowser.\n\n```js\nconst model = tf.sequential(\n     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\nconst saveResults = await model.save('downloads://my-model-1');\n```\n\nExample 4. Send  `model`'s topology and weights to an HTTP server.\nSee the documentation of `tf.io.browserHTTPRequests` for more details\nincluding specifying request parameters and implementation of the\nserver.\n\n```js\nconst model = tf.sequential(\n     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\nconst saveResults = await model.save('http://my-server/model/upload');\n```",
                    "fileName": "#1567",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/engine/training.ts#L1567-L1599",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Layers",
                      "subheading": "Classes",
                      "namespace": "layers",
                      "subclasses": [
                        "Model"
                      ]
                    },
                    "symbolName": "getLayer",
                    "namespace": "layers",
                    "paramStr": "(name?, index?)",
                    "parameters": [
                      {
                        "name": "name",
                        "documentation": "Name of layer.",
                        "type": "string",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "index",
                        "documentation": "Index of layer.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Layer",
                    "documentation": "Retrieves a layer based on either its name (unique) or index.\n\nIndices are based on order of horizontal graph traversal (bottom-up).\n\nIf both `name` and `index` are specified, `index` takes precedence.",
                    "fileName": "#1102",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/engine/container.ts#L1102-L1123",
                    "isFunction": true
                  }
                ],
                "isClass": true,
                "inheritsFrom": "Container|tfc.InferenceModel"
              },
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Classes"
                },
                "symbolName": "Sequential",
                "documentation": "A model with a stack of layers, feeding linearly from one to the next.\n\n`sequential` is a factory function that creates an instance of\n`Sequential`.\n\n```js\n  // Define a model for linear regression.\n  const model = tf.sequential();\n  model.add(tf.layers.dense({units: 1, inputShape: [1]}));\n\n  // Prepare the model for training: Specify the loss and the optimizer.\n  model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n\n  // Generate some synthetic data for training.\n  const xs = tf.tensor2d([1, 2, 3, 4], [4, 1]);\n  const ys = tf.tensor2d([1, 3, 5, 7], [4, 1]);\n\n  // Train the model using the data then do inference on a data point the\n  // model hasn't seen:\n  await model.fit(xs, ys);\n  model.predict(tf.tensor2d([5], [1, 1])).print();\n```",
                "fileName": "#328",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/models.ts#L328-L934",
                "methods": [
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes"
                    },
                    "symbolName": "add",
                    "paramStr": "(layer)",
                    "parameters": [
                      {
                        "name": "layer",
                        "documentation": "Layer instance.",
                        "type": "Layer",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "void",
                    "documentation": "Adds a layer instance on top of the layer stack.\n\n```js\n  const model = tf.sequential();\n  model.add(tf.layers.dense({units: 8, inputShape: [1]}));\n  model.add(tf.layers.dense({units: 4, activation: 'relu6'}));\n  model.add(tf.layers.dense({units: 1, activation: 'relu6'}));\n  // Note that the untrained model is random at this point.\n  model.predict(tf.randomNormal([10, 1])).print();\n```",
                    "fileName": "#383",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/models.ts#L383-L485",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes"
                    },
                    "symbolName": "summary",
                    "paramStr": "(lineLength?, positions?, printFn?)",
                    "parameters": [
                      {
                        "name": "lineLength",
                        "documentation": "Custom line length, in number of characters.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "positions",
                        "documentation": "Custom widths of each of the columns, as either\nfractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number\nof characters (e.g., `[30, 50, 65]`). Each number corresponds to\nright-most (i.e., ending) position of a column.",
                        "type": "number[]",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "printFn",
                        "documentation": "Custom print function. Can be used to replace the default\n`console.log`. For example, you can use `x => {}` to mute the printed\nmessages in the console.",
                        "type": "(message?: any, ...optionalParams: any[]) => void",
                        "optional": true,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "void",
                    "documentation": "Print a text summary of the Sequential model's layers.\n\nThe summary includes\n- Name and type of all layers that comprise the model.\n- Output shape(s) of the layers\n- Number of weight parameters of each layer\n- The total number of trainable and non-trainable parameters of the\nmodel.\n\n```js\nconst model = tf.sequential();\nmodel.add(\n     tf.layers.dense({units: 100, inputShape: [10], activation: 'relu'}));\nmodel.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));\n\nmodel.summary();\n```",
                    "fileName": "#592",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/models.ts#L592-L601",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes",
                      "configParamIndices": [
                        2
                      ]
                    },
                    "symbolName": "evaluate",
                    "paramStr": "(x, y, config?)",
                    "parameters": [
                      {
                        "name": "x",
                        "documentation": "`Tensor` of test data, or an `Array` of `Tensor`s if the model\nhas multiple inputs.",
                        "type": "Tensor|Tensor[]",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "y",
                        "documentation": "`Tensor` of target data, or an `Array` of `Tensor`s if the model\nhas multiple outputs.",
                        "type": "Tensor|Tensor[]",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "config",
                        "documentation": "A `ModelEvaluateConfig`, containing optional fields.",
                        "type": "Object",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "batchSize",
                        "documentation": "Batch size (Integer). If unspecified, it will default to 32.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "verbose",
                        "documentation": "Verbosity mode.",
                        "type": "ModelLoggingVerbosity",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "sampleWeight",
                        "documentation": "Tensor of weights to weight the contribution of different samples to the\nloss and metrics.",
                        "type": "Tensor",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "steps",
                        "documentation": "integer: total number of steps (batches of samples)\nbefore declaring the evaluation round finished. Ignored with the default\nvalue of `undefined`.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      }
                    ],
                    "returnType": "Scalar|Scalar[]",
                    "documentation": "Returns the loss value & metrics values for the model in test mode.\n\nLoss and metrics are specified during `compile()`, which needs to happen\nbefore calls to `evaluate()`.\n\nComputation is done in batches.\n\n```js\nconst model = tf.sequential({\n   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n});\nmodel.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\nconst result = model.evaluate(tf.ones([8, 10]), tf.ones([8, 1]), {\n   batchSize: 4,\n});\nresult.print();\n```",
                    "fileName": "#660",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/models.ts#L660-L668",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes",
                      "configParamIndices": [
                        2
                      ]
                    },
                    "symbolName": "evaluateDataset",
                    "paramStr": "(dataset, config)",
                    "parameters": [
                      {
                        "name": "dataset",
                        "documentation": "A dataset object. Its `iterator()` method is expected\nto generate a dataset iterator object, the `next()` method of which\nis expected to produce data batches for evaluation. The return value\nof the `next()` call ought to contain a boolean `done` field and a\n`value` field. The `value` field is expected to be an array of two\n`Tensor`s or an array of two nested `Tensor` structures. The former\ncase is for models with exactly one input and one output (e.g..\na sequential model). The latter case is for models with multiple\ninputs and/or multiple outputs. Of the two items in the array, the\nfirst is the input feature(s) and the second is the output target(s).",
                        "type": "Dataset",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "config",
                        "documentation": "A configuration object for the dataset-based evaluation.",
                        "type": "ModelEvaluateDatasetConfig",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Promise",
                    "documentation": "Evaluate model using a dataset object.\n\nNote: Unlike `evaluate()`, this method is asynchronous (`async`);",
                    "fileName": "#693",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/models.ts#L693-L701",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes",
                      "configParamIndices": [
                        1
                      ]
                    },
                    "symbolName": "predict",
                    "paramStr": "(x, config?)",
                    "parameters": [
                      {
                        "name": "x",
                        "documentation": "The input data, as an Tensor, or an `Array` of `Tensor`s if\nthe model has multiple inputs.",
                        "type": "Tensor|Tensor[]",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "config",
                        "documentation": "",
                        "type": "Object",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "batchSize",
                        "documentation": "Optional. Batch size (Integer). If unspecified, it will default to 32.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "verbose",
                        "documentation": "Optional. Verbosity mode. Defaults to false.",
                        "type": "boolean",
                        "optional": true,
                        "isConfigParam": true
                      }
                    ],
                    "returnType": "Tensor\n      |Tensor[]",
                    "documentation": "Generates output predictions for the input samples.\n\nComputation is done in batches.\n\nNote: the \"step\" mode of predict() is currently not supported.\n   This is because the TensorFow.js core backend is imperative only.\n\n```js\nconst model = tf.sequential({\n   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n});\nmodel.predict(tf.ones([2, 10])).print();\n```",
                    "fileName": "#731",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/models.ts#L731-L737",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes",
                      "configParamIndices": [
                        2
                      ]
                    },
                    "symbolName": "fit",
                    "paramStr": "(x, y, config?)",
                    "parameters": [
                      {
                        "name": "x",
                        "documentation": "`Tensor` of training data, or an array of `Tensor`s if the model\nhas multiple inputs. If all inputs in the model are named, you can also\npass a dictionary mapping input names to `Tensor`s.",
                        "type": "Tensor|Tensor[]|{[inputName: string]: Tensor}",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "y",
                        "documentation": "`Tensor` of target (label) data, or an array of `Tensor`s if the\nmodel has multiple outputs. If all outputs in the model are named, you\ncan also pass a dictionary mapping output names to `Tensor`s.",
                        "type": "Tensor|Tensor[]|{[inputName: string]: Tensor}",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "config",
                        "documentation": "A `ModelFitConfig`, containing optional fields.",
                        "type": "Object",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "batchSize",
                        "documentation": "Number of samples per gradient update. If unspecified, it\nwill default to 32.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "epochs",
                        "documentation": "The number of times to iterate over the training data arrays. ",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "verbose",
                        "documentation": "Verbosity level.\n\nExpected to be 0, 1, or 2. Default: 1.\n\n0 - No printed message during fit() call.\n1 - In Node.js (tfjs-node), prints the progress bar, together with\n     real-time updates of loss and metric values and training speed.\n     In the browser: no action. This is the default.\n2 - Not implemented yet.",
                        "type": "ModelLoggingVerbosity",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "callbacks",
                        "documentation": "List of callbacks to be called during training.\nCan consist of one or more of the following fields: `onTrainBegin`,\n`onTrainEnd`, `onEpochBegin`, `onEpochEnd`, `onBatchBegin`, `onBatchEnd`.",
                        "type": "BaseCallback[]|CustomCallbackConfig|CustomCallbackConfig[]",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "validationSplit",
                        "documentation": "Float between 0 and 1: fraction of the training data\nto be used as validation data. The model will set apart this fraction of\nthe training data, will not train on it, and will evaluate the loss and\nany model metrics on this data at the end of each epoch.\nThe validation data is selected from the last samples in the `x` and `y`\ndata provided, before shuffling.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "validationData",
                        "documentation": "Data on which to evaluate the loss and any model\nmetrics at the end of each epoch. The model will not be trained on this\ndata. This could be a tuple [xVal, yVal] or a tuple [xVal, yVal,\nvalSampleWeights]. The model will not be trained on this data.\n`validationData` will override `validationSplit`.",
                        "type": "[\n    Tensor|Tensor[], Tensor|Tensor[]\n  ]|[Tensor | Tensor[], Tensor|Tensor[], Tensor|Tensor[]]",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "shuffle",
                        "documentation": "Whether to shuffle the training data before each epoch. Has\nno effect when `stepsPerEpoch` is not `null`.",
                        "type": "boolean",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "classWeight",
                        "documentation": "Optional dictionary mapping class indices (integers) to\na weight (float) to apply to the model's loss for the samples from this\nclass during training. This can be useful to tell the model to \"pay more\nattention\" to samples from an under-represented class.",
                        "type": "{[classIndex: string]: number}",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "sampleWeight",
                        "documentation": "Optional array of the same length as x, containing\nweights to apply to the model's loss for each sample. In the case of\ntemporal data, you can pass a 2D array with shape (samples,\nsequenceLength), to apply a different weight to every timestep of every\nsample. In this case you should make sure to specify\nsampleWeightMode=\"temporal\" in compile().",
                        "type": "Tensor",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "initialEpoch",
                        "documentation": "Epoch at which to start training (useful for resuming a previous training\nrun).",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "stepsPerEpoch",
                        "documentation": "Total number of steps (batches of samples) before\ndeclaring one epoch finished and starting the next epoch. When training\nwith Input Tensors such as TensorFlow data tensors, the default `null` is\nequal to the number of unique samples in your dataset divided by the\nbatch size, or 1 if that cannot be determined.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "validationSteps",
                        "documentation": "Only relevant if `stepsPerEpoch` is specified. Total number of steps\n(batches of samples) to validate before stopping.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": true
                      },
                      {
                        "name": "yieldEvery",
                        "documentation": "Configures the frequency of yielding the main thread to other tasks.\n\nIn the browser environment, yielding the main thread can improve the\nresponsiveness of the page during training. In the Node.js environment,\nit can ensure tasks queued in the event loop can be handled in a timely\nmanner.\n\n- The value can be one of the following strings:\n   - 'auto': automatically determine how frequently the yielding happens\n     by measuring the duration of each batch of training (default).\n   - 'batch': yield every batch.\n   - 'epoch': yield every epoch.\n   - 'never': never yield. (But yielding can still happen through `await\n      nextFrame()` calls in custom callbacks.)",
                        "type": "YieldEveryOptions",
                        "optional": true,
                        "isConfigParam": true
                      }
                    ],
                    "returnType": "Promise",
                    "documentation": "Trains the model for a fixed number of epochs (iterations on a dataset).\n\n```js\nconst model = tf.sequential({\n   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n});\nmodel.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\nconst history = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\n   batchSize: 4,\n   epochs: 3\n});\nconsole.log(history.history.loss[0]);\n```",
                    "fileName": "#803",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/models.ts#L803-L813",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes",
                      "configParamIndices": [
                        2
                      ]
                    },
                    "symbolName": "fitDataset",
                    "paramStr": "(dataset, config)",
                    "parameters": [
                      {
                        "name": "dataset",
                        "documentation": "A dataset object. Its `iterator()` method is expected\nto generate a dataset iterator object, the `next()` method of which\nis expected to produce data batches for evaluation. The return value\nof the `next()` call ought to contain a boolean `done` field and a\n`value` field. The `value` field is expected to be an array of two\n`Tensor`s or an array of two nested `Tensor` structures. The former\ncase is for models with exactly one input and one output (e.g..\na sequential model). The latter case is for models with multiple\ninputs and/or multiple outputs. Of the two items in the array, the\nfirst is the input feature(s) and the second is the output target(s).",
                        "type": "Dataset",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "config",
                        "documentation": "A `ModelFitDatasetConfig`, containing optional fields.",
                        "type": "ModelFitDatasetConfig",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Promise",
                    "documentation": "Trains the model using a dataset object.",
                    "fileName": "#838",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/models.ts#L838-L846",
                    "isFunction": true
                  }
                ],
                "isClass": true,
                "inheritsFrom": "Model"
              }
            ]
          },
          {
            "name": "Loading",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Loading"
                },
                "symbolName": "modelFromJSON",
                "paramStr": "(modelAndWeightsConfig, customObjects?)",
                "parameters": [
                  {
                    "name": "modelAndWeightsConfig",
                    "documentation": "JSON object or string encoding a model and\nweights configuration. It can also be only the topology JSON of the\nmodel, in which case the weights will not be loaded.",
                    "type": "ModelAndWeightsConfig|JsonDict",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "customObjects",
                    "documentation": "",
                    "type": "serialization.ConfigDict",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Promise",
                "documentation": "Parses a JSON model configuration file and returns a model instance.\n\n```js\n// This example shows how to serialize a model using `toJSON()` and\n// deserialize it as another model using `tf.models.modelFROMJSON()`.\n// Note: this example serializes and deserializes only the topology\n// of the model; the weights of the loaded model will be different\n// from those of the the original model, due to random weight\n// initialization.\n// To load the topology and weights of a model, use `tf.loadModel()`.\nconst model1 = tf.sequential();\nmodel1.add(tf.layers.repeatVector({inputShape: [2], n: 4}));\n// Serialize `model1` as a JSON object.\nconst model1JSON = model1.toJSON(null, false);\nmodel1.summary();\n\nconst model2 = await tf.models.modelFromJSON(model1JSON);\nmodel2.summary();\n```\n\n  ",
                "fileName": "#64",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/models.ts#L64-L107",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Loading",
                  "useDocsFrom": "loadModelInternal"
                },
                "symbolName": "loadModel",
                "paramStr": "(pathOrIOHandler, strict?)",
                "parameters": [
                  {
                    "name": "pathOrIOHandler",
                    "documentation": "Can be either of the two formats\n1. A string path to the `ModelAndWeightsConfig` JSON describing\nthe model in the canonical TensorFlow.js format. This path will be\ninterpreted as a relative HTTP path, to which `fetch` will be used to\nrequest the model topology and weight manifest JSON.\nThe content of the JSON file is assumed to be a JSON object with the\nfollowing fields and values:\n- 'modelTopology': A JSON object that can be either of:\n1. a model architecture JSON consistent with the format of the return\nvalue of `keras.Model.to_json()`\n2. a full model JSON in the format of `keras.models.save_model()`.\n- 'weightsManifest': A TensorFlow.js weights manifest.\nSee the Python converter function `save_model()` for more details.\nIt is also assumed that model weights can be accessed from relative\npaths described by the `paths` fields in weights manifest.\n2. An `tf.io.IOHandler` object that loads model artifacts with its `load`\nmethod.",
                    "type": "string|io.IOHandler",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "strict",
                    "documentation": "Require that the provided weights exactly match those required\nby the layers.  Default true.  Passing false means that both extra weights\nand missing weights will be silently ignored.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Promise",
                "documentation": "Load a model, including its topology and optionally weights.  See the\nTutorial named \"How to import a Keras Model\" for usage examples.\n\nExample 1: Save `model`'s topology and weights to browser [local\nstorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\nthen load it back.\n\n```js\nconst model = tf.sequential(\n     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\nconsole.log('Prediction from original model:');\nmodel.predict(tf.ones([1, 3])).print();\n\nconst saveResults = await model.save('localstorage://my-model-1');\n\nconst loadedModel = await tf.loadModel('localstorage://my-model-1');\nconsole.log('Prediction from loaded model:');\nloadedModel.predict(tf.ones([1, 3])).print();\n```\n\nExample 2. Saving `model`'s topology and weights to browser\n[IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\nthen load it back.\n\n```js\nconst model = tf.sequential(\n     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\nconsole.log('Prediction from original model:');\nmodel.predict(tf.ones([1, 3])).print();\n\nconst saveResults = await model.save('indexeddb://my-model-1');\n\nconst loadedModel = await tf.loadModel('indexeddb://my-model-1');\nconsole.log('Prediction from loaded model:');\nloadedModel.predict(tf.ones([1, 3])).print();\n```\n\nExample 3. Load a model from user-selected files from HTML\n[file input\nelements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file).\n\n```js\n// Note: this code snippet will not work without the HTML elements in the\n//   page\nconst jsonUpload = document.getElementById('json-upload');\nconst weightsUpload = document.getElementById('weights-upload');\n\nconst model = await tf.loadModel(\n     tf.io.browserFiles([jsonUpload.files[0], weightsUpload.files[0]]));\n```\n\nExample 4. Load a model from an HTTP server.\n\n```js\nconst model = await\n     tf.loadModel('https://storage.googleapis.com/tfjs-models/tfjs/iris_v1/model.json');\nmodel.summary();\n```",
                "fileName": "#147",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports.ts#L147-L150",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Creation",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Creation",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "model",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "inputs",
                    "documentation": "",
                    "type": "SymbolicTensor|SymbolicTensor[]",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "outputs",
                    "documentation": "",
                    "type": "SymbolicTensor|SymbolicTensor[]",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Model",
                "documentation": "A model is a data structure that consists of `Layers` and defines inputs\nand outputs.\n\nThe key difference between `model` and `sequential` is that `model`\nis more generic, supporting an arbitrary graph (without cycles) of layers.\n`sequential` is less generic and supports only a linear stack of layers.\n\nWhen creating a `Model`, specify its input(s) and output(s). Layers\nare used to wire input(s) to output(s).\n\nFor example, the following code snippet defines a model consisting of\ntwo `dense` layers, with 10 and 4 units, respectively.\n\n```js\n// Define input, which has a size of 5 (not including batch dimension).\nconst input = tf.input({shape: [5]});\n\n// First dense layer uses relu activation.\nconst denseLayer1 = tf.layers.dense({units: 10, activation: 'relu'});\n// Second dense layer uses softmax activation.\nconst denseLayer2 = tf.layers.dense({units: 4, activation: 'softmax'});\n\n// Obtain the output symbolic tensor by applying the layers on the input.\nconst output = denseLayer2.apply(denseLayer1.apply(input));\n\n// Create the model based on the inputs.\nconst model = tf.model({inputs: input, outputs: output});\n\n// The model can be used for training, evaluation and prediction.\n// For example, the following line runs prediction with the model on\n// some fake data.\nmodel.predict(tf.ones([2, 5])).print();\n```\nSee also:\n   `sequential`, `loadModel`.",
                "fileName": "#72",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports.ts#L72-L74",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Creation",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "sequential",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "layers",
                    "documentation": "Stack of layers for the model. ",
                    "type": "Layer[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "The name of this model. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Sequential",
                "documentation": "Creates a `Sequential` model.  A sequential model is any model where the\noutputs of one layer are the inputs to the next layer, i.e. the model\ntopology is a simple 'stack' of layers, with no branching or skipping.\n\nThis means that the first layer passed to a Sequential model should have a\ndefined input shape. What that means is that it should have received an\n`inputShape` or `batchInputShape` argument, or for some type of layers\n(recurrent, Dense...) an `inputDim` argument.\n\nThe key difference between `model` and `sequential` is that `sequential`\nis less generic, supporting only a linear stack of layers. `model` is\nmore generic and supports an arbitrary graph (without cycles) of layers.\n\nExamples:\n\n```js\nconst model = tf.sequential();\n\n// First layer must have an input shape defined.\nmodel.add(tf.layers.dense({units: 32, inputShape: [50]}));\n// Afterwards, TF.js does automatic shape inference.\nmodel.add(tf.layers.dense({units: 4}));\n\n// Inspect the inferred shape of the model's output, which equals\n// `[null, 4]`. The 1st dimension is the undetermined batch dimension; the\n// 2nd is the output size of the model's last layer.\nconsole.log(JSON.stringify(model.outputs[0].shape));\n```\n\nIt is also possible to specify a batch size (with potentially undetermined\nbatch dimension, denoted by \"null\") for the first layer using the\n`batchInputShape` key. The following example is equivalent to the above:\n\n```js\nconst model = tf.sequential();\n\n// First layer must have a defined input shape\nmodel.add(tf.layers.dense({units: 32, batchInputShape: [null, 50]}));\n// Afterwards, TF.js does automatic shape inference.\nmodel.add(tf.layers.dense({units: 4}));\n\n// Inspect the inferred shape of the model's output.\nconsole.log(JSON.stringify(model.outputs[0].shape));\n```\n\nYou can also use an `Array` of already-constructed `Layer`s to create\na `Sequential` model:\n\n```js\nconst model = tf.sequential({\n   layers: [tf.layers.dense({units: 32, inputShape: [50]}),\n            tf.layers.dense({units: 4})]\n});\nconsole.log(JSON.stringify(model.outputs[0].shape));\n```",
                "fileName": "#136",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports.ts#L136-L138",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Inputs",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Inputs",
                  "useDocsFrom": "Input",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "input",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "InputConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "shape",
                    "documentation": "A shape, not including the batch size. For instance, `shape=[32]`\nindicates that the expected input will be batches of 32-dimensional\nvectors.",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchShape",
                    "documentation": "A shape tuple (integer), including the batch size. For instance,\n`batchShape=[10, 32]` indicates that the expected input will be batches of\n10 32-dimensional vectors. `batchShape=[null, 32]` indicates batches of an\narbitrary number of 32-dimensional vectors.",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "An optional name string for the layer. Should be unique in a model (do not\nreuse the same name twice). It will be autogenerated if it isn't provided.",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dtype",
                    "documentation": "",
                    "type": "DataType",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "sparse",
                    "documentation": "A boolean specifying whether the placeholder to be created is sparse.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "SymbolicTensor",
                "documentation": "Used to instantiate an input to a model as a `SymbolicTensor`.\n\nUsers should call the `input` factory function for\nconsistency with other generator functions.\n\nExample:\n\n```js\n// Defines a simple logistic regression model with 32 dimensional input\n// and 3 dimensional output.\nconst x = tf.input({shape: [32]});\nconst y = tf.layers.dense({units: 3, activation: 'softmax'}).apply(x);\nconst model = tf.model({inputs: x, outputs: y});\nmodel.predict(tf.ones([2, 32])).print();\n```\n\nNote: `input` is only necessary when using `model`. When using\n`sequential`, specify `inputShape` for the first layer or use `inputLayer`\nas the first layer.",
                "fileName": "#160",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports.ts#L160-L162",
                "isFunction": true
              }
            ]
          }
        ]
      },
      {
        "name": "Layers",
        "description": "",
        "subheadings": [
          {
            "name": "Classes",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Classes",
                  "namespace": "layers"
                },
                "symbolName": "Layer",
                "namespace": "layers",
                "documentation": "A layer is a grouping of operations and weights that can be composed to\ncreate a `Model`.\n\nLayers are constructed by using the functions under the\n[tf.layers](#Layers-Basic) namespace.",
                "fileName": "#401",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/engine/topology.ts#L401-L1513",
                "methods": [
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes"
                    },
                    "symbolName": "apply",
                    "paramStr": "(inputs, kwargs?)",
                    "parameters": [
                      {
                        "name": "inputs",
                        "documentation": "a `Tensor` or `SymbolicTensor` or an Array of them.",
                        "type": "Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[]",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "kwargs",
                        "documentation": "Additional keyword arguments to be passed to `call()`.",
                        "type": "Kwargs",
                        "optional": true,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Tensor|Tensor[]|SymbolicTensor|SymbolicTensor[]",
                    "documentation": "Builds or executes a `Layer's logic.\n\nWhen called with `Tensor`(s), execute the `Layer`s computation and\nreturn Tensor(s). For example:\n\n```js\nconst denseLayer = tf.layers.dense({\n   units: 1,\n   kernelInitializer: 'zeros',\n   useBias: false\n});\n\n// Invoke the layer's apply() method with a `Tensor` (with concrete\n// numeric values).\nconst input = tf.ones([2, 2]);\nconst output = denseLayer.apply(input);\n\n// The output's value is expected to be [[0], [0]], due to the fact that\n// the dense layer has a kernel initialized to all-zeros and does not have\n// a bias.\noutput.print();\n```\n\nWhen called with `SymbolicTensor`(s), this will prepare the layer for\nfuture execution.  This entails internal book-keeping on shapes of\nexpected Tensors, wiring layers together, and initializing weights.\n\nCalling `apply` with `SymbolicTensor`s are typically used during the\nbuilding of non-`Sequential` models. For example:\n\n```js\nconst flattenLayer = tf.layers.flatten();\nconst denseLayer = tf.layers.dense({units: 1});\n\n// Use tf.layers.input() to obtain a SymbolicTensor as input to apply().\nconst input = tf.input({shape: [2, 2]});\nconst output1 = flattenLayer.apply(input);\n\n// output1.shape is [null, 4]. The first dimension is the undetermined\n// batch size. The second dimension comes from flattening the [2, 2]\n// shape.\nconsole.log(JSON.stringify(output1.shape));\n\n// The output SymbolicTensor of the flatten layer can be used to call\n// the apply() of the dense layer:\nconst output2 = denseLayer.apply(output1);\n\n// output2.shape is [null, 1]. The first dimension is the undetermined\n// batch size. The second dimension matches the number of units of the\n// dense layer.\nconsole.log(JSON.stringify(output2.shape));\n\n// The input and output and be used to construct a model that consists\n// of the flatten and dense layers.\nconst model = tf.model({inputs: input, outputs: output2});\n```",
                    "fileName": "#925",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/engine/topology.ts#L925-L1068",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes"
                    },
                    "symbolName": "countParams",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "number",
                    "documentation": "Counts the total number of numbers (e.g., float32, int32) in the\nweights.",
                    "fileName": "#1155",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/engine/topology.ts#L1155-L1163",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes"
                    },
                    "symbolName": "build",
                    "paramStr": "(inputShape)",
                    "parameters": [
                      {
                        "name": "inputShape",
                        "documentation": "A `Shape` or array of `Shape` (unused).",
                        "type": "number[]|number[][]",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "void",
                    "documentation": "Creates the layer weights.\n\nMust be implemented on all layers that have weights.\n\nCalled when apply() is called to construct the weights.",
                    "fileName": "#1175",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/engine/topology.ts#L1175-L1177",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes"
                    },
                    "symbolName": "getWeights",
                    "paramStr": "(trainableOnly?)",
                    "parameters": [
                      {
                        "name": "trainableOnly",
                        "documentation": "Whether to get the values of only trainable weights.",
                        "type": "boolean",
                        "optional": true,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Tensor[]",
                    "documentation": "Returns the current values of the weights of the layer.",
                    "fileName": "#1186",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/engine/topology.ts#L1186-L1188",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes"
                    },
                    "symbolName": "setWeights",
                    "paramStr": "(weights)",
                    "parameters": [
                      {
                        "name": "weights",
                        "documentation": "a list of Tensors. The number of arrays and their shape\nmust match number of the dimensions of the weights of the layer (i.e.\nit should match the output of `getWeights`).",
                        "type": "Tensor[]",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "void",
                    "documentation": "Sets the weights of the layer, from Tensors.",
                    "fileName": "#1201",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/engine/topology.ts#L1201-L1233",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes"
                    },
                    "symbolName": "addWeight",
                    "paramStr": "(name, shape, dtype?, initializer?, regularizer?, trainable?, constraint?)",
                    "parameters": [
                      {
                        "name": "name",
                        "documentation": "Name of the new weight variable.",
                        "type": "string",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "shape",
                        "documentation": "The shape of the weight.",
                        "type": "number[]",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "dtype",
                        "documentation": "The dtype of the weight.",
                        "type": "DataType",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "initializer",
                        "documentation": "An initializer instance.",
                        "type": "Initializer",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "regularizer",
                        "documentation": "A regularizer instance.",
                        "type": "Regularizer",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "trainable",
                        "documentation": "Whether the weight should be trained via backprop or not\n(assuming that the layer itself is also trainable).",
                        "type": "boolean",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "constraint",
                        "documentation": "An optional trainable.",
                        "type": "Constraint",
                        "optional": true,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "LayerVariable",
                    "documentation": "Adds a weight variable to the layer.",
                    "fileName": "#1249",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/engine/topology.ts#L1249-L1278",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes"
                    },
                    "symbolName": "addLoss",
                    "paramStr": "(losses)",
                    "parameters": [
                      {
                        "name": "losses",
                        "documentation": "",
                        "type": "RegularizerFn|RegularizerFn[]",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "void",
                    "documentation": "Add losses to the layer.\n\nThe loss may potentionally be conditional on some inputs tensors,\nfor instance activity losses are conditional on the layer's inputs.",
                    "fileName": "#1287",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/engine/topology.ts#L1287-L1296",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes"
                    },
                    "symbolName": "computeOutputShape",
                    "paramStr": "(inputShape)",
                    "parameters": [
                      {
                        "name": "inputShape",
                        "documentation": "A shape (tuple of integers) or a list of shape tuples\n(one per output tensor of the layer). Shape tuples can include null for\nfree dimensions, instead of an integer.",
                        "type": "number[]|number[][]",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "number[]|number[][]",
                    "documentation": "Computes the output shape of the layer.\n\nAssumes that the layer will be built to match that input shape provided.",
                    "fileName": "#1308",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/engine/topology.ts#L1308-L1310",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes"
                    },
                    "symbolName": "getConfig",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "serialization.ConfigDict",
                    "documentation": "Returns the config of the layer.\n\nA layer config is a TS dictionary (serializable)\ncontaining the configuration of a layer.\nThe same layer can be reinstantiated later\n(without its trained weights) from this configuration.\n\nThe config of a layer does not include connectivity\ninformation, nor the layer class name.  These are handled\nby 'Container' (one layer of abstraction above).\n\nPorting Note: The TS dictionary follows TS naming standrds for\nkeys, and uses tfjs-layers type-safe Enums.  Serialization methods\nshould use a helper function to convert to the pythonic storage\nstandard. (see serialization_utils.convertTsToPythonic)",
                    "fileName": "#1434",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/engine/topology.ts#L1434-L1444",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "Classes"
                    },
                    "symbolName": "dispose",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "DisposeResult",
                    "documentation": "Attempt to dispose layer's weights.\n\nThis method decrease the reference count of the Layer object by 1.\n\nA Layer is reference-counted. Its reference count is incremented by 1\nthe first item its `apply()` method is called and when it becomes a part\nof a new `Node` (through calling the `apply()`) method on a\n`tf.SymbolicTensor`).\n\nIf the reference count of a Layer becomes 0, all the weights will be\ndisposed and the underlying memory (e.g., the textures allocated in WebGL)\nwill be freed.\n\nNote: If the reference count is greater than 0 after the decrement, the\nweights of the Layer will *not* be disposed.\n\nAfter a Layer is disposed, it cannot be used in calls such as `apply()`,\n`getWeights()` or `setWeights()` anymore.",
                    "fileName": "#1491",
                    "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/engine/topology.ts#L1491-L1512",
                    "isFunction": true
                  }
                ],
                "isClass": true,
                "inheritsFrom": "serialization.Serializable"
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Classes"
                },
                "symbolName": "RNNCell",
                "documentation": "An RNNCell layer.",
                "fileName": "#820",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/layers/recurrent.ts#L820-L828",
                "methods": [],
                "isClass": true,
                "inheritsFrom": "Layer"
              }
            ]
          },
          {
            "name": "Inputs",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Inputs",
                  "namespace": "layers",
                  "useDocsFrom": "InputLayer",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "inputLayer",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "inputShape",
                    "documentation": "Input shape, not including the batch axis. ",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchSize",
                    "documentation": "Optional input batch size (integer or null). ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchInputShape",
                    "documentation": "Batch input shape, including the batch axis. ",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dtype",
                    "documentation": "Datatype of the input.  ",
                    "type": "DataType",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "sparse",
                    "documentation": "Whether the placeholder created is meant to be sparse.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "Name of the layer. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "An input layer is an entry point into a `Model`.\n\n`InputLayer` is generated automatically for `Sequential` models by specifying\nthe `inputshape` or `batchInputShape` for the first layer.  It should not be\nspecified explicitly. However, it can be useful sometimes, e.g., when\nconstructing a sequential model from a subset of another sequential model's\nlayers. Like the code snippet below shows.\n\n```js\n// Define a model which simply adds two inputs.\nconst model1 = tf.sequential();\nmodel1.add(tf.layers.dense({inputShape: [4], units: 3, activation: 'relu'}));\nmodel1.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));\nmodel1.summary();\nmodel1.preidct(tf.zeros([1, 4])).print();\n\n// Construct another model, reusing the second layer of `model1` while\n// not using the first layer of `model1`. Note that you cannot add the second\n// layer of `model` directly as the first layer of the new sequential model,\n// because doing so will lead to an error related to the fact that the layer\n// is not an input layer. Instead, you need to create an `inputLayer` and add\n// it to the new sequential model before adding the reused layer.\nconst model2 = tf.sequential();\n// Use an inputShape that matches the input shape of `model1`'s second\n// layer.\nmodel2.add(tf.layers.inputLayer({inputShape: [3]}));\nmodel2.add(model1.layers[1]);\nmodel2.summary();\nmodel2.preidct(tf.zeros([1, 3])).print();\n```",
                "fileName": "#41",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L41-L43",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Advanced Activation",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Advanced Activation",
                  "namespace": "layers",
                  "useDocsFrom": "ELU",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "elu",
                "namespace": "layers",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "alpha",
                    "documentation": "Float `>= 0`. Negative slope coefficient. Defaults to `1.0`.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Exponetial Linear Unit (ELU).\n\nIt follows:\n`f(x) =  alpha * (exp(x) - 1.) for x < 0`,\n`f(x) = x for x >= 0`.\n\nInput shape:\n   Arbitrary. Use the configuration `inputShape` when using this layer as the\n   first layer in a model.\n\nOutput shape:\n   Same shape as the input.\n\nReferences:\n   - [Fast and Accurate Deep Network Learning by Exponential Linear Units\n(ELUs)](https://arxiv.org/abs/1511.07289v1)",
                "fileName": "#56",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L56-L58",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Advanced Activation",
                  "namespace": "layers",
                  "useDocsFrom": "ReLU",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "reLU",
                "namespace": "layers",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "maxValue",
                    "documentation": "Float, the maximum output value.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Rectified Linear Unit activation function.\n\nInput shape:\n   Arbitrary. Use the config field `inputShape` (Array of integers, does\n   not include the sample axis) when using this layer as the first layer\n   in a model.\n\nOutput shape:\n   Same shape as the input.",
                "fileName": "#69",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L69-L71",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Advanced Activation",
                  "namespace": "layers",
                  "useDocsFrom": "LeakyReLU",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "leakyReLU",
                "namespace": "layers",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "alpha",
                    "documentation": "Float `>= 0`. Negative slope coefficient. Defaults to `0.3`.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Leaky version of a rectified linear unit.\n\nIt allows a small gradient when the unit is not active:\n`f(x) = alpha * x for x < 0.`\n`f(x) = x for x >= 0.`\n\nInput shape:\n   Arbitrary. Use the configuration `inputShape` when using this layer as the\n   first layer in a model.\n\nOutput shape:\n   Same shape as the input.",
                "fileName": "#82",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L82-L84",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Advanced Activation",
                  "namespace": "layers",
                  "useDocsFrom": "Softmax",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "softmax",
                "namespace": "layers",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "Integer, axis along which the softmax normalization is applied.\nDefaults to `-1` (i.e., the last axis).",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Softmax activation layer.\n\nInput shape:\n   Arbitrary. Use the configuration `inputShape` when using this layer as the\n   first layer in a model.\n\nOutput shape:\n   Same shape as the input.",
                "fileName": "#95",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L95-L97",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Advanced Activation",
                  "namespace": "layers",
                  "useDocsFrom": "ThresholdedReLU",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "thresholdedReLU",
                "namespace": "layers",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "theta",
                    "documentation": "Float >= 0. Threshold location of activation.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Thresholded Rectified Linear Unit.\n\nIt follows:\n`f(x) = x for x > theta`,\n`f(x) = 0 otherwise`.\n\nInput shape:\n   Arbitrary. Use the configuration `inputShape` when using this layer as the\n   first layer in a model.\n\nOutput shape:\n   Same shape as the input.\n\nReferences:\n   - [Zero-Bias Autoencoders and the Benefits of Co-Adapting\nFeatures](http://arxiv.org/abs/1402.3337)",
                "fileName": "#108",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L108-L110",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Convolutional",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Convolutional",
                  "namespace": "layers",
                  "useDocsFrom": "Conv1D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "conv1d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "filters",
                    "documentation": "The dimensionality of the output space (i.e. the number of filters in the\nconvolution).",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "1D convolution layer (e.g., temporal convolution).\n\nThis layer creates a convolution kernel that is convolved\nwith the layer input over a single spatial (or temporal) dimension\nto produce a tensor of outputs.\n\nIf `use_bias` is True, a bias vector is created and added to the outputs.\n\nIf `activation` is not `null`, it is applied to the outputs as well.\n\nWhen using this layer as the first layer in a model, provide an\n`inputShape` argument `Array` or `null`.\n\nFor example, `inputShape` would be:\n- `[10, 128]` for sequences of 10 vectors of 128-dimensional vectors\n- `[null, 128]` for variable-length sequences of 128-dimensional vectors.",
                "fileName": "#123",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L123-L125",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Convolutional",
                  "namespace": "layers",
                  "useDocsFrom": "Conv2D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "conv2d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "filters",
                    "documentation": "The dimensionality of the output space (i.e. the number of filters in the\nconvolution).",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "2D convolution layer (e.g. spatial convolution over images).\n\nThis layer creates a convolution kernel that is convolved\nwith the layer input to produce a tensor of outputs.\n\nIf `useBias` is True, a bias vector is created and added to the outputs.\n\nIf `activation` is not `null`, it is applied to the outputs as well.\n\nWhen using this layer as the first layer in a model,\nprovide the keyword argument `inputShape`\n(Array of integers, does not include the sample axis),\ne.g. `inputShape=[128, 128, 3]` for 128x128 RGB pictures\nin `dataFormat='channelsLast'`.",
                "fileName": "#136",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L136-L138",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Convolutional",
                  "namespace": "layers",
                  "useDocsFrom": "Conv2DTranspose",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "conv2dTranspose",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "filters",
                    "documentation": "The dimensionality of the output space (i.e. the number of filters in the\nconvolution).",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Transposed convolutional layer (sometimes called Deconvolution).\n\nThe need for transposed convolutions generally arises\nfrom the desire to use a transformation going in the opposite direction of\na normal convolution, i.e., from something that has the shape of the output\nof some convolution to something that has the shape of its input while\nmaintaining a connectivity pattern that is compatible with said\nconvolution.\n\nWhen using this layer as the first layer in a model, provide the\nconfiguration `inputShape` (`Array` of integers, does not include the\nsample axis), e.g., `inputShape: [128, 128, 3]` for 128x128 RGB pictures in\n`dataFormat: 'channelsLast'`.\n\nInput shape:\n   4D tensor with shape:\n   `[batch, channels, rows, cols]` if `dataFormat` is `'channelsFirst'`.\n   or 4D tensor with shape\n   `[batch, rows, cols, channels]` if `dataFormat` is `'channelsLast`.\n\nOutput shape:\n   4D tensor with shape:\n   `[batch, filters, newRows, newCols]` if `dataFormat` is\n`'channelsFirst'`. or 4D tensor with shape:\n   `[batch, newRows, newCols, filters]` if `dataFormat` is `'channelsLast'`.\n\nReferences:\n   - [A guide to convolution arithmetic for deep\nlearning](https://arxiv.org/abs/1603.07285v1)\n   - [Deconvolutional\nNetworks](http://www.matthewzeiler.com/pubs/cvpr2010/cvpr2010.pdf)",
                "fileName": "#149",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L149-L151",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Convolutional",
                  "namespace": "layers",
                  "useDocsFrom": "SeparableConv2D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "separableConv2d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "depthMultiplier",
                    "documentation": "The number of depthwise convolution output channels for each input\nchannel.\nThe total number of depthwise convolution output channels will be equal\nto `filtersIn * depthMultiplier`. Default: 1.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "depthwiseInitializer",
                    "documentation": "Initializer for the depthwise kernel matrix.",
                    "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "pointwiseInitializer",
                    "documentation": "Initializer for the pointwise kernel matrix.",
                    "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "depthwiseRegularizer",
                    "documentation": "Regularizer function applied to the depthwise kernel matrix.",
                    "type": "'l1l2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "pointwiseRegularizer",
                    "documentation": "Regularizer function applied to the pointwise kernel matrix.",
                    "type": "'l1l2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "depthwiseConstraint",
                    "documentation": "Constraint function applied to the depthwise kernel matrix.",
                    "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "pointwiseConstraint",
                    "documentation": "Constraint function applied to the pointwise kernel matrix.",
                    "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Depthwise separable 2D convolution.\n\nSeparable convolution consists of first performing\na depthwise spatial convolution\n(which acts on each input channel separately)\nfollowed by a pointwise convolution which mixes together the resulting\noutput channels. The `depthMultiplier` argument controls how many\noutput channels are generated per input channel in the depthwise step.\n\nIntuitively, separable convolutions can be understood as\na way to factorize a convolution kernel into two smaller kernels,\nor as an extreme version of an Inception block.\n\nInput shape:\n   4D tensor with shape:\n     `[batch, channels, rows, cols]` if data_format='channelsFirst'\n   or 4D tensor with shape:\n     `[batch, rows, cols, channels]` if data_format='channelsLast'.\n\nOutput shape:\n   4D tensor with shape:\n     `[batch, filters, newRows, newCols]` if data_format='channelsFirst'\n   or 4D tensor with shape:\n     `[batch, newRows, newCols, filters]` if data_format='channelsLast'.\n     `rows` and `cols` values might have changed due to padding.",
                "fileName": "#162",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L162-L164",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Convolutional",
                  "namespace": "layers",
                  "useDocsFrom": "Cropping2D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "cropping2D",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "cropping",
                    "documentation": "Dimension of the cropping along the width and the height.\n- If integer: the same symmetric cropping\n  is applied to width and height.\n- If list of 2 integers:\n   interpreted as two different\n   symmetric cropping values for height and width:\n   `[symmetric_height_crop, symmetric_width_crop]`.\n- If a list of 2 list of 2 integers:\n   interpreted as\n   `[[top_crop, bottom_crop], [left_crop, right_crop]]`",
                    "type": "number|[number, number]|[[number, number], [number, number]]",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "dataFormat",
                    "documentation": "Format of the data, which determines the ordering of the dimensions in\nthe inputs.\n\n`channels_last` corresponds to inputs with shape\n   `(batch, ..., channels)`\n\n  `channels_first` corresponds to inputs with shape `(batch, channels,\n...)`.\n\nDefaults to `channels_last`.",
                    "type": "'channelsFirst'|'channelsLast'",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Cropping layer for 2D input (e.g., image).\n\nThis layer can crop an input\nat the top, bottom, left and right side of an image tensor.\n\nInput shape:\n   4D tensor with shape:\n   - If `dataFormat` is `\"channelsLast\"`:\n     `[batch, rows, cols, channels]`\n   - If `data_format` is `\"channels_first\"`:\n     `[batch, channels, rows, cols]`.\n\nOutput shape:\n   4D with shape:\n   - If `dataFormat` is `\"channelsLast\"`:\n     `[batch, croppedRows, croppedCols, channels]`\n    - If `dataFormat` is `\"channelsFirst\"`:\n     `[batch, channels, croppedRows, croppedCols]`.\n\nExamples\n```js\n\nconst model = tf.sequential();\nmodel.add(tf.layers.cropping2D({cropping:[[2, 2], [2, 2]],\n                                inputShape: [128, 128, 3]}));\n//now output shape is [batch, 124, 124, 3]\n```",
                "fileName": "#175",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L175-L177",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Convolutional",
                  "namespace": "layers",
                  "useDocsFrom": "UpSampling2D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "upSampling2d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "size",
                    "documentation": "The upsampling factors for rows and columns.\n\nDefaults to `[2, 2]`.",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dataFormat",
                    "documentation": "Format of the data, which determines the ordering of the dimensions in\nthe inputs.\n\n`\"channelsLast\"` corresponds to inputs with shape\n   `[batch, ..., channels]`\n\n  `\"channelsFirst\"` corresponds to inputs with shape `[batch, channels,\n...]`.\n\nDefaults to `\"channelsLast\"`.",
                    "type": "'channelsFirst'|'channelsLast'",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Upsampling layer for 2D inputs.\n\nRepeats the rows and columns of the data\nby size[0] and size[1] respectively.\n\n\nInput shape:\n    4D tensor with shape:\n     - If `dataFormat` is `\"channelsLast\"`:\n         `[batch, rows, cols, channels]`\n     - If `dataFormat` is `\"channelsFirst\"`:\n        `[batch, channels, rows, cols]`\n\nOutput shape:\n     4D tensor with shape:\n     - If `dataFormat` is `\"channelsLast\"`:\n        `[batch, upsampledRows, upsampledCols, channels]`\n     - If `dataFormat` is `\"channelsFirst\"`:\n         `[batch, channels, upsampledRows, upsampledCols]`",
                "fileName": "#188",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L188-L190",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Convolutional",
                  "namespace": "layers",
                  "useDocsFrom": "DepthwiseConv2D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "depthwiseConv2d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "kernelSize",
                    "documentation": "An integer or Array of 2 integers, specifying the width and height of the\n2D convolution window. Can be a single integer to specify the same value\nfor all spatial dimensions.",
                    "type": "number|[number, number]",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "depthMultiplier",
                    "documentation": "The number of depthwise convolution output channels for each input\nchannel.\nThe total number of depthwise convolution output channels will be equal to\n`filtersIn * depthMultiplier`.\nDefault: 1.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "depthwiseInitializer",
                    "documentation": "Initializer for the depthwise kernel matrix.\nDefault: GlorotNormal.",
                    "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "depthwiseConstraint",
                    "documentation": "Constraint for the depthwise kernel matrix.",
                    "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "depthwiseRegularizer",
                    "documentation": "Regulzarizer function for the depthwise kernel matrix.",
                    "type": "'l1l2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Depthwise separable 2D convolution.\n\nDepthwise Separable convolutions consists in performing just the first step\nin a depthwise spatial convolution (which acts on each input channel\nseparately). The `depthMultplier` argument controls how many output channels\nare generated per input channel in the depthwise step.",
                "fileName": "#204",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L204-L206",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Basic",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Basic",
                  "namespace": "layers",
                  "useDocsFrom": "Activation",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "activation",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "activation",
                    "documentation": "Name of the activation function to use.",
                    "type": "'elu'|'hardSigmoid'|'linear'|'relu'|'relu6'|\n    'selu'|'sigmoid'|'softmax'|'softplus'|'softsign'|'tanh'|string",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Applies an activation function to an output.\n\nThis layer applies element-wise activation function.  Other layers, notably\n`dense` can also apply activation functions.  Use this isolated activation\nfunction to extract the values before and after the\nactivation. For instance:\n\n```js\nconst input = tf.input({shape: [5]});\nconst denseLayer = tf.layers.dense({units: 1});\nconst activationLayer = tf.layers.activation({activation: 'relu6'});\n\n// Obtain the output symbolic tensors by applying the layers in order.\nconst denseOutput = denseLayer.apply(input);\nconst activationOutput = activationLayer.apply(denseOutput);\n\n// Create the model based on the inputs.\nconst model = tf.model({\n     inputs: input,\n     outputs: [denseOutput, activationOutput]\n});\n\n// Collect both outputs and print separately.\nconst [denseOut, activationOut] = model.predict(tf.randomNormal([6, 5]));\ndenseOut.print();\nactivationOut.print();\n```",
                "fileName": "#219",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L219-L221",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Basic",
                  "namespace": "layers",
                  "useDocsFrom": "Dense",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "dense",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "units",
                    "documentation": "Positive integer, dimensionality of the output space. ",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "activation",
                    "documentation": "Activation function to use.\n\nIf unspecified, no activation is applied.",
                    "type": "'elu'|'hardSigmoid'|'linear'|'relu'|'relu6'|\n    'selu'|'sigmoid'|'softmax'|'softplus'|'softsign'|'tanh'|string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "useBias",
                    "documentation": "Whether to apply a bias. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelInitializer",
                    "documentation": "Initializer for the dense kernel weights matrix.",
                    "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasInitializer",
                    "documentation": "Initializer for the bias vector.",
                    "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "inputDim",
                    "documentation": "If specified, defines inputShape as `[inputDim]`.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelConstraint",
                    "documentation": "Constraint for the kernel weights.",
                    "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasConstraint",
                    "documentation": "Constraint for the bias vector.",
                    "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelRegularizer",
                    "documentation": "Regularizer function applied to the dense kernel weights matrix.",
                    "type": "'l1l2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasRegularizer",
                    "documentation": "Regularizer function applied to the bias vector.",
                    "type": "'l1l2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "activityRegularizer",
                    "documentation": "Regularizer function applied to the activation.",
                    "type": "'l1l2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Creates a dense (fully connected) layer.\n\nThis layer implements the operation:\n   `output = activation(dot(input, kernel) + bias)`\n\n`activation` is the element-wise activation function\n   passed as the `activation` argument.\n\n`kernel` is a weights matrix created by the layer.\n\n`bias` is a bias vector created by the layer (only applicable if `useBias`\nis `true`).\n\n**Input shape:**\n\n   nD `Tensor` with shape: `(batchSize, ..., inputDim)`.\n\n   The most common situation would be\n   a 2D input with shape `(batchSize, inputDim)`.\n\n**Output shape:**\n\n   nD tensor with shape: `(batchSize, ..., units)`.\n\n   For instance, for a 2D input with shape `(batchSize, inputDim)`,\n   the output would have shape `(batchSize, units)`.\n\nNote: if the input to the layer has a rank greater than 2, then it is\nflattened prior to the initial dot product with the kernel.",
                "fileName": "#232",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L232-L234",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Basic",
                  "namespace": "layers",
                  "useDocsFrom": "Dropout",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "dropout",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "rate",
                    "documentation": "Float between 0 and 1. Fraction of the input units to drop. ",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "noiseShape",
                    "documentation": "Integer array representing the shape of the binary dropout mask that will\nbe multiplied with the input.\n\nFor instance, if your inputs have shape `(batchSize, timesteps, features)`\nand you want the dropout mask to be the same for all timesteps, you can use\n`noise_shape=(batch_size, 1, features)`.",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "seed",
                    "documentation": "An integer to use as random seed. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Applies\n[dropout](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf) to\nthe input.\n\nDropout consists in randomly setting a fraction `rate` of input units to 0 at\neach update during training time, which helps prevent overfitting.",
                "fileName": "#245",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L245-L247",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Basic",
                  "namespace": "layers",
                  "useDocsFrom": "Flatten",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "flatten",
                "namespace": "layers",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "inputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchInputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchSize",
                    "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                    "type": "DataType",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "Name for this layer. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "trainable",
                    "documentation": "Whether this layer is trainable. Defaults to true. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "updatable",
                    "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "weights",
                    "documentation": "Initial weight values of the layer.",
                    "type": "Tensor[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "inputDType",
                    "documentation": "Legacy support. Do not use for new code. ",
                    "type": "DataType",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Flattens the input. Does not affect the batch size.\n\nA `Flatten` layer flattens each batch in its inputs to 1D (making the output\n2D).\n\nFor example:\n\n```js\nconst input = tf.input({shape: [4, 3]});\nconst flattenLayer = tf.layers.flatten();\n// Inspect the inferred output shape of the flatten layer, which\n// equals `[null, 12]`. The 2nd dimension is 4 * 3, i.e., the result of the\n// flattening. (The 1st dimension is the undermined batch size.)\nconsole.log(JSON.stringify(flattenLayer.apply(input).shape));\n```",
                "fileName": "#258",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L258-L260",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Basic",
                  "namespace": "layers",
                  "useDocsFrom": "RepeatVector",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "repeatVector",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "n",
                    "documentation": "The integer number of times to repeat the input.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Repeats the input n times in a new dimension.\n\n```js\n  const model = tf.sequential();\n  model.add(tf.layers.repeatVector({n: 4, inputShape: [2]}));\n  const x = tf.tensor2d([[10, 20]]);\n  // Use the model to do inference on a data point the model hasn't see\n  model.predict(x).print();\n  // output shape is now [batch, 2, 4]\n```",
                "fileName": "#271",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L271-L273",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Basic",
                  "namespace": "layers",
                  "useDocsFrom": "Reshape",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "reshape",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "targetShape",
                    "documentation": "The target shape. Does not include the batch axis. ",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Reshapes an input to a certain shape.\n\n```js\nconst input = tf.input({shape: [4, 3]});\nconst reshapeLayer = tf.layers.reshape({targetShape: [2, 6]});\n// Inspect the inferred output shape of the Reshape layer, which\n// equals `[null, 2, 6]`. (The 1st dimension is the undermined batch size.)\nconsole.log(JSON.stringify(reshapeLayer.apply(input).shape));\n```\n\nInput shape:\n   Arbitrary: although all dimensions in the input shape must be fixed.\n     Use the ReshapeLayerConfig field `input_shape` when using this layer\n     as the first layer in a model.\n\nOutput shape:\n   [batchSize, targetShape[0], targetShape[1], ...,\n    targetShape[targetShape.length - 1]].",
                "fileName": "#284",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L284-L286",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Basic",
                  "namespace": "layers",
                  "useDocsFrom": "Permute",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "permute",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dims",
                    "documentation": "Array of integers. Permutation pattern. Does not include the\nsample (batch) dimension. Index starts at 1.\nFor instance, `[2, 1]` permutes the first and second dimensions\nof the input.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Permutes the dimensions of the input according to a given pattern.\n\nUseful for, e.g., connecting RNNs and convnets together.\n\nExample:\n\n```js\nconst model = tf.Sequential();\nmodel.add(tf.layers.permute({\n   dims: [2, 1],\n   inputShape: [10, 64]\n}));\nconsole.log(model.outputShape);\n// Now model's output shape is [null, 64, 10], where null is the\n// unpermuted sample (batch) dimension.\n```\n\nInput shape:\n   Arbitrary. Use the configuration field `inputShape` when using this\n   layer as othe first layer in a model.\n\nOutput shape:\n   Same rank as the input shape, but with the dimensions re-ordered (i.e.,\n   permuted) according to the `dims` configuration of this layer.",
                "fileName": "#297",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L297-L299",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Basic",
                  "namespace": "layers",
                  "useDocsFrom": "Embedding",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "embedding",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "inputDim",
                    "documentation": "Integer > 0. Size of the vocabulary, i.e. maximum integer index + 1.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "outputDim",
                    "documentation": "Integer >= 0. Dimension of the dense embedding.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "embeddingsInitializer",
                    "documentation": "Initializer for the `embeddings` matrix.",
                    "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "embeddingsRegularizer",
                    "documentation": "Regularizer function applied to the `embeddings` matrix.",
                    "type": "'l1l2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "activityRegularizer",
                    "documentation": "Regularizer function applied to the activation.",
                    "type": "'l1l2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "embeddingsConstraint",
                    "documentation": "Constraint function applied to the `embeddings` matrix.",
                    "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "maskZero",
                    "documentation": "Whether the input value 0 is a special \"padding\" value that should be\nmasked out. This is useful when using recurrent layers which may take\nvariable length input.\n\nIf this is `True` then all subsequent layers in the model need to support\nmasking or an exception will be raised. If maskZero is set to `True`, as a\nconsequence, index 0 cannot be used in the vocabulary (inputDim should\nequal size of vocabulary + 1).",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "inputLength",
                    "documentation": "Length of input sequences, when it is constant.\n\nThis argument is required if you are going to connect `flatten` then\n`dense` layers upstream (without it, the shape of the dense outputs cannot\nbe computed).",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Maps positive integers (indices) into dense vectors of fixed size.\neg. [[4], [20]] -> [[0.25, 0.1], [0.6, -0.2]]\n\n**Input shape:** 2D tensor with shape: `[batchSize, sequenceLength]`.\n\n**Output shape:** 3D tensor with shape: `[batchSize, sequenceLength,\noutputDim]`.",
                "fileName": "#310",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L310-L312",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Merge",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Merge",
                  "namespace": "layers",
                  "useDocsFrom": "Add",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "add",
                "namespace": "layers",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "inputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchInputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchSize",
                    "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                    "type": "DataType",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "Name for this layer. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "trainable",
                    "documentation": "Whether this layer is trainable. Defaults to true. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "updatable",
                    "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "weights",
                    "documentation": "Initial weight values of the layer.",
                    "type": "Tensor[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "inputDType",
                    "documentation": "Legacy support. Do not use for new code. ",
                    "type": "DataType",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Layer that performs element-wise addition on an `Array` of inputs.\n\nIt takes as input a list of tensors, all of the same shape, and returns a\nsingle tensor (also of the same shape). The inputs are specified as an\n`Array` when the `apply` method of the `Add` layer instance is called. For\nexample:\n\n```js\nconst input1 = tf.input({shape: [2, 2]});\nconst input2 = tf.input({shape: [2, 2]});\nconst addLayer = tf.layers.add();\nconst sum = addLayer.apply([input1, input2]);\nconsole.log(JSON.stringify(sum.shape));\n// You get [null, 2, 2], with the first dimension as the undetermined batch\n// dimension.\n```",
                "fileName": "#325",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L325-L327",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Merge",
                  "namespace": "layers",
                  "useDocsFrom": "Average",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "average",
                "namespace": "layers",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "inputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchInputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchSize",
                    "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                    "type": "DataType",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "Name for this layer. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "trainable",
                    "documentation": "Whether this layer is trainable. Defaults to true. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "updatable",
                    "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "weights",
                    "documentation": "Initial weight values of the layer.",
                    "type": "Tensor[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "inputDType",
                    "documentation": "Legacy support. Do not use for new code. ",
                    "type": "DataType",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Layer that performs element-wise averaging on an `Array` of inputs.\n\nIt takes as input a list of tensors, all of the same shape, and returns a\nsingle tensor (also of the same shape). For example:\n\n```js\nconst input1 = tf.input({shape: [2, 2]});\nconst input2 = tf.input({shape: [2, 2]});\nconst averageLayer = tf.layers.average();\nconst average = averageLayer.apply([input1, input2]);\nconsole.log(JSON.stringify(average.shape));\n// You get [null, 2, 2], with the first dimension as the undetermined batch\n// dimension.\n```",
                "fileName": "#338",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L338-L340",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Merge",
                  "namespace": "layers",
                  "useDocsFrom": "Concatenate",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "concatenate",
                "namespace": "layers",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "Axis along which to concatenate.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Layer that concatenates an `Array` of inputs.\n\nIt takes a list of tensors, all of the same shape except for the\nconcatenation axis, and returns a single tensor, the concatenation\nof all inputs. For example:\n\n```js\nconst input1 = tf.input({shape: [2, 2]});\nconst input2 = tf.input({shape: [2, 3]});\nconst concatLayer = tf.layers.concatenate();\nconst output = concatLayer.apply([input1, input2]);\nconsole.log(JSON.stringify(output.shape));\n// You get [null, 2, 5], with the first dimension as the undetermined batch\n// dimension. The last dimension (5) is the result of concatenating the\n// last dimensions of the inputs (2 and 3).\n```",
                "fileName": "#351",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L351-L353",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Merge",
                  "namespace": "layers",
                  "useDocsFrom": "Maximum",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "maximum",
                "namespace": "layers",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "inputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchInputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchSize",
                    "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                    "type": "DataType",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "Name for this layer. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "trainable",
                    "documentation": "Whether this layer is trainable. Defaults to true. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "updatable",
                    "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "weights",
                    "documentation": "Initial weight values of the layer.",
                    "type": "Tensor[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "inputDType",
                    "documentation": "Legacy support. Do not use for new code. ",
                    "type": "DataType",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Layer that computes the element-wise maximum an `Array` of inputs.\n\nIt takes as input a list of tensors, all of the same shape and returns a\nsingle tensor (also of the same shape). For example:\n\n```js\nconst input1 = tf.input({shape: [2, 2]});\nconst input2 = tf.input({shape: [2, 2]});\nconst maxLayer = tf.layers.maximum();\nconst max = maxLayer.apply([input1, input2]);\nconsole.log(JSON.stringify(max.shape));\n// You get [null, 2, 2], with the first dimension as the undetermined batch\n// dimension.\n```",
                "fileName": "#364",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L364-L366",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Merge",
                  "namespace": "layers",
                  "useDocsFrom": "Minimum",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "minimum",
                "namespace": "layers",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "inputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchInputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchSize",
                    "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                    "type": "DataType",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "Name for this layer. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "trainable",
                    "documentation": "Whether this layer is trainable. Defaults to true. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "updatable",
                    "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "weights",
                    "documentation": "Initial weight values of the layer.",
                    "type": "Tensor[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "inputDType",
                    "documentation": "Legacy support. Do not use for new code. ",
                    "type": "DataType",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Layer that computes the element-wise minimum of an `Array` of inputs.\n\nIt takes as input a list of tensors, all of the same shape and returns a\nsingle tensor (also of the same shape). For example:\n\n```js\nconst input1 = tf.input({shape: [2, 2]});\nconst input2 = tf.input({shape: [2, 2]});\nconst minLayer = tf.layers.minimum();\nconst min = minLayer.apply([input1, input2]);\nconsole.log(JSON.stringify(min.shape));\n// You get [null, 2, 2], with the first dimension as the undetermined batch\n// dimension.\n```",
                "fileName": "#377",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L377-L379",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Merge",
                  "namespace": "layers",
                  "useDocsFrom": "Multiply",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "multiply",
                "namespace": "layers",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "inputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchInputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchSize",
                    "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                    "type": "DataType",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "Name for this layer. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "trainable",
                    "documentation": "Whether this layer is trainable. Defaults to true. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "updatable",
                    "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "weights",
                    "documentation": "Initial weight values of the layer.",
                    "type": "Tensor[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "inputDType",
                    "documentation": "Legacy support. Do not use for new code. ",
                    "type": "DataType",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Layer that multiplies (element-wise) an `Array` of inputs.\n\nIt takes as input an Array of tensors, all of the same\nshape, and returns a single tensor (also of the same shape).\nFor example:\n\n```js\nconst input1 = tf.input({shape: [2, 2]});\nconst input2 = tf.input({shape: [2, 2]});\nconst input3 = tf.input({shape: [2, 2]});\nconst multiplyLayer = tf.layers.multiply();\nconst product = multiplyLayer.apply([input1, input2, input3]);\nconsole.log(product.shape);\n// You get [null, 2, 2], with the first dimension as the undetermined batch\n// dimension.",
                "fileName": "#390",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L390-L392",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Merge",
                  "namespace": "layers",
                  "useDocsFrom": "Dot",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "dot",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axes",
                    "documentation": "Axis or axes along which the dot product will be taken.\n\nInteger or an Array of integers.",
                    "type": "number|[number, number]",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "normalize",
                    "documentation": "Whether to L2-normalize samples along the dot product axis\nbefore taking the dot product.\n\nIf set to `true`, the output of the dot product isthe cosine\nproximity between the two samples.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Layer that computes a dot product between samples in two tensors.\n\nE.g., if applied to a list of two tensors `a` and `b` both of shape\n`[batchSize, n]`, the output will be a tensor of shape `[batchSize, 1]`,\nwhere each entry at index `[i, 0]` will be the dot product between\n`a[i, :]` and `b[i, :]`.\n\nExample:\n\n```js\nconst dotLayer = tf.layers.dot({axis: -1});\nconst x1 = tf.tensor2d([[10, 20], [30, 40]]);\nconst x2 = tf.tensor2d([[-1, -2], [-3, -4]]);\n\n// Invoke the layer's apply() method in eager (imperative) mode.\nconst y = dotLayer.apply([x1, x2]);\n```",
                "fileName": "#403",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L403-L405",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Normalization",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Normalization",
                  "namespace": "layers",
                  "useDocsFrom": "BatchNormalization",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "batchNormalization",
                "namespace": "layers",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The integer axis that should be normalized (typically the features axis).\nDefaults to -1.\n\nFor instance, after a `Conv2D` layer with `data_format=\"channels_first\"`,\nset `axis=1` in `batchNormalization`.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "momentum",
                    "documentation": "Momentum of the moving average. Defaults to 0.99.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "epsilon",
                    "documentation": "Small float added to the variance to avoid dividing by zero. Defaults to\n1e-3.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "center",
                    "documentation": "If `true`, add offset of `beta` to normalized tensor.\nIf `false`, `beta` is ignored.\nDefaults to `true`.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "scale",
                    "documentation": "If `true`, multiply by `gamma`.\nIf `false`, `gamma` is not used.\nWhen the next layer is linear (also e.g. `nn.relu`),\nthis can be disabled since the scaling will be done by the next layer.\nDefaults to `true`.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "betaInitializer",
                    "documentation": "Initializer for the beta weight.\n  Defaults to 'zeros'.",
                    "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "gammaInitializer",
                    "documentation": "Initializer for the gamma weight.\n  Defaults to `ones`.",
                    "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "movingMeanInitializer",
                    "documentation": "Initializer for the moving mean.\nDefaults to `zeros`",
                    "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "movingVarianceInitializer",
                    "documentation": "Initializer for the moving variance.\n  Defaults to 'Ones'.",
                    "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "betaConstraint",
                    "documentation": "Constraint for the beta weight.",
                    "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "gammaConstraint",
                    "documentation": "Constraint for gamma weight.",
                    "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "betaRegularizer",
                    "documentation": "Regularizer for the beta weight.",
                    "type": "'l1l2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "gammaRegularizer",
                    "documentation": "Regularizer for the gamma weight.",
                    "type": "'l1l2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Batch normalization layer (Ioffe and Szegedy, 2014).\n\nNormalize the activations of the previous layer at each batch,\ni.e. applies a transformation that maintains the mean activation\nclose to 0 and the activation standard deviation close to 1.\n\nInput shape:\n   Arbitrary. Use the keyword argument `inputShape` (Array of integers, does\n   not include the sample axis) when calling the constructor of this class,\n   if this layer is used as a first layer in a model.\n\nOutput shape:\n   Same shape as input.\n\nReferences:\n   - [Batch Normalization: Accelerating Deep Network Training by Reducing\nInternal Covariate Shift](https://arxiv.org/abs/1502.03167)",
                "fileName": "#418",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L418-L421",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Padding",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Padding",
                  "namespace": "layers",
                  "useDocsFrom": "ZeroPadding2D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "zeroPadding2d",
                "namespace": "layers",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "padding",
                    "documentation": "Integer, or `Array` of 2 integers, or `Array` of 2 `Array`s, each of\nwhich is an `Array` of 2 integers.\n- If integer, the same symmetric padding is applied to width and height.\n- If Array` of 2 integers, interpreted as two different symmetric values\n   for height and width:\n   `[symmetricHeightPad, symmetricWidthPad]`.\n- If `Array` of 2 `Array`s, interpreted as:\n   `[[topPad, bottomPad], [leftPad, rightPad]]`.",
                    "type": "number|[number, number]|[[number, number], [number, number]]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dataFormat",
                    "documentation": "One of `'channelsLast'` (default) and `'channelsFirst'`.\n\nThe ordering of the dimensions in the inputs.\n`channelsLast` corresponds to inputs with shape\n`[batch, height, width, channels]` while `channelsFirst`\ncorresponds to inputs with shape\n`[batch, channels, height, width]`.",
                    "type": "'channelsFirst'|'channelsLast'",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Zero-padding layer for 2D input (e.g., image).\n\nThis layer can add rows and columns of zeros\nat the top, bottom, left and right side of an image tensor.\n\nInput shape:\n   4D tensor with shape:\n   - If `dataFormat` is `\"channelsLast\"`:\n     `[batch, rows, cols, channels]`\n   - If `data_format` is `\"channels_first\"`:\n     `[batch, channels, rows, cols]`.\n\nOutput shape:\n   4D with shape:\n   - If `dataFormat` is `\"channelsLast\"`:\n     `[batch, paddedRows, paddedCols, channels]`\n    - If `dataFormat` is `\"channelsFirst\"`:\n     `[batch, channels, paddedRows, paddedCols]`.",
                "fileName": "#434",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L434-L436",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Pooling",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "AveragePooling1D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "averagePooling1d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "poolSize",
                    "documentation": "Size of the window to pool over, should be an integer.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "strides",
                    "documentation": "Period at which to sample the pooled values.\n\nIf `null`, defaults to `poolSize`.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "padding",
                    "documentation": "How to fill in data that's not an integer multiple of poolSize. ",
                    "type": "'valid'|'same'|'causal'",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Average pooling operation for spatial data.\n\nInput shape: `[batchSize, inLength, channels]`\n\nOutput shape: `[batchSize, pooledLength, channels]`\n\n`tf.avgPool1d` is an alias.",
                "fileName": "#448",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L448-L450",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "AveragePooling2D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "averagePooling2d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "poolSize",
                    "documentation": "Factors by which to downscale in each dimension [vertical, horizontal].\nExpects an integer or an array of 2 integers.\n\nFor example, `[2, 2]` will halve the input in both spatial dimension.\nIf only one integer is specified, the same window length\nwill be used for both dimensions.",
                    "type": "number|[number, number]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "strides",
                    "documentation": "The size of the stride in each dimension of the pooling window. Expects\nan integer or an array of 2 integers. Integer, tuple of 2 integers, or\nNone.\n\nIf `null`, defaults to `poolSize`.",
                    "type": "number|[number, number]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "padding",
                    "documentation": "The padding type to use for the pooling layer. ",
                    "type": "'valid'|'same'|'causal'",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dataFormat",
                    "documentation": "The data format to use for the pooling layer. ",
                    "type": "'channelsFirst'|'channelsLast'",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Average pooling operation for spatial data.\n\nInput shape:\n  - If `dataFormat === CHANNEL_LAST`:\n      4D tensor with shape:\n      `[batchSize, rows, cols, channels]`\n  - If `dataFormat === CHANNEL_FIRST`:\n      4D tensor with shape:\n      `[batchSize, channels, rows, cols]`\n\nOutput shape\n  - If `dataFormat === CHANNEL_LAST`:\n      4D tensor with shape:\n      `[batchSize, pooleRows, pooledCols, channels]`\n  - If `dataFormat === CHANNEL_FIRST`:\n      4D tensor with shape:\n      `[batchSize, channels, pooleRows, pooledCols]`\n\n`tf.avgPool2d` is an alias.",
                "fileName": "#469",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L469-L471",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "GlobalAveragePooling1D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "globalAveragePooling1d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "inputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchInputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchSize",
                    "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                    "type": "DataType",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "Name for this layer. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "trainable",
                    "documentation": "Whether this layer is trainable. Defaults to true. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "updatable",
                    "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "weights",
                    "documentation": "Initial weight values of the layer.",
                    "type": "Tensor[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "inputDType",
                    "documentation": "Legacy support. Do not use for new code. ",
                    "type": "DataType",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Global average pooling operation for temporal data.\n\nInput Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n\nOutput Shape:2D tensor with shape: `[batchSize, features]`.",
                "fileName": "#490",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L490-L492",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "GlobalAveragePooling2D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "globalAveragePooling2d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dataFormat",
                    "documentation": "One of `CHANNEL_LAST` (default) or `CHANNEL_FIRST`.\n\nThe ordering of the dimensions in the inputs. `CHANNEL_LAST` corresponds\nto inputs with shape `[batch, height, width, channels[` while\n`CHANNEL_FIRST` corresponds to inputs with shape\n`[batch, channels, height, width]`.",
                    "type": "'channelsFirst'|'channelsLast'",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Global average pooling operation for spatial data.\n\nInput shape:\n   - If `dataFormat` is `CHANNEL_LAST`:\n       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n   - If `dataFormat` is `CHANNEL_FIRST`:\n       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n\nOutput shape:\n   2D tensor with shape: `[batchSize, channels]`.",
                "fileName": "#503",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L503-L506",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "GlobalMaxPooling1D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "globalMaxPooling1d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "inputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchInputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both `inputShape` and `batchInputShape` are defined,\n`batchInputShape` will be used. This argument is only applicable to input\nlayers (the first layer of a model).",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "batchSize",
                    "documentation": "If `inputShape` is specified and `batchInputShape` is *not* specifiedd,\n`batchSize` is used to construct the `batchInputShape`: `[batchSize,\n...inputShape]`",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data-type for this layer. Defaults to 'float32'.\nThis argument is only applicable to input layers (the first layer of a\nmodel).",
                    "type": "DataType",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "name",
                    "documentation": "Name for this layer. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "trainable",
                    "documentation": "Whether this layer is trainable. Defaults to true. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "updatable",
                    "documentation": "Whether the weights of this layer are updatable by `fit`. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "weights",
                    "documentation": "Initial weight values of the layer.",
                    "type": "Tensor[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "inputDType",
                    "documentation": "Legacy support. Do not use for new code. ",
                    "type": "DataType",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Global max pooling operation for temporal data.\n\nInput Shape: 3D tensor with shape: `[batchSize, steps, features]`.\n\nOutput Shape:2D tensor with shape: `[batchSize, features]`.",
                "fileName": "#517",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L517-L519",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "GlobalMaxPooling2D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "globalMaxPooling2d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dataFormat",
                    "documentation": "One of `CHANNEL_LAST` (default) or `CHANNEL_FIRST`.\n\nThe ordering of the dimensions in the inputs. `CHANNEL_LAST` corresponds\nto inputs with shape `[batch, height, width, channels[` while\n`CHANNEL_FIRST` corresponds to inputs with shape\n`[batch, channels, height, width]`.",
                    "type": "'channelsFirst'|'channelsLast'",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Global max pooling operation for spatial data.\n\nInput shape:\n   - If `dataFormat` is `CHANNEL_LAST`:\n       4D tensor with shape: `[batchSize, rows, cols, channels]`.\n   - If `dataFormat` is `CHANNEL_FIRST`:\n       4D tensor with shape: `[batchSize, channels, rows, cols]`.\n\nOutput shape:\n   2D tensor with shape: `[batchSize, channels]`.",
                "fileName": "#530",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L530-L532",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "MaxPooling1D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "maxPooling1d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "poolSize",
                    "documentation": "Size of the window to pool over, should be an integer.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "strides",
                    "documentation": "Period at which to sample the pooled values.\n\nIf `null`, defaults to `poolSize`.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "padding",
                    "documentation": "How to fill in data that's not an integer multiple of poolSize. ",
                    "type": "'valid'|'same'|'causal'",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Max pooling operation for temporal data.\n\nInput shape:  `[batchSize, inLength, channels]`\n\nOutput shape: `[batchSize, pooledLength, channels]`",
                "fileName": "#543",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L543-L545",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "MaxPooling2D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "maxPooling2d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "poolSize",
                    "documentation": "Factors by which to downscale in each dimension [vertical, horizontal].\nExpects an integer or an array of 2 integers.\n\nFor example, `[2, 2]` will halve the input in both spatial dimension.\nIf only one integer is specified, the same window length\nwill be used for both dimensions.",
                    "type": "number|[number, number]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "strides",
                    "documentation": "The size of the stride in each dimension of the pooling window. Expects\nan integer or an array of 2 integers. Integer, tuple of 2 integers, or\nNone.\n\nIf `null`, defaults to `poolSize`.",
                    "type": "number|[number, number]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "padding",
                    "documentation": "The padding type to use for the pooling layer. ",
                    "type": "'valid'|'same'|'causal'",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dataFormat",
                    "documentation": "The data format to use for the pooling layer. ",
                    "type": "'channelsFirst'|'channelsLast'",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Max pooling operation for spatial data.\n\nInput shape\n   - If `dataFormat === CHANNEL_LAST`:\n       4D tensor with shape:\n       `[batchSize, rows, cols, channels]`\n   - If `dataFormat === CHANNEL_FIRST`:\n      4D tensor with shape:\n       `[batchSize, channels, rows, cols]`\n\nOutput shape\n   - If `dataFormat=CHANNEL_LAST`:\n       4D tensor with shape:\n       `[batchSize, pooleRows, pooledCols, channels]`\n   - If `dataFormat=CHANNEL_FIRST`:\n       4D tensor with shape:\n       `[batchSize, channels, pooleRows, pooledCols]`",
                "fileName": "#556",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L556-L558",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Recurrent",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Recurrent",
                  "namespace": "layers",
                  "useDocsFrom": "GRU",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "gru",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "recurrentActivation",
                    "documentation": "Activation function to use for the recurrent step.\n\nDefaults to hard sigmoid (`hardSigmoid`).\n\nIf `null`, no activation is applied.",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "implementation",
                    "documentation": "Implementation mode, either 1 or 2.\n\nMode 1 will structure its operations as a larger number of\nsmaller dot products and additions.\n\nMode 2 will batch them into fewer, larger operations. These modes will\nhave different performance profiles on different hardware and\nfor different applications.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Gated Recurrent Unit - Cho et al. 2014.\n\nThis is an `RNN` layer consisting of one `GRUCell`. However, unlike\nthe underlying `GRUCell`, the `apply` method of `SimpleRNN` operates\non a sequence of inputs. The shape of the input (not including the first,\nbatch dimension) needs to be at least 2-D, with the first dimension being\ntime steps. For example:\n\n```js\nconst rnn = tf.layers.gru({units: 8, returnSequences: true});\n\n// Create an input with 10 time steps.\nconst input = tf.input({shape: [10, 20]});\nconst output = rnn.apply(input);\n\nconsole.log(JSON.stringify(output.shape));\n// [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n// same as the sequence length of `input`, due to `returnSequences`: `true`;\n// 3rd dimension is the `GRUCell`'s number of units.",
                "fileName": "#571",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L571-L573",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Recurrent",
                  "namespace": "layers",
                  "useDocsFrom": "GRUCell",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "gruCell",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "recurrentActivation",
                    "documentation": "Activation function to use for the recurrent step.\n\nDefaults to hard sigmoid (`hardSigmoid`).\n\nIf `null`, no activation is applied.",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "implementation",
                    "documentation": "Implementation mode, either 1 or 2.\n\nMode 1 will structure its operations as a larger number of\n   smaller dot products and additions.\n\nMode 2 will batch them into fewer, larger operations. These modes will\nhave different performance profiles on different hardware and\nfor different applications.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "RNNCell",
                "documentation": "Cell class for `GRU`.\n\n`GRUCell` is distinct from the `RNN` subclass `GRU` in that its\n`apply` method takes the input data of only a single time step and returns\nthe cell's output at the time step, while `GRU` takes the input data\nover a number of time steps. For example:\n\n```js\nconst cell = tf.layers.gruCell({units: 2});\nconst input = tf.input({shape: [10]});\nconst output = cell.apply(input);\n\nconsole.log(JSON.stringify(output.shape));\n// [null, 10]: This is the cell's output at a single time step. The 1st\n// dimension is the unknown batch size.\n```\n\nInstance(s) of `GRUCell` can be used to construct `RNN` layers. The\nmost typical use of this workflow is to combine a number of cells into a\nstacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\nRNN. For example:\n\n```js\nconst cells = [\n   tf.layers.gruCell({units: 4}),\n   tf.layers.gruCell({units: 8}),\n];\nconst rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n\n// Create an input with 10 time steps and a length-20 vector at each step.\nconst input = tf.input({shape: [10, 20]});\nconst output = rnn.apply(input);\n\nconsole.log(JSON.stringify(output.shape));\n// [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n// same as the sequence length of `input`, due to `returnSequences`: `true`;\n// 3rd dimension is the last `gruCell`'s number of units.\n```\n\nTo create an `RNN` consisting of only *one* `GRUCell`, use the\n`tf.layers.gru`.",
                "fileName": "#584",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L584-L586",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Recurrent",
                  "namespace": "layers",
                  "useDocsFrom": "LSTM",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "lstm",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "recurrentActivation",
                    "documentation": "Activation function to use for the recurrent step.\n\nDefaults to hard sigmoid (`hardSigmoid`).\n\nIf `null`, no activation is applied.",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "unitForgetBias",
                    "documentation": "If `true`, add 1 to the bias of the forget gate at initialization.\nSetting it to `true` will also force `biasInitializer = 'zeros'`.\nThis is recommended in\n[Jozefowicz et\nal.](http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf).",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "implementation",
                    "documentation": "Implementation mode, either 1 or 2.\n   Mode 1 will structure its operations as a larger number of\n   smaller dot products and additions, whereas mode 2 will\n   batch them into fewer, larger operations. These modes will\n   have different performance profiles on different hardware and\n   for different applications.",
                    "type": "1|2",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Long-Short Term Memory layer - Hochreiter 1997.\n\nThis is an `RNN` layer consisting of one `LSTMCell`. However, unlike\nthe underlying `LSTMCell`, the `apply` method of `LSTM` operates\non a sequence of inputs. The shape of the input (not including the first,\nbatch dimension) needs to be at least 2-D, with the first dimension being\ntime steps. For example:\n\n```js\nconst lstm = tf.layers.lstm({units: 8, returnSequences: true});\n\n// Create an input with 10 time steps.\nconst input = tf.input({shape: [10, 20]});\nconst output = lstm.apply(input);\n\nconsole.log(JSON.stringify(output.shape));\n// [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n// same as the sequence length of `input`, due to `returnSequences`: `true`;\n// 3rd dimension is the `LSTMCell`'s number of units.",
                "fileName": "#597",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L597-L599",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Recurrent",
                  "namespace": "layers",
                  "useDocsFrom": "LSTMCell",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "lstmCell",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "recurrentActivation",
                    "documentation": "Activation function to use for the recurrent step.\n\nDefaults to hard sigmoid (`hardSigmoid`).\n\nIf `null`, no activation is applied.",
                    "type": "'elu'|'hardSigmoid'|'linear'|'relu'|'relu6'|\n    'selu'|'sigmoid'|'softmax'|'softplus'|'softsign'|'tanh'|string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "unitForgetBias",
                    "documentation": "If `true`, add 1 to the bias of the forget gate at initialization.\nSetting it to `true` will also force `biasInitializer = 'zeros'`.\nThis is recommended in\n[Jozefowicz et\nal.](http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf).",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "implementation",
                    "documentation": "Implementation mode, either 1 or 2.\n\nMode 1 will structure its operations as a larger number of\n   smaller dot products and additions.\n\nMode 2 will batch them into fewer, larger operations. These modes will\nhave different performance profiles on different hardware and\nfor different applications.",
                    "type": "1|2",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "RNNCell",
                "documentation": "Cell class for `LSTM`.\n\n`LSTMCell` is distinct from the `RNN` subclass `LSTM` in that its\n`apply` method takes the input data of only a single time step and returns\nthe cell's output at the time step, while `LSTM` takes the input data\nover a number of time steps. For example:\n\n```js\nconst cell = tf.layers.lstmCell({units: 2});\nconst input = tf.input({shape: [10]});\nconst output = cell.apply(input);\n\nconsole.log(JSON.stringify(output.shape));\n// [null, 10]: This is the cell's output at a single time step. The 1st\n// dimension is the unknown batch size.\n```\n\nInstance(s) of `LSTMCell` can be used to construct `RNN` layers. The\nmost typical use of this workflow is to combine a number of cells into a\nstacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\nRNN. For example:\n\n```js\nconst cells = [\n   tf.layers.lstmCell({units: 4}),\n   tf.layers.lstmCell({units: 8}),\n];\nconst rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n\n// Create an input with 10 time steps and a length-20 vector at each step.\nconst input = tf.input({shape: [10, 20]});\nconst output = rnn.apply(input);\n\nconsole.log(JSON.stringify(output.shape));\n// [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n// same as the sequence length of `input`, due to `returnSequences`: `true`;\n// 3rd dimension is the last `lstmCell`'s number of units.\n```\n\nTo create an `RNN` consisting of only *one* `LSTMCell`, use the\n`tf.layers.lstm`.",
                "fileName": "#610",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L610-L612",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Recurrent",
                  "namespace": "layers",
                  "useDocsFrom": "SimpleRNN",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "simpleRNN",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "units",
                    "documentation": "Positive integer, dimensionality of the output space.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "activation",
                    "documentation": "Activation function to use.\n\nDefaults to  hyperbolic tangent (`tanh`)\n\nIf you pass `null`, no activation will be applied.",
                    "type": "'elu'|'hardSigmoid'|'linear'|'relu'|'relu6'|\n    'selu'|'sigmoid'|'softmax'|'softplus'|'softsign'|'tanh'|string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "useBias",
                    "documentation": "Whether the layer uses a bias vector.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelInitializer",
                    "documentation": "Initializer for the `kernel` weights matrix, used for the linear\ntransformation of the inputs.",
                    "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "recurrentInitializer",
                    "documentation": "Initializer for the `recurrentKernel` weights matrix, used for\nlinear transformation of the recurrent state.",
                    "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasInitializer",
                    "documentation": "Initializer for the bias vector.",
                    "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelRegularizer",
                    "documentation": "Regularizer function applied to the kernel weights matrix.",
                    "type": "'l1l2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "recurrentRegularizer",
                    "documentation": "Regularizer function applied to the recurrentKernel weights matrix.",
                    "type": "'l1l2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasRegularizer",
                    "documentation": "Regularizer function applied to the bias vector.",
                    "type": "'l1l2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelConstraint",
                    "documentation": "Constraint function applied to the kernel weights matrix.",
                    "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "recurrentConstraint",
                    "documentation": "Constraint function applied to the recurrentKernel weights matrix.",
                    "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasConstraint",
                    "documentation": "Constraint function applied to the bias vector.",
                    "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dropout",
                    "documentation": "Number between 0 and 1. Fraction of the units to drop for the linear\ntransformation of the inputs.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "recurrentDropout",
                    "documentation": "Number between 0 and 1. Fraction of the units to drop for the linear\ntransformation of the recurrent state.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Fully-connected RNN where the output is to be fed back to input.\n\nThis is an `RNN` layer consisting of one `SimpleRNNCell`. However, unlike\nthe underlying `SimpleRNNCell`, the `apply` method of `SimpleRNN` operates\non a sequence of inputs. The shape of the input (not including the first,\nbatch dimension) needs to be at least 2-D, with the first dimension being\ntime steps. For example:\n\n```js\nconst rnn = tf.layers.simpleRNN({units: 8, returnSequences: true});\n\n// Create an input with 10 time steps.\nconst input = tf.input({shape: [10, 20]});\nconst output = rnn.apply(input);\n\nconsole.log(JSON.stringify(output.shape));\n// [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n// same as the sequence length of `input`, due to `returnSequences`: `true`;\n// 3rd dimension is the `SimpleRNNCell`'s number of units.\n```",
                "fileName": "#623",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L623-L625",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Recurrent",
                  "namespace": "layers",
                  "useDocsFrom": "SimpleRNNCell",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "simpleRNNCell",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "units",
                    "documentation": "units: Positive integer, dimensionality of the output space.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "activation",
                    "documentation": "Activation function to use.\nDefault: hyperbolic tangent ('tanh').\nIf you pass `null`,  'linear' activation will be applied.",
                    "type": "'elu'|'hardSigmoid'|'linear'|'relu'|'relu6'|\n    'selu'|'sigmoid'|'softmax'|'softplus'|'softsign'|'tanh'|string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "useBias",
                    "documentation": "Whether the layer uses a bias vector.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelInitializer",
                    "documentation": "Initializer for the `kernel` weights matrix, used for the linear\ntransformation of the inputs.",
                    "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "recurrentInitializer",
                    "documentation": "Initializer for the `recurrentKernel` weights matrix, used for\nlinear transformation of the recurrent state.",
                    "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasInitializer",
                    "documentation": "Initializer for the bias vector.",
                    "type": "'constant'|'glorotNormal'|'glorotUniform'|\n    'heNormal'|'identity'|'leCunNormal'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelRegularizer",
                    "documentation": "Regularizer function applied to the `kernel` weights matrix.",
                    "type": "'l1l2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "recurrentRegularizer",
                    "documentation": "Regularizer function applied to the `recurrent_kernel` weights matrix.",
                    "type": "'l1l2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasRegularizer",
                    "documentation": "Regularizer function applied to the bias vector.",
                    "type": "'l1l2'|string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "kernelConstraint",
                    "documentation": "Constraint function applied to the `kernel` weights matrix.",
                    "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "recurrentConstraint",
                    "documentation": "Constraint function applied to the `recurrentKernel` weights matrix.",
                    "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "biasConstraint",
                    "documentation": "Constraintfunction applied to the bias vector.",
                    "type": "'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "dropout",
                    "documentation": "Float number between 0 and 1. Fraction of the units to drop for the linear\ntransformation of the inputs.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "recurrentDropout",
                    "documentation": "Float number between 0 and 1. Fraction of the units to drop for the linear\ntransformation of the recurrent state.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "RNNCell",
                "documentation": "Cell class for `SimpleRNN`.\n\n`SimpleRNNCell` is distinct from the `RNN` subclass `SimpleRNN` in that its\n`apply` method takes the input data of only a single time step and returns\nthe cell's output at the time step, while `SimpleRNN` takes the input data\nover a number of time steps. For example:\n\n```js\nconst cell = tf.layers.simpleRNNCell({units: 2});\nconst input = tf.input({shape: [10]});\nconst output = cell.apply(input);\n\nconsole.log(JSON.stringify(output.shape));\n// [null, 10]: This is the cell's output at a single time step. The 1st\n// dimension is the unknown batch size.\n```\n\nInstance(s) of `SimpleRNNCell` can be used to construct `RNN` layers. The\nmost typical use of this workflow is to combine a number of cells into a\nstacked RNN cell (i.e., `StackedRNNCell` internally) and use it to create an\nRNN. For example:\n\n```js\nconst cells = [\n   tf.layers.simpleRNNCell({units: 4}),\n   tf.layers.simpleRNNCell({units: 8}),\n];\nconst rnn = tf.layers.rnn({cell: cells, returnSequences: true});\n\n// Create an input with 10 time steps and a length-20 vector at each step.\nconst input = tf.input({shape: [10, 20]});\nconst output = rnn.apply(input);\n\nconsole.log(JSON.stringify(output.shape));\n// [null, 10, 8]: 1st dimension is unknown batch size; 2nd dimension is the\n// same as the sequence length of `input`, due to `returnSequences`: `true`;\n// 3rd dimension is the last `SimpleRNNCell`'s number of units.\n```\n\nTo create an `RNN` consisting of only *one* `SimpleRNNCell`, use the\n`tf.layers.simpleRNN`.",
                "fileName": "#636",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L636-L638",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Recurrent",
                  "namespace": "layers",
                  "useDocsFrom": "RNN",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "rnn",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "cell",
                    "documentation": "",
                    "type": "RNNCell|RNNCell[]",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "Base class for recurrent layers.\n\nInput shape:\n   3D tensor with shape `[batchSize, timeSteps, inputDim]`.\n\nOutput shape:\n   - if `returnState`, an Array of tensors (i.e., `Tensor`s). The first\n     tensor is the output. The remaining tensors are the states at the\n     last time step, each with shape `[batchSize, units]`.\n   - if `returnSequences`, the output will have shape\n     `[batchSize, timeSteps, units]`.\n   - else, the output will have shape `[batchSize, units]`.\n\nMasking:\n   This layer supports masking for input data with a variable number\n   of timesteps. To introduce masks to your data,\n   use an embedding layer with the `mask_zero` parameter\n   set to `True`.\n\nNotes on using statefulness in RNNs:\n   You can set RNN layers to be 'stateful', which means that the states\n   computed for the samples in one batch will be reused as initial states\n   for the samples in the next batch. This assumes a one-to-one mapping\n   between samples in different successive batches.\n\n   To enable statefulness:\n     - specify `stateful: true` in the layer constructor.\n     - specify a fixed batch size for your model, by passing\n       if sequential model:\n         `batchInputShape=[...]` to the first layer in your model.\n       else for functional model with 1 or more Input layers:\n         `batchShape=[...]` to all the first layers in your model.\n       This is the expected shape of your inputs *including the batch size*.\n       It should be a tuple of integers, e.g. `(32, 10, 100)`.\n     - specify `shuffle=False` when calling fit().\n\n   To reset the states of your model, call `.resetStates()` on either\n   a specific layer, or on your entire model.\n\nNote on specifying the initial state of RNNs\n   You can specify the initial state of RNN layers symbolically by\n   calling them with the option `initialState`. The value of\n   `initialState` should be a tensor or list of tensors representing\n   the initial state of the RNN layer.\n\n   You can specify the initial state of RNN layers numerically by\n   calling `resetStates` with the keyword argument `states`. The value of\n   `states` should be a numpy array or list of numpy arrays representing\n   the initial state of the RNN layer.\n\nNote on passing external constants to RNNs\n   You can pass \"external\" constants to the cell using the `constants`\n   keyword argument of `RNN.call` method. This requires that the `cell.call`\n   method accepts the same keyword argument `constants`. Such constants\n   can be used to conditon the cell transformation on additional static inputs\n   (not changing over time), a.k.a an attention mechanism.",
                "fileName": "#649",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L649-L651",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Recurrent",
                  "namespace": "layers",
                  "useDocsFrom": "RNN",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "stackedRNNCells",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "cells",
                    "documentation": "A `Array` of `RNNCell` instances.",
                    "type": "RNNCell[]",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "RNNCell",
                "documentation": "Base class for recurrent layers.\n\nInput shape:\n   3D tensor with shape `[batchSize, timeSteps, inputDim]`.\n\nOutput shape:\n   - if `returnState`, an Array of tensors (i.e., `Tensor`s). The first\n     tensor is the output. The remaining tensors are the states at the\n     last time step, each with shape `[batchSize, units]`.\n   - if `returnSequences`, the output will have shape\n     `[batchSize, timeSteps, units]`.\n   - else, the output will have shape `[batchSize, units]`.\n\nMasking:\n   This layer supports masking for input data with a variable number\n   of timesteps. To introduce masks to your data,\n   use an embedding layer with the `mask_zero` parameter\n   set to `True`.\n\nNotes on using statefulness in RNNs:\n   You can set RNN layers to be 'stateful', which means that the states\n   computed for the samples in one batch will be reused as initial states\n   for the samples in the next batch. This assumes a one-to-one mapping\n   between samples in different successive batches.\n\n   To enable statefulness:\n     - specify `stateful: true` in the layer constructor.\n     - specify a fixed batch size for your model, by passing\n       if sequential model:\n         `batchInputShape=[...]` to the first layer in your model.\n       else for functional model with 1 or more Input layers:\n         `batchShape=[...]` to all the first layers in your model.\n       This is the expected shape of your inputs *including the batch size*.\n       It should be a tuple of integers, e.g. `(32, 10, 100)`.\n     - specify `shuffle=False` when calling fit().\n\n   To reset the states of your model, call `.resetStates()` on either\n   a specific layer, or on your entire model.\n\nNote on specifying the initial state of RNNs\n   You can specify the initial state of RNN layers symbolically by\n   calling them with the option `initialState`. The value of\n   `initialState` should be a tensor or list of tensors representing\n   the initial state of the RNN layer.\n\n   You can specify the initial state of RNN layers numerically by\n   calling `resetStates` with the keyword argument `states`. The value of\n   `states` should be a numpy array or list of numpy arrays representing\n   the initial state of the RNN layer.\n\nNote on passing external constants to RNNs\n   You can pass \"external\" constants to the cell using the `constants`\n   keyword argument of `RNN.call` method. This requires that the `cell.call`\n   method accepts the same keyword argument `constants`. Such constants\n   can be used to conditon the cell transformation on additional static inputs\n   (not changing over time), a.k.a an attention mechanism.",
                "fileName": "#662",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L662-L664",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Wrapper",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Wrapper",
                  "namespace": "layers",
                  "useDocsFrom": "Bidirectional",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "bidirectional",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "layer",
                    "documentation": "The instance of an `RNN` layer to be wrapped.",
                    "type": "RNN",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "mergeMode",
                    "documentation": "Mode by which outputs of the forward and backward RNNs are\ncombinied. If `null` or `undefined`, the output will not be\ncombined, they will be returned as an `Array`.",
                    "type": "BidirectionalMergeMode",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Wrapper",
                "documentation": "",
                "fileName": "#677",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L677-L679",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Wrapper",
                  "namespace": "layers",
                  "useDocsFrom": "TimeDistributed",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "timeDistributed",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Object",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "layer",
                    "documentation": "The layer to be wrapped.",
                    "type": "Layer",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Layer",
                "documentation": "This wrapper applies a layer to every temporal slice of an input.\n\nThe input should be at least 3D,  and the dimension of the index `1` will be\nconsidered to be the temporal dimension.\n\nConsider a batch of 32 samples, where each sample is a sequence of 10 vectors\nof 16 dimensions. The batch input shape of the layer is then `[32,  10,\n16]`, and the `inputShape`, not including the sample dimension, is\n`[10, 16]`.\n\nYou can then use `TimeDistributed` to apply a `Dense` layer to each of the 10\ntimesteps, independently:\n\n```js\nconst model = tf.sequential();\nmodel.add(tf.layers.timeDistributed({\n   layer: tf.layers.dense({units: 8}),\n   inputShape: [10, 16],\n}));\n\n// Now model.outputShape = [null, 10, 8].\n// The output will then have shape `[32, 10, 8]`.\n\n// In subsequent layers, there is no need for `inputShape`:\nmodel.add(tf.layers.timeDistributed({layer: tf.layers.dense({units: 32})}));\nconsole.log(JSON.stringify(model.outputs[0].shape));\n// Now model.outputShape = [null, 10, 32].\n```\n\nThe output will then have shape `[32, 10, 32]`.\n\n`TimeDistributed` can be used with arbitrary layers, not just `Dense`, for\ninstance a `Conv2D` layer.\n\n```js\nconst model = tf.sequential();\nmodel.add(tf.layers.timeDistributed({\n   layer: tf.layers.conv2d({filters: 64, kernelSize: [3, 3]}),\n   inputShape: [10, 299, 299, 3],\n}));\nconsole.log(JSON.stringify(model.outputs[0].shape));\n```",
                "fileName": "#690",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_layers.ts#L690-L692",
                "isFunction": true
              }
            ]
          }
        ]
      },
      {
        "name": "Metrics",
        "description": "",
        "subheadings": [
          {
            "symbols": [
              {
                "docInfo": {
                  "heading": "Metrics",
                  "namespace": "metrics",
                  "useDocsFrom": "binaryAccuracy"
                },
                "symbolName": "binaryAccuracy",
                "namespace": "metrics",
                "paramStr": "(yTrue, yPred)",
                "parameters": [
                  {
                    "name": "yTrue",
                    "documentation": "",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "yPred",
                    "documentation": "",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "",
                "fileName": "#22",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_metrics.ts#L22-L24",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Metrics",
                  "namespace": "metrics",
                  "useDocsFrom": "binaryCrossentropy"
                },
                "symbolName": "binaryCrossentropy",
                "namespace": "metrics",
                "paramStr": "(yTrue, yPred)",
                "parameters": [
                  {
                    "name": "yTrue",
                    "documentation": "",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "yPred",
                    "documentation": "",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "",
                "fileName": "#33",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_metrics.ts#L33-L35",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Metrics",
                  "namespace": "metrics",
                  "useDocsFrom": "categoricalAccuracy"
                },
                "symbolName": "categoricalAccuracy",
                "namespace": "metrics",
                "paramStr": "(yTrue, yPred)",
                "parameters": [
                  {
                    "name": "yTrue",
                    "documentation": "",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "yPred",
                    "documentation": "",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "",
                "fileName": "#44",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_metrics.ts#L44-L46",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Metrics",
                  "namespace": "metrics",
                  "useDocsFrom": "categoricalCrossentropy"
                },
                "symbolName": "categoricalCrossentropy",
                "namespace": "metrics",
                "paramStr": "(yTrue, yPred)",
                "parameters": [
                  {
                    "name": "yTrue",
                    "documentation": "",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "yPred",
                    "documentation": "",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "",
                "fileName": "#55",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_metrics.ts#L55-L57",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Metrics",
                  "namespace": "metrics",
                  "useDocsFrom": "precision"
                },
                "symbolName": "precision",
                "namespace": "metrics",
                "paramStr": "(yTrue, yPred)",
                "parameters": [
                  {
                    "name": "yTrue",
                    "documentation": "",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "yPred",
                    "documentation": "",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "",
                "fileName": "#66",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_metrics.ts#L66-L68",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Metrics",
                  "namespace": "metrics",
                  "useDocsFrom": "recall"
                },
                "symbolName": "recall",
                "namespace": "metrics",
                "paramStr": "(yTrue, yPred)",
                "parameters": [
                  {
                    "name": "yTrue",
                    "documentation": "",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "yPred",
                    "documentation": "",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "",
                "fileName": "#77",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_metrics.ts#L77-L79",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Metrics",
                  "namespace": "metrics",
                  "useDocsFrom": "cosineProximity"
                },
                "symbolName": "cosineProximity",
                "namespace": "metrics",
                "paramStr": "(yTrue, yPred)",
                "parameters": [
                  {
                    "name": "yTrue",
                    "documentation": "",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "yPred",
                    "documentation": "",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "",
                "fileName": "#88",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_metrics.ts#L88-L90",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Metrics",
                  "namespace": "metrics",
                  "useDocsFrom": "meanAbsoluteError"
                },
                "symbolName": "meanAbsoluteError",
                "namespace": "metrics",
                "paramStr": "(yTrue, yPred)",
                "parameters": [
                  {
                    "name": "yTrue",
                    "documentation": "",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "yPred",
                    "documentation": "",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "",
                "fileName": "#99",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_metrics.ts#L99-L101",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Metrics",
                  "namespace": "metrics",
                  "useDocsFrom": "meanAbsolutePercentageError"
                },
                "symbolName": "meanAbsolutePercentageError",
                "namespace": "metrics",
                "paramStr": "(yTrue, yPred)",
                "parameters": [
                  {
                    "name": "yTrue",
                    "documentation": "",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "yPred",
                    "documentation": "",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "",
                "fileName": "#110",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_metrics.ts#L110-L113",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Metrics",
                  "namespace": "metrics",
                  "useDocsFrom": "meanSquaredError"
                },
                "symbolName": "meanSquaredError",
                "namespace": "metrics",
                "paramStr": "(yTrue, yPred)",
                "parameters": [
                  {
                    "name": "yTrue",
                    "documentation": "",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "yPred",
                    "documentation": "",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "",
                "fileName": "#130",
                "githubUrl": "https://github.com/tensorflow/tfjs-layers/blob/v0.8.3/src/exports_metrics.ts#L130-L132",
                "isFunction": true
              }
            ]
          }
        ]
      }
    ]
  },
  "docLinkAliases": {}
}