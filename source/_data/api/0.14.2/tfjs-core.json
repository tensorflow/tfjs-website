{
  "docs": {
    "headings": [
      {
        "name": "Tensors",
        "description": "",
        "subheadings": [
          {
            "name": "Classes",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Classes"
                },
                "symbolName": "TensorBuffer",
                "documentation": "A mutable object, similar to `tf.Tensor`, that allows users to set values\nat locations before converting to an immutable `tf.Tensor`.\n\nSee `tf.buffer` for creating a tensor buffer.",
                "fileName": "#35",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L35-L139",
                "methods": [
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Creation"
                    },
                    "symbolName": "set",
                    "paramStr": "(value, ...locs)",
                    "parameters": [
                      {
                        "name": "value",
                        "documentation": "The value to set.",
                        "type": "SingleValueMap[D]",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "...locs",
                        "documentation": "The location indices.",
                        "type": "number[]",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "void",
                    "documentation": "Sets a value in the buffer at a given location.",
                    "fileName": "#70",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L70-L81",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Creation"
                    },
                    "symbolName": "get",
                    "paramStr": "(...locs)",
                    "parameters": [
                      {
                        "name": "...locs",
                        "documentation": "The location indices.",
                        "type": "number[]",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "SingleValueMap[D]",
                    "documentation": "Returns the value in the buffer at the provided location.",
                    "fileName": "#89",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L89-L98",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Creation"
                    },
                    "symbolName": "toTensor",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "Tensor",
                    "documentation": "Creates an immutable `tf.Tensor` object from the buffer.",
                    "fileName": "#136",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L136-L138",
                    "isFunction": true
                  }
                ],
                "isClass": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Classes"
                },
                "symbolName": "Tensor",
                "documentation": "A `tf.Tensor` object represents an immutable, multidimensional array of\nnumbers that has a shape and a data type.\n\nSee `tf.tensor` for details on how to create a `tf.Tensor`.",
                "fileName": "#387",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L387-L1311",
                "methods": [
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "flatten",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "Tensor1D",
                    "documentation": "Flatten a Tensor to a 1D array. ",
                    "fileName": "#439",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L439-L442",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "asScalar",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "Scalar",
                    "documentation": "Converts a size-1 `tf.Tensor` to a `tf.Scalar`. ",
                    "fileName": "#446",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L446-L450",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "as1D",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "Tensor1D",
                    "documentation": "Converts a `tf.Tensor` to a `tf.Tensor1D`. ",
                    "fileName": "#454",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L454-L457",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "as2D",
                    "paramStr": "(rows, columns)",
                    "parameters": [
                      {
                        "name": "rows",
                        "documentation": "Number of rows in `tf.Tensor2D`.",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "columns",
                        "documentation": "Number of columns in `tf.Tensor2D`.",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Tensor2D",
                    "documentation": "Converts a `tf.Tensor` to a `tf.Tensor2D`.",
                    "fileName": "#466",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L466-L469",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "as3D",
                    "paramStr": "(rows, columns, depth)",
                    "parameters": [
                      {
                        "name": "rows",
                        "documentation": "Number of rows in `tf.Tensor3D`.",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "columns",
                        "documentation": "Number of columns in `tf.Tensor3D`.",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "depth",
                        "documentation": "Depth of `tf.Tensor3D`.",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Tensor3D",
                    "documentation": "Converts a `tf.Tensor` to a `tf.Tensor3D`.",
                    "fileName": "#479",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L479-L482",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "as4D",
                    "paramStr": "(rows, columns, depth, depth2)",
                    "parameters": [
                      {
                        "name": "rows",
                        "documentation": "Number of rows in `tf.Tensor4D`.",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "columns",
                        "documentation": "Number of columns in `tf.Tensor4D`.",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "depth",
                        "documentation": "Depth of `tf.Tensor4D`.",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "depth2",
                        "documentation": "4th dimension of `tf.Tensor4D`.",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Tensor4D",
                    "documentation": "Converts a `tf.Tensor` to a `tf.Tensor4D`.",
                    "fileName": "#493",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L493-L496",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "as5D",
                    "paramStr": "(rows, columns, depth, depth2, depth3)",
                    "parameters": [
                      {
                        "name": "rows",
                        "documentation": "Number of rows in `tf.Tensor5D`.",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "columns",
                        "documentation": "Number of columns in `tf.Tensor5D`.",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "depth",
                        "documentation": "Depth of `tf.Tensor5D`.",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "depth2",
                        "documentation": "4th dimension of `tf.Tensor5D`.",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "depth3",
                        "documentation": "5th dimension of 'tf.Tensor5D'",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Tensor5D",
                    "documentation": "Converts a `tf.Tensor` to a `tf.Tensor5D`.",
                    "fileName": "#508",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L508-L513",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "asType",
                    "paramStr": "(dtype)",
                    "parameters": [
                      {
                        "name": "dtype",
                        "documentation": "Data-type to cast the tensor to.",
                        "type": "'float32'|'int32'|'bool'|'complex64'|'string'",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "this",
                    "documentation": "Casts a `tf.Tensor` to a specified dtype.",
                    "fileName": "#521",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L521-L524",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "buffer",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "TensorBuffer",
                    "documentation": "Returns a `tf.TensorBuffer` that holds the underlying data. ",
                    "fileName": "#557",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L557-L559",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "data",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "Promise",
                    "documentation": "Asynchronously downloads the values from the `tf.Tensor`. Returns a promise\nof `TypedArray` that resolves when the computation has finished.",
                    "fileName": "#566",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L566-L569",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "dataSync",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "DataTypeMap[NumericDataType]",
                    "documentation": "Synchronously downloads the values from the `tf.Tensor`. This blocks the UI\nthread until the values are ready, which can cause performance issues.",
                    "fileName": "#576",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L576-L579",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "dispose",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "void",
                    "documentation": "Disposes `tf.Tensor` from memory.",
                    "fileName": "#585",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L585-L591",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "toFloat",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "this",
                    "documentation": "Casts the array to type `float32` ",
                    "fileName": "#606",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L606-L608",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "toInt",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "this",
                    "documentation": "Casts the array to type `int32` ",
                    "fileName": "#612",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L612-L614",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "toBool",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "this",
                    "documentation": "Casts the array to type `bool` ",
                    "fileName": "#618",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L618-L620",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "print",
                    "paramStr": "(verbose?)",
                    "parameters": [
                      {
                        "name": "verbose",
                        "documentation": "Whether to print verbose information about the tensor,\nincluding dtype and size.",
                        "type": "boolean",
                        "optional": true,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "void",
                    "documentation": "Prints the `tf.Tensor`. See `tf.print` for details.",
                    "fileName": "#629",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L629-L631",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "reshape",
                    "paramStr": "(newShape)",
                    "parameters": [
                      {
                        "name": "newShape",
                        "documentation": "An array of integers defining the output tensor shape.",
                        "type": "number[]",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Tensor",
                    "documentation": "Reshapes the tensor into the provided shape.\nSee `tf.reshape` for more details.",
                    "fileName": "#640",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L640-L643",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "reshapeAs",
                    "paramStr": "(x)",
                    "parameters": [
                      {
                        "name": "x",
                        "documentation": "The tensor of required shape.",
                        "type": "Tensor",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Tensor",
                    "documentation": "Reshapes the tensor into the shape of the provided tensor.",
                    "fileName": "#651",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L651-L654",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "expandDims",
                    "paramStr": "(axis?)",
                    "parameters": [
                      {
                        "name": "axis",
                        "documentation": "The dimension index at which to insert shape of 1. Defaults to\n0 (the first dimension).",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Tensor",
                    "documentation": "Returns a `tf.Tensor` that has expanded rank, by inserting a dimension\ninto the tensor's shape. See `tf.expandDims` for details.",
                    "fileName": "#664",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L664-L666",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "cumsum",
                    "paramStr": "(axis?, exclusive?, reverse?)",
                    "parameters": [
                      {
                        "name": "axis",
                        "documentation": "The axis along which to sum. Optional. Defaults to 0.",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "exclusive",
                        "documentation": "Whether to perform exclusive cumulative sum. Defaults to\nfalse. If set to true then the sum of each tensor entry does not include\nits own value, but only the values previous to it along the specified\naxis.",
                        "type": "boolean",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "reverse",
                        "documentation": "Whether to sum in the opposite direction. Defaults to\nfalse.",
                        "type": "boolean",
                        "optional": true,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Tensor",
                    "documentation": "Returns the cumulative sum of the `tf.Tensor` along `axis`.",
                    "fileName": "#680",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L680-L682",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "squeeze",
                    "paramStr": "(axis?)",
                    "parameters": [
                      {
                        "name": "axis",
                        "documentation": "A list of numbers. If specified, only squeezes the\ndimensions listed. The dimension index starts at 0. It is an error to\nsqueeze a dimension that is not 1.",
                        "type": "number[]",
                        "optional": true,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Tensor",
                    "documentation": "Returns a `tf.Tensor` with dimensions of size 1 removed from the shape.\nSee `tf.squeeze` for more details.",
                    "fileName": "#693",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L693-L696",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "clone",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "Tensor",
                    "documentation": "Returns a copy of the tensor. See `tf.clone` for details. ",
                    "fileName": "#700",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L700-L703",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "toString",
                    "paramStr": "(verbose?)",
                    "parameters": [
                      {
                        "name": "verbose",
                        "documentation": "",
                        "type": "boolean",
                        "optional": true,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "string",
                    "documentation": "Returns a human-readable description of the tensor. Useful for logging. ",
                    "fileName": "#707",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L707-L710",
                    "isFunction": true
                  }
                ],
                "isClass": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Classes"
                },
                "symbolName": "Variable",
                "documentation": "A mutable `tf.Tensor`, useful for persisting state, e.g. for training.",
                "fileName": "#1350",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L1350-L1421",
                "methods": [
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "assign",
                    "paramStr": "(newValue)",
                    "parameters": [
                      {
                        "name": "newValue",
                        "documentation": "New tensor to be assigned to this variable.",
                        "type": "Tensor",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "void",
                    "documentation": "Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\nthe same shape and dtype as the old `tf.Tensor`.",
                    "fileName": "#1406",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L1406-L1420",
                    "isFunction": true
                  }
                ],
                "isClass": true,
                "inheritsFrom": "Tensor"
              }
            ]
          },
          {
            "name": "Creation",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "variable",
                "paramStr": "(initialValue, trainable?, name?, dtype?)",
                "parameters": [
                  {
                    "name": "initialValue",
                    "documentation": "Initial value for the tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "trainable",
                    "documentation": "If true, optimizers are allowed to update it.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "name",
                    "documentation": "Name of the variable. Defaults to a unique id.",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "If set, initialValue will be converted to the given type.",
                    "type": "'float32'|'int32'|'bool'|'complex64'|'string'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Variable",
                "documentation": "Creates a new variable with the provided initial value.\n```js\nconst x = tf.variable(tf.tensor([1, 2, 3]));\nx.assign(tf.tensor([4, 5, 6]));\n\nx.print();\n```",
                "fileName": "#1390",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/tensor.ts#L1390-L1397",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "complex",
                "paramStr": "(real, imag)",
                "parameters": [
                  {
                    "name": "real",
                    "documentation": "",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "imag",
                    "documentation": "",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Converts two real numbers to a complex number.\n\nGiven a tensor `real` representing the real part of a complex number, and a\ntensor `imag` representing the imaginary part of a complex number, this\noperation returns complex numbers elementwise of the form [r0, i0, r1, i1],\nwhere r represents the real part and i represents the imag part.\n\nThe input tensors real and imag must have the same shape.\n\n```js\nconst real = tf.tensor1d([2.25, 3.25]);\nconst imag = tf.tensor1d([4.75, 5.75]);\nconst complex = tf.complex(real, imag);\n\ncomplex.print();\n```",
                "fileName": "#43",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/complex_ops.ts#L43-L53",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "real",
                "paramStr": "(input)",
                "parameters": [
                  {
                    "name": "input",
                    "documentation": "",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the real part of a complex (or real) tensor.\n\nGiven a tensor input, this operation returns a tensor of type float that is\nthe real part of each element in input considered as a complex number.\n\nIf the input is real, it simply makes a clone.\n\n```js\nconst x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\ntf.real(x).print();\n```",
                "fileName": "#69",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/complex_ops.ts#L69-L73",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "imag",
                "paramStr": "(input)",
                "parameters": [
                  {
                    "name": "input",
                    "documentation": "",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the imaginary part of a complex (or real) tensor.\n\nGiven a tensor input, this operation returns a tensor of type float that is\nthe imaginary part of each element in input considered as a complex number.\nIf input is real, a tensor of all zeros is returned.\n\n```js\nconst x = tf.complex([-2.25, 3.25], [4.75, 5.75]);\ntf.imag(x).print();\n```",
                "fileName": "#88",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/complex_ops.ts#L88-L92",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "tensor",
                "paramStr": "(values, shape?, dtype?)",
                "parameters": [
                  {
                    "name": "values",
                    "documentation": "The values of the tensor. Can be nested array of numbers,\nor a flat array, or a `TypedArray`.",
                    "type": "TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "shape",
                    "documentation": "The shape of the tensor. Optional. If not provided,\nit is inferred from `values`.",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type.",
                    "type": "'float32'|'int32'|'bool'|'complex64'|'string'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Creates a `tf.Tensor` with the provided values, shape and dtype.\n\n```js\n// Pass an array of values to create a vector.\ntf.tensor([1, 2, 3, 4]).print();\n```\n\n```js\n// Pass a nested array of values to make a matrix or a higher\n// dimensional tensor.\ntf.tensor([[1, 2], [3, 4]]).print();\n```\n\n```js\n// Pass a flat array and specify a shape yourself.\ntf.tensor([1, 2, 3, 4], [2, 2]).print();\n```",
                "fileName": "#54",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/tensor_ops.ts#L54-L102",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "scalar",
                "paramStr": "(value, dtype?)",
                "parameters": [
                  {
                    "name": "value",
                    "documentation": "The value of the scalar.",
                    "type": "number|boolean|string",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type.",
                    "type": "'float32'|'int32'|'bool'|'complex64'|'string'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Scalar",
                "documentation": "Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.\n\nThe same functionality can be achieved with `tf.tensor`, but in general\nwe recommend using `tf.scalar` as it makes the code more readable.\n\n```js\ntf.scalar(3.14).print();\n```",
                "fileName": "#118",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/tensor_ops.ts#L118-L125",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "tensor1d",
                "paramStr": "(values, dtype?)",
                "parameters": [
                  {
                    "name": "values",
                    "documentation": "The values of the tensor. Can be array of numbers,\nor a `TypedArray`.",
                    "type": "TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type.",
                    "type": "'float32'|'int32'|'bool'|'complex64'|'string'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor1D",
                "documentation": "Creates rank-1 `tf.Tensor` with the provided values, shape and dtype.\n\nThe same functionality can be achieved with `tf.tensor`, but in general\nwe recommend using `tf.tensor1d` as it makes the code more readable.\n\n```js\ntf.tensor1d([1, 2, 3]).print();\n```",
                "fileName": "#142",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/tensor_ops.ts#L142-L149",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "tensor2d",
                "paramStr": "(values, shape?, dtype?)",
                "parameters": [
                  {
                    "name": "values",
                    "documentation": "The values of the tensor. Can be nested array of numbers,\nor a flat array, or a `TypedArray`.",
                    "type": "TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "shape",
                    "documentation": "The shape of the tensor. If not provided, it is inferred from\n`values`.",
                    "type": "[number, number]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type.",
                    "type": "'float32'|'int32'|'bool'|'complex64'|'string'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor2D",
                "documentation": "Creates rank-2 `tf.Tensor` with the provided values, shape and dtype.\n\nThe same functionality can be achieved with `tf.tensor`, but in general\nwe recommend using `tf.tensor2d` as it makes the code more readable.\n\n  ```js\n// Pass a nested array.\ntf.tensor2d([[1, 2], [3, 4]]).print();\n```\n```js\n// Pass a flat array and specify a shape.\ntf.tensor2d([1, 2, 3, 4], [2, 2]).print();\n```",
                "fileName": "#173",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/tensor_ops.ts#L173-L192",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "tensor3d",
                "paramStr": "(values, shape?, dtype?)",
                "parameters": [
                  {
                    "name": "values",
                    "documentation": "The values of the tensor. Can be nested array of numbers,\nor a flat array, or a `TypedArray`.",
                    "type": "TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "shape",
                    "documentation": "The shape of the tensor. If not provided,  it is inferred from\n`values`.",
                    "type": "[number, number, number]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type.",
                    "type": "'float32'|'int32'|'bool'|'complex64'|'string'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D",
                "documentation": "Creates rank-3 `tf.Tensor` with the provided values, shape and dtype.\n\nThe same functionality can be achieved with `tf.tensor`, but in general\nwe recommend using `tf.tensor3d` as it makes the code more readable.\n\n  ```js\n// Pass a nested array.\ntf.tensor3d([[[1], [2]], [[3], [4]]]).print();\n```\n```js\n// Pass a flat array and specify a shape.\ntf.tensor3d([1, 2, 3, 4], [2, 2, 1]).print();\n```",
                "fileName": "#216",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/tensor_ops.ts#L216-L235",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "tensor4d",
                "paramStr": "(values, shape?, dtype?)",
                "parameters": [
                  {
                    "name": "values",
                    "documentation": "The values of the tensor. Can be nested array of numbers,\nor a flat array, or a `TypedArray`.",
                    "type": "TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "shape",
                    "documentation": "The shape of the tensor. Optional. If not provided,\nit is inferred from `values`.",
                    "type": "[number, number, number, number]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type.",
                    "type": "'float32'|'int32'|'bool'|'complex64'|'string'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor4D",
                "documentation": "Creates rank-4 `tf.Tensor` with the provided values, shape and dtype.\n\nThe same functionality can be achieved with `tf.tensor`, but in general\nwe recommend using `tf.tensor4d` as it makes the code more readable.\n\n  ```js\n// Pass a nested array.\ntf.tensor4d([[[[1], [2]], [[3], [4]]]]).print();\n```\n```js\n// Pass a flat array and specify a shape.\ntf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]).print();\n```",
                "fileName": "#259",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/tensor_ops.ts#L259-L278",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "tensor5d",
                "paramStr": "(values, shape?, dtype?)",
                "parameters": [
                  {
                    "name": "values",
                    "documentation": "The values of the tensor. Can be nested array of numbers,\nor a flat array, or a `TypedArray`.",
                    "type": "TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "shape",
                    "documentation": "The shape of the tensor. Optional. If not provided,\nit is inferred from `values`.",
                    "type": "[number, number, number, number, number]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type.",
                    "type": "'float32'|'int32'|'bool'|'complex64'|'string'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor5D",
                "documentation": "Creates rank-5 `tf.Tensor` with the provided values, shape and dtype.\n\nThe same functionality can be achieved with `tf.tensor`, but in general\nwe recommend using `tf.tensor5d` as it makes the code more readable.\n\n  ```js\n// Pass a nested array.\ntf.tensor5d([[[[[1], [2]], [[3], [4]]]]]).print();\n```\n```js\n// Pass a flat array and specify a shape.\ntf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]).print();\n```",
                "fileName": "#302",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/tensor_ops.ts#L302-L322",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "tensor6d",
                "paramStr": "(values, shape?, dtype?)",
                "parameters": [
                  {
                    "name": "values",
                    "documentation": "The values of the tensor. Can be nested array of numbers,\nor a flat array, or a `TypedArray`.",
                    "type": "TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "shape",
                    "documentation": "The shape of the tensor. Optional. If not provided,\nit is inferred from `values`.",
                    "type": "[number, number, number, number, number, number]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type.",
                    "type": "'float32'|'int32'|'bool'|'complex64'|'string'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor6D",
                "documentation": "Creates rank-6 `tf.Tensor` with the provided values, shape and dtype.\n\nThe same functionality can be achieved with `tf.tensor`, but in general\nwe recommend using `tf.tensor6d` as it makes the code more readable.\n\n  ```js\n// Pass a nested array.\ntf.tensor6d([[[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]]).print();\n```\n```js\n// Pass a flat array and specify a shape.\ntf.tensor6d([1, 2, 3, 4, 5, 6, 7, 8], [1, 1, 2, 2, 2, 1]).print();\n```",
                "fileName": "#346",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/tensor_ops.ts#L346-L368",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "ones",
                "paramStr": "(shape, dtype?)",
                "parameters": [
                  {
                    "name": "shape",
                    "documentation": "An array of integers defining the output tensor shape.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The type of an element in the resulting tensor. Defaults to\n'float'.",
                    "type": "'float32'|'int32'|'bool'|'complex64'|'string'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Creates a `tf.Tensor` with all elements set to 1.\n\n```js\ntf.ones([2, 2]).print();\n```",
                "fileName": "#382",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/tensor_ops.ts#L382-L391",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "zeros",
                "paramStr": "(shape, dtype?)",
                "parameters": [
                  {
                    "name": "shape",
                    "documentation": "An array of integers defining the output tensor shape.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The type of an element in the resulting tensor. Can\nbe 'float32', 'int32' or 'bool'. Defaults to 'float'.",
                    "type": "'float32'|'int32'|'bool'|'complex64'|'string'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Creates a `tf.Tensor` with all elements set to 0.\n\n```js\ntf.zeros([2, 2]).print();\n```",
                "fileName": "#405",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/tensor_ops.ts#L405-L414",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "fill",
                "paramStr": "(shape, value, dtype?)",
                "parameters": [
                  {
                    "name": "shape",
                    "documentation": "An array of integers defining the output tensor shape.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "value",
                    "documentation": "The scalar value to fill the tensor with.",
                    "type": "number|string",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The type of an element in the resulting tensor. Defaults to\n'float'.",
                    "type": "'float32'|'int32'|'bool'|'complex64'|'string'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Creates a `tf.Tensor` filled with a scalar value.\n\n```js\ntf.fill([2, 2], 4).print();\n```",
                "fileName": "#429",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/tensor_ops.ts#L429-L435",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "onesLike",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "A tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Creates a `tf.Tensor` with all elements set to 1 with the same shape as the\ngiven tensor.\n\n```js\nconst x = tf.tensor([1, 2]);\ntf.onesLike(x).print();\n```",
                "fileName": "#448",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/tensor_ops.ts#L448-L451",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "zerosLike",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The tensor of required shape.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Creates a `tf.Tensor` with all elements set to 0 with the same shape as the\ngiven tensor.\n\n```js\nconst x = tf.tensor([1, 2]);\ntf.zerosLike(x).print();\n```",
                "fileName": "#465",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/tensor_ops.ts#L465-L468",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "linspace",
                "paramStr": "(start, stop, num)",
                "parameters": [
                  {
                    "name": "start",
                    "documentation": "The start value of the sequence.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "stop",
                    "documentation": "The end value of the sequence.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "num",
                    "documentation": "The number of values to generate.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor1D",
                "documentation": "Return an evenly spaced sequence of numbers over the given interval.\n\n```js\ntf.linspace(0, 9, 10).print();\n```",
                "fileName": "#481",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/tensor_ops.ts#L481-L495",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "range",
                "paramStr": "(start, stop, step?, dtype?)",
                "parameters": [
                  {
                    "name": "start",
                    "documentation": "An integer start value",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "stop",
                    "documentation": "An integer stop value",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "step",
                    "documentation": "An integer increment (will default to 1 or -1)",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type of the output tensor. Defaults to 'float32'.",
                    "type": "'float32'|'int32'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor1D",
                "documentation": "Creates a new `tf.Tensor1D` filled with the numbers in the range provided.\n\nThe tensor is a is half-open interval meaning it includes start, but\nexcludes stop. Decrementing ranges and negative step values are also\nsupported.\n\n```js\ntf.range(0, 9, 2).print();\n```",
                "fileName": "#514",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/tensor_ops.ts#L514-L545",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "clone",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The tensor to clone.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Creates a new tensor with the same values and shape as the specified\ntensor.\n\n```js\nconst x = tf.tensor([1, 2]);\n\nx.clone().print();\n```",
                "fileName": "#42",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L42-L52",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "eye",
                "paramStr": "(numRows, numColumns?, batchShape?, dtype?)",
                "parameters": [
                  {
                    "name": "numRows",
                    "documentation": "Number of rows.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "numColumns",
                    "documentation": "Number of columns. Defaults to `numRows`.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "batchShape",
                    "documentation": "If provided, will add the batch shape to the beginning\nof the shape of the returned `tf.Tensor` by repeating the identity\nmatrix.",
                    "type": "[\n          number\n        ]|[number,\n           number]|[number, number, number]|[number, number, number, number]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "Data type.",
                    "type": "'float32'|'int32'|'bool'|'complex64'|'string'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor2D",
                "documentation": "Create an identity matrix.",
                "fileName": "#67",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L67-L104",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "truncatedNormal",
                "paramStr": "(shape, mean?, stdDev?, dtype?, seed?)",
                "parameters": [
                  {
                    "name": "shape",
                    "documentation": "An array of integers defining the output tensor shape.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "mean",
                    "documentation": "The mean of the normal distribution.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "stdDev",
                    "documentation": "The standard deviation of the normal distribution.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type of the output tensor.",
                    "type": "'float32'|'int32'",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "seed",
                    "documentation": "The seed for the random number generator.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Creates a `tf.Tensor` with values sampled from a truncated normal\ndistribution.\n\n```js\ntf.truncatedNormal([2, 2]).print();\n```\n\nThe generated values follow a normal distribution with specified mean and\nstandard deviation, except that values whose magnitude is more than 2\nstandard deviations from the mean are dropped and re-picked.",
                "fileName": "#154",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L154-L167",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "oneHot",
                "paramStr": "(indices, depth, onValue?, offValue?)",
                "parameters": [
                  {
                    "name": "indices",
                    "documentation": "`tf.Tensor` of indices with dtype `int32`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "depth",
                    "documentation": "The depth of the one hot dimension.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "onValue",
                    "documentation": "A number used to fill in the output when the index matches\nthe location.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "offValue",
                    "documentation": "A number used to fill in the output when the index does\nnot match the location.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Creates a one-hot `tf.Tensor`. The locations represented by `indices` take\nvalue `onValue` (defaults to 1), while all other locations take value\n`offValue` (defaults to 0). If `indices` is rank `R`, the output has rank\n`R+1` with the last axis of size `depth`.\n\n```js\ntf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();\n```",
                "fileName": "#289",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L289-L306",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "fromPixels",
                "paramStr": "(pixels, numChannels?)",
                "parameters": [
                  {
                    "name": "pixels",
                    "documentation": "The input image to construct the tensor from. The\nsupported image types are all 4-channel.",
                    "type": "ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "numChannels",
                    "documentation": "The number of channels of the output tensor. A\nnumChannels value less than 4 allows you to ignore channels. Defaults to\n3 (ignores alpha channel of input image).",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D",
                "documentation": "Creates a `tf.Tensor` from an image.\n\n```js\nconst image = new ImageData(1, 1);\nimage.data[0] = 100;\nimage.data[1] = 150;\nimage.data[2] = 200;\nimage.data[3] = 255;\n\ntf.fromPixels(image).print();\n```",
                "fileName": "#328",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L328-L336",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "buffer",
                "paramStr": "(shape, dtype?, values?)",
                "parameters": [
                  {
                    "name": "shape",
                    "documentation": "An array of integers defining the output tensor shape.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The dtype of the buffer. Defaults to 'float32'.",
                    "type": "'float32'",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "values",
                    "documentation": "The values of the buffer as `TypedArray`. Defaults to\nzeros.",
                    "type": "DataTypeMap['float32']",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "TensorBuffer",
                "documentation": "Creates an empty `tf.TensorBuffer` with the specified `shape` and `dtype`.\n\nThe values are stored in CPU as `TypedArray`. Fill the buffer using\n`buffer.set()`, or by modifying directly `buffer.values`.\n\nWhen done, call `buffer.toTensor()` to get an immutable `tf.Tensor` with\nthose values.\n\n```js\n// Create a buffer and set values at particular indices.\nconst buffer = tf.buffer([2, 2]);\nbuffer.set(3, 0, 0);\nbuffer.set(5, 1, 0);\n\n// Convert the buffer back to a tensor.\nbuffer.toTensor().print();\n```",
                "fileName": "#1171",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L1171-L1176",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "print",
                "paramStr": "(x, verbose?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The tensor to be printed.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "verbose",
                    "documentation": "Whether to print verbose information about the ` Tensor`,\nincluding dtype and size.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "void",
                "documentation": "Prints information about the `tf.Tensor` including its data.\n\n```js\nconst verbose = true;\ntf.tensor2d([1, 2, 3, 4], [2, 2]).print(verbose);\n```",
                "fileName": "#1190",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L1190-L1192",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Slicing and Joining",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Slicing and Joining"
                },
                "symbolName": "concat",
                "paramStr": "(tensors, axis?)",
                "parameters": [
                  {
                    "name": "tensors",
                    "documentation": "A list of tensors to concatenate.",
                    "type": "Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The axis to concate along. Defaults to 0 (the first dim).",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Concatenates a list of`tf.Tensor`s along a given axis.\n\nThe tensors ranks and types must match, and their sizes must match in all\ndimensions except `axis`.\n\nAlso available are stricter rank-specific methods that assert that\n`tensors` are of the given rank:\n   - `tf.concat1d`\n   - `tf.concat2d`\n   - `tf.concat3d`\n   - `tf.concat4d`\n\nExcept `tf.concat1d` (which does not have axis param), all methods have\nsame signature as this method.\n\n```js\nconst a = tf.tensor1d([1, 2]);\nconst b = tf.tensor1d([3, 4]);\na.concat(b).print();  // or a.concat(b)\n```\n\n```js\nconst a = tf.tensor1d([1, 2]);\nconst b = tf.tensor1d([3, 4]);\nconst c = tf.tensor1d([5, 6]);\ntf.concat([a, b, c]).print();\n```\n\n```js\nconst a = tf.tensor2d([[1, 2], [10, 20]]);\nconst b = tf.tensor2d([[3, 4], [30, 40]]);\nconst axis = 1;\ntf.concat([a, b], axis).print();\n```",
                "fileName": "#161",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/concat_split.ts#L161-L185",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Slicing and Joining"
                },
                "symbolName": "split",
                "paramStr": "(x, numOrSizeSplits, axis?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor to split.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "numOrSizeSplits",
                    "documentation": "Either an integer indicating the number of\nsplits along the axis or an array of integers containing the sizes of\neach output tensor along the axis. If a number then it must evenly divide\n`x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.",
                    "type": "number[]|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension along which to split. Defaults to 0 (the first\ndim).",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor[]",
                "documentation": "Splits a`tf.Tensor` into sub tensors.\n\nIf `numOrSizeSplits` is a number, splits `x` along dimension `axis`\ninto `numOrSizeSplits` smaller tensors.\nRequires that `numOrSizeSplits` evenly divides `x.shape[axis]`.\n\nIf `numOrSizeSplits` is a number array, splits `x` into\n`(numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the\nsame size as `x` except along dimension `axis` where the size is\n`numOrSizeSplits[i]`.\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);\nconst [a, b] = tf.split(x, 2, 1);\na.print();\nb.print();\n\nconst [c, d, e] = tf.split(x, [1, 2, 1], 1);\nc.print();\nd.print();\ne.print();\n```",
                "fileName": "#220",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/concat_split.ts#L220-L241",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Slicing and Joining"
                },
                "symbolName": "tile",
                "paramStr": "(x, reps)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The tensor to tile.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "reps",
                    "documentation": "Determines the number of replications per dimension.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Construct a tensor by repeating it the number of times given by reps.\n\nThis operation creates a new tensor by replicating `input` `reps`\ntimes. The output tensor's i'th dimension has `input.shape[i] *\nreps[i]` elements, and the values of `input` are replicated\n`reps[i]` times along the i'th dimension. For example, tiling\n`[a, b, c, d]` by `[2]` produces `[a, b, c, d, a, b, c, d]`.\n\n```js\nconst a = tf.tensor1d([1, 2]);\n\na.tile([2]).print();    // or a.tile([2])\n```\n\n```js\nconst a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\na.tile([1, 2]).print();  // or a.tile([1, 2])\n```",
                "fileName": "#548",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L548-L607",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Slicing and Joining"
                },
                "symbolName": "stack",
                "paramStr": "(tensors, axis?)",
                "parameters": [
                  {
                    "name": "tensors",
                    "documentation": "A list of tensor objects with the same shape and dtype.",
                    "type": "Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The axis to stack along. Defaults to 0 (the first dim).",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.\n\n```js\nconst a = tf.tensor1d([1, 2]);\nconst b = tf.tensor1d([3, 4]);\nconst c = tf.tensor1d([5, 6]);\ntf.stack([a, b, c]).print();\n```",
                "fileName": "#721",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L721-L748",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Slicing and Joining"
                },
                "symbolName": "unstack",
                "paramStr": "(x, axis?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "A tensor object.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The axis to unstack along. Defaults to 0 (the first dim).",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor[]",
                "documentation": "Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.\n\n```js\nconst a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\ntf.unstack(a).forEach(tensor => tensor.print());\n```",
                "fileName": "#925",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L925-L932",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Slicing and Joining"
                },
                "symbolName": "reverse",
                "paramStr": "(x, axis?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor to be reversed.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The set of dimensions to reverse. Must be in the\nrange [-rank(x), rank(x)). Defaults to all axes.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Reverses a `tf.Tensor` along a specified axis.\n\nAlso available are stricter rank-specific methods that assert that `x` is\nof the given rank:\n   - `tf.reverse1d`\n   - `tf.reverse2d`\n   - `tf.reverse3d`\n   - `tf.reverse4d`\n\nExcept `tf.reverse1d` (which does not have axis param), all methods have\nsame signature as this method.\n\n```js\nconst x = tf.tensor1d([1, 2, 3, 4]);\n\nx.reverse().print();\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\nconst axis = 1;\nx.reverse(axis).print();\n```",
                "fileName": "#109",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/reverse.ts#L109-L123",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Slicing and Joining"
                },
                "symbolName": "slice",
                "paramStr": "(x, begin, size?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input `tf.Tensor` to slice from.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "begin",
                    "documentation": "The coordinates to start the slice from. The length can be\nless than the rank of x - the rest of the axes will have implicit 0 as\nstart. Can also be a single number, in which case it specifies the\nfirst axis.",
                    "type": "number|number[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "size",
                    "documentation": "The size of the slice. The length can be less than the rank of\nx - the rest of the axes will have implicit -1. A value of -1 requests\nthe rest of the dimensions in the axis. Can also be a single number,\nin which case it specifies the size of the first axis.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Extracts a slice from a `tf.Tensor` starting at coordinates `begin`\nand is of size `size`.\n\nAlso available are stricter rank-specific methods with the same signature\nas this method that assert that `x` is of the given rank:\n   - `tf.slice1d`\n   - `tf.slice2d`\n   - `tf.slice3d`\n   - `tf.slice4d`\n\n```js\nconst x = tf.tensor1d([1, 2, 3, 4]);\n\nx.slice([1], [2]).print();\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\nx.slice([1, 0], [1, 2]).print();\n```",
                "fileName": "#114",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/slice.ts#L114-L165",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Slicing and Joining"
                },
                "symbolName": "gather",
                "paramStr": "(x, indices, axis?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor whose slices to be gathered.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "indices",
                    "documentation": "The indices of the values to extract.",
                    "type": "Tensor1D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The axis over which to select values. Defaults to 0.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Gather slices from tensor `x`'s axis `axis` according to `indices`.\n\n```js\nconst x = tf.tensor1d([1, 2, 3, 4]);\nconst indices = tf.tensor1d([1, 3, 3], 'int32');\n\nx.gather(indices).print();\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\nconst indices = tf.tensor1d([1, 1, 0], 'int32');\n\nx.gather(indices).print();\n```",
                "fileName": "#88",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/segment_ops.ts#L88-L132",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Random",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Random"
                },
                "symbolName": "randomNormal",
                "paramStr": "(shape, mean?, stdDev?, dtype?, seed?)",
                "parameters": [
                  {
                    "name": "shape",
                    "documentation": "An array of integers defining the output tensor shape.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "mean",
                    "documentation": "The mean of the normal distribution.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "stdDev",
                    "documentation": "The standard deviation of the normal distribution.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type of the output.",
                    "type": "'float32'|'int32'",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "seed",
                    "documentation": "The seed for the random number generator.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Creates a `tf.Tensor` with values sampled from a normal distribution.\n\n```js\ntf.randomNormal([2, 2]).print();\n```",
                "fileName": "#120",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L120-L133",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Random"
                },
                "symbolName": "randomUniform",
                "paramStr": "(shape, minval?, maxval?, dtype?)",
                "parameters": [
                  {
                    "name": "shape",
                    "documentation": "An array of integers defining the output tensor shape.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "minval",
                    "documentation": "The lower bound on the range of random values to generate.\nDefaults to 0.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "maxval",
                    "documentation": "The upper bound on the range of random values to generate.\nDefaults to 1.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type of the output tensor. Defaults to 'float32'.",
                    "type": "'float32'|'int32'|'bool'|'complex64'|'string'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Creates a `tf.Tensor` with values sampled from a uniform distribution.\n\nThe generated values follow a uniform distribution in the range [minval,\nmaxval). The lower bound minval is included in the range, while the upper\nbound maxval is excluded.\n\n```js\ntf.randomUniform([2, 2]).print();\n```",
                "fileName": "#188",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L188-L196",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Random"
                },
                "symbolName": "multinomial",
                "paramStr": "(logits, numSamples, seed?, normalized?)",
                "parameters": [
                  {
                    "name": "logits",
                    "documentation": "1D array with unnormalized log-probabilities, or\n2D array of shape `[batchSize, numOutcomes]`. See the `normalized`\nparameter.",
                    "type": "Tensor1D|Tensor2D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "numSamples",
                    "documentation": "Number of samples to draw for each row slice.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "seed",
                    "documentation": "The seed number.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "normalized",
                    "documentation": "Whether the provided `logits` are normalized true\nprobabilities (sum to 1). Defaults to false.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor1D|Tensor2D",
                "documentation": "Creates a `tf.Tensor` with values drawn from a multinomial distribution.\n\n```js\nconst probs = tf.tensor([.75, .25]);\ntf.multinomial(probs, 3).print();\n```",
                "fileName": "#248",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L248-L269",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Transformations",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Transformations"
                },
                "symbolName": "reshape",
                "paramStr": "(x, shape)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor to be reshaped.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "shape",
                    "documentation": "An array of integers defining the output tensor shape.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Reshapes a `tf.Tensor` to a given shape.\n\nGiven an input tensor, returns a new tensor with the same values as the\ninput tensor with shape `shape`.\n\nIf one component of shape is the special value -1, the size of that\ndimension is computed so that the total size remains constant. In\nparticular, a shape of [-1] flattens into 1-D. At most one component of\nshape can be -1.\n\nIf shape is 1-D or higher, then the operation returns a tensor with shape\nshape filled with the values of tensor. In this case, the number of\nelements implied by shape must be the same as the number of elements in\ntensor.\n\n```js\nconst x = tf.tensor1d([1, 2, 3, 4]);\nx.reshape([2, 2]).print();\n```",
                "fileName": "#469",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L469-L482",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Transformations"
                },
                "symbolName": "squeeze",
                "paramStr": "(x, axis?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor to be squeezed.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "An optional list of numbers. If specified, only\nsqueezes the dimensions listed. The dimension index starts at 0. It\nis an error to squeeze a dimension that is not 1.",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Removes dimensions of size 1 from the shape of a `tf.Tensor`.\n\n```js\nconst x = tf.tensor([1, 2, 3, 4], [1, 1, 4]);\nx.squeeze().print();\n```",
                "fileName": "#498",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L498-L501",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Transformations"
                },
                "symbolName": "cast",
                "paramStr": "(x, dtype)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor to be casted.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The dtype to cast the input tensor to.",
                    "type": "'float32'|'int32'|'bool'|'complex64'|'string'",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Casts a `tf.Tensor` to a new dtype.\n\n```js\nconst x = tf.tensor1d([1.5, 2.5, 3]);\ntf.cast(x, 'int32').print();\n```",
                "fileName": "#514",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L514-L522",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Transformations"
                },
                "symbolName": "pad",
                "paramStr": "(x, paddings, constantValue?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The tensor to pad.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "paddings",
                    "documentation": "An array of length `R` (the rank of the tensor), where\neach element is a length-2 tuple of ints `[padBefore, padAfter]`,\nspecifying how much to pad along each dimension of the tensor.",
                    "type": "Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "constantValue",
                    "documentation": "The pad value to use. Defaults to 0.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Pads a `tf.Tensor` with a given value and paddings.\n\nThis operation currently only implements the `CONSTANT` mode.\n\nAlso available are stricter rank-specific methods with the same signature\nas this method that assert that `paddings` is of given length.\n   - `tf.pad1d`\n   - `tf.pad2d`\n   - `tf.pad3d`\n   - `tf.pad4d`\n\n```js\nconst x = tf.tensor1d([1, 2, 3, 4]);\nx.pad([[1, 2]]).print();\n```",
                "fileName": "#689",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L689-L705",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Transformations"
                },
                "symbolName": "batchToSpaceND",
                "paramStr": "(x, blockShape, crops)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +\nremainingShape`, where spatialShape has `M` dimensions.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "blockShape",
                    "documentation": "A 1-D array. Must have shape `[M]`, all values must\nbe >= 1.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "crops",
                    "documentation": "A 2-D array.  Must have shape `[M, 2]`, all values must be >= 0.\n`crops[i] = [cropStart, cropEnd]` specifies the amount to crop from input\ndimension `i + 1`, which corresponds to spatial dimension `i`. It is required\nthat `cropStart[i] + cropEnd[i] <= blockShape[i] * inputShape[i + 1]`\n\nThis operation is equivalent to the following steps:\n\n1. Reshape `x` to `reshaped` of shape: `[blockShape[0], ...,\nblockShape[M-1], batch / prod(blockShape), x.shape[1], ...,\nx.shape[N-1]]`\n\n2. Permute dimensions of `reshaped`to produce `permuted` of shape `[batch /\nprod(blockShape),x.shape[1], blockShape[0], ..., x.shape[M],\nblockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`\n\n3. Reshape `permuted` to produce `reshapedPermuted` of shape `[batch /\nprod(blockShape),x.shape[1] * blockShape[0], ..., x.shape[M] *\nblockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`\n\n4. Crop the start and end of dimensions `[1, ..., M]` of `reshapedPermuted`\naccording to `crops` to produce the output of shape: `[batch /\nprod(blockShape),x.shape[1] * blockShape[0] - crops[0,0] - crops[0,1],\n..., x.shape[M] * blockShape[M-1] - crops[M-1,0] -\ncrops[M-1,1],x.shape[M+1], ..., x.shape[N-1]]`",
                    "type": "number[][]",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "This operation reshapes the \"batch\" dimension 0 into `M + 1` dimensions of\nshape `blockShape + [batch]`, interleaves these blocks back into the grid\ndefined by the spatial dimensions `[1, ..., M]`, to obtain a result with\nthe same rank as the input. The spatial dimensions of this intermediate\nresult are then optionally cropped according to `crops` to produce the\noutput. This is the reverse of `tf.spaceToBatchND`. See below for a precise\ndescription.\n\n```js\nconst x = tf.tensor4d([1, 2, 3, 4], [4, 1, 1, 1]);\nconst blockShape = [2, 2];\nconst crops = [[0, 0], [0, 0]];\n\nx.batchToSpaceND(blockShape, crops).print();\n```",
                "fileName": "#797",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L797-L825",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Transformations"
                },
                "symbolName": "spaceToBatchND",
                "paramStr": "(x, blockShape, paddings)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +\nremainingShape`, where spatialShape has `M` dimensions.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "blockShape",
                    "documentation": "A 1-D array. Must have shape `[M]`, all values must\nbe >= 1.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "paddings",
                    "documentation": "A 2-D array. Must have shape `[M, 2]`, all values must be >=\n0. `paddings[i] = [padStart, padEnd]` specifies the amount to zero-pad\nfrom input dimension `i + 1`, which corresponds to spatial dimension `i`. It\nis required that\n`(inputShape[i + 1] + padStart + padEnd) % blockShape[i] === 0`\n\nThis operation is equivalent to the following steps:\n\n1. Zero-pad the start and end of dimensions `[1, ..., M]` of the input\naccording to `paddings` to produce `padded` of shape paddedShape.\n\n2. Reshape `padded` to `reshapedPadded` of shape:\n`[batch] + [paddedShape[1] / blockShape[0], blockShape[0], ...,\npaddedShape[M] / blockShape[M-1], blockShape[M-1]] + remainingShape`\n\n3. Permute dimensions of `reshapedPadded` to produce `permutedReshapedPadded`\nof shape: `blockShape + [batch] + [paddedShape[1] / blockShape[0], ...,\npaddedShape[M] / blockShape[M-1]] + remainingShape`\n\n4. Reshape `permutedReshapedPadded` to flatten `blockShape` into the\nbatch dimension, producing an output tensor of shape:\n`[batch * prod(blockShape)] + [paddedShape[1] / blockShape[0], ...,\npaddedShape[M] / blockShape[M-1]] + remainingShape`",
                    "type": "number[][]",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "This operation divides \"spatial\" dimensions `[1, ..., M]` of the input into\na grid of blocks of shape `blockShape`, and interleaves these blocks with\nthe \"batch\" dimension (0) such that in the output, the spatial\ndimensions `[1, ..., M]` correspond to the position within the grid,\nand the batch dimension combines both the position within a spatial block\nand the original batch position. Prior to division into blocks,\nthe spatial dimensions of the input are optionally zero padded\naccording to `paddings`. See below for a precise description.\n\n```js\nconst x = tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]);\nconst blockShape = [2, 2];\nconst paddings = [[0, 0], [0, 0]];\n\nx.spaceToBatchND(blockShape, paddings).print();\n```",
                "fileName": "#874",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L874-L910",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Transformations"
                },
                "symbolName": "expandDims",
                "paramStr": "(x, axis?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor whose dimensions to be expanded.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension index at which to insert shape of `1`. Defaults\nto 0 (the first dimension).",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns a `tf.Tensor` that has expanded rank, by inserting a dimension\ninto the tensor's shape.\n\n```js\nconst x = tf.tensor1d([1, 2, 3, 4]);\nconst axis = 1;\nx.expandDims(axis).print();\n```",
                "fileName": "#997",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L997-L1012",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Transformations"
                },
                "symbolName": "depthToSpace",
                "paramStr": "(x, blockSize, dataFormat?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor of rank 4",
                    "type": "Tensor4D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "blockSize",
                    "documentation": "",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dataFormat",
                    "documentation": "An optional string from: \"NHWC\", \"NCHW\". Defaults to \"NHWC\"",
                    "type": "'NHWC'|'NCHW'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor4D",
                "documentation": "Rearranges data from depth into blocks of spatial data. More specifically,\nthis op outputs a copy of the input tensor where values from the `depth`\ndimension are moved in spatial blocks to the `height` and `width` dimensions.\nThe attr `blockSize` indicates the input block size and how the data is\nmoved.\n\n  - Chunks of data of size `blockSize * blockSize` from depth are rearranged\ninto non-overlapping blocks of size `blockSize x blockSize`\n\n  - The width the output tensor is `inputWidth * blockSize`, whereas the\nheight is `inputHeight * blockSize`\n\n  - The Y, X coordinates within each block of the output image are determined\nby the high order component of the input channel index\n\n  - The depth of the input tensor must be divisible by `blockSize *\nblockSize`\n\nThe `dataFormat` attr specifies the layout of the input and output tensors\nwith the following options: \"NHWC\": [ `batch, height, width, channels` ]\n\"NCHW\": [ `batch, channels, height, width` ]\n\n```js\nconst x = tf.tensor4d([1, 2, 3, 4], [1, 1, 1, 4]);\nconst blockSize = 2;\nconst dataFormat = \"NHWC\";\n\ntf.depthToSpace(x, blockSize, dataFormat).print();\n```",
                "fileName": "#1050",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L1050-L1079",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Transformations"
                },
                "symbolName": "setdiff1dAsync",
                "paramStr": "(x, y)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "1-D Tensor. Values to keep.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "y",
                    "documentation": "1-D Tensor. Must have the same type as x. Values to exclude in the\noutput.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Promise",
                "documentation": "Computes the difference between two lists of numbers.\n\nGiven a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`\nthat represents all values that are in `x` but not in `y`. The returned\nTensor `out` is sorted in the same order that the numbers appear in `x`\n(duplicates are preserved). This operation also returns a Tensor indices that\nrepresents the position of each out element in `x`. In other words:\n\n`out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`\n\n```js\nconst x = [1, 2, 3, 4, 5, 6];\nconst y = [1, 3, 5];\n\nconst [out, indices] = await tf.setdiff1dAsync(x, y);\nout.print(); // [2, 4, 6]\nindices.print(); // [1, 3, 5]\n```",
                "fileName": "#1109",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L1109-L1144",
                "isFunction": true
              }
            ]
          }
        ]
      },
      {
        "name": "Environment",
        "description": "",
        "subheadings": [
          {
            "symbols": [
              {
                "docInfo": {
                  "heading": "Environment"
                },
                "symbolName": "setBackend",
                "paramStr": "(backendName, safeMode?)",
                "parameters": [
                  {
                    "name": "backendName",
                    "documentation": "The name of the backend. Currently supports\n`'webgl'|'cpu'` in the browser, and `'tensorflow'` under node.js\n(requires tfjs-node).",
                    "type": "string",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "safeMode",
                    "documentation": "Defaults to false. In safe mode, you are forced to\nconstruct tensors and call math operations inside a `tidy()` which\nwill automatically clean up intermediate tensors.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "void",
                "documentation": "Sets the backend (cpu, webgl, etc) responsible for creating tensors and\nexecuting operations on those tensors.\n\nNote this disposes the current backend, if any, as well as any tensors\nassociated with it. A new backend is initialized, even if it is of the\nsame type as the previous one.",
                "fileName": "#68",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/environment.ts#L68-L74",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Environment"
                },
                "symbolName": "getBackend",
                "paramStr": "()",
                "parameters": [],
                "returnType": "string",
                "documentation": "Returns the current backend name (cpu, webgl, etc). The backend is\nresponsible for creating tensors and executing operations on those tensors.",
                "fileName": "#81",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/environment.ts#L81-L84",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Environment"
                },
                "symbolName": "disposeVariables",
                "paramStr": "()",
                "parameters": [],
                "returnType": "void",
                "documentation": "Dispose all variables kept in backend engine.",
                "fileName": "#90",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/environment.ts#L90-L92",
                "isFunction": true
              }
            ]
          }
        ]
      },
      {
        "name": "Performance",
        "description": "",
        "subheadings": [
          {
            "name": "Memory",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Performance",
                  "subheading": "Memory"
                },
                "symbolName": "memory",
                "paramStr": "()",
                "parameters": [],
                "returnType": "MemoryInfo",
                "documentation": "Returns memory info at the current time in the program. The result is an\nobject with the following properties:\n\n- `numBytes`: Number of bytes allocated (undisposed) at this time.\n- `numTensors`: Number of unique tensors allocated.\n- `numDataBuffers`: Number of unique data buffers allocated\n   (undisposed) at this time, which is ≤ the number of tensors\n   (e.g. `a.reshape(newShape)` makes a new Tensor that shares the same\n   data buffer with `a`).\n- `unreliable`: True if the memory usage is unreliable. See `reasons` when\n    `unrealible` is true.\n- `reasons`: `string[]`, reasons why the memory is unreliable, present if\n    `unreliable` is true.",
                "fileName": "#110",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/environment.ts#L110-L112",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Performance",
                  "subheading": "Memory"
                },
                "symbolName": "tidy",
                "paramStr": "(nameOrFn, fn?)",
                "parameters": [
                  {
                    "name": "nameOrFn",
                    "documentation": "The name of the closure, or the function to execute.\nIf a name is provided, the 2nd argument should be the function.\nIf debug mode is on, the timing and the memory usage of the function\nwill be tracked and displayed on the console using the provided name.",
                    "type": "string|Function",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "fn",
                    "documentation": "The function to execute.",
                    "type": "Function",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "void|number|string|Tensor|Tensor[]|{[key:\nstring]:Tensor|number|string}",
                "documentation": "Executes the provided function `fn` and after it is executed, cleans up all\nintermediate tensors allocated by `fn` except those returned by `fn`.\n`fn` must not return a Promise (async functions not allowed). The returned\nresult can be a complex object.\n\nUsing this method helps avoid memory leaks. In general, wrap calls to\noperations in `tf.tidy` for automatic memory cleanup.\n\nWhen in safe mode, you must enclose all `tf.Tensor` creation and ops\ninside a `tf.tidy` to prevent memory leaks.\n\n```js\n// y = 2 ^ 2 + 1\nconst y = tf.tidy(() => {\n   // a, b, and one will be cleaned up when the tidy ends.\n   const one = tf.scalar(1);\n   const a = tf.scalar(2);\n   const b = a.square();\n\n   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\n\n   // The value returned inside the tidy function will return\n   // through the tidy, in this case to the variable y.\n   return b.add(one);\n});\n\nconsole.log('numTensors (outside tidy): ' + tf.memory().numTensors);\ny.print();\n```",
                "fileName": "#184",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/environment.ts#L184-L187",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Performance",
                  "subheading": "Memory"
                },
                "symbolName": "dispose",
                "paramStr": "(container)",
                "parameters": [
                  {
                    "name": "container",
                    "documentation": "an object that may be a `tf.Tensor` or may directly\ncontain `tf.Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. If\nthe object is not a `tf.Tensor` or does not contain `Tensors`, nothing\nhappens. In general it is safe to pass any object here, except that\n`Promise`s are not supported.",
                    "type": "void|number|string|Tensor|Tensor[]|{[key:\nstring]:Tensor|number|string}",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "void",
                "documentation": "Disposes any `tf.Tensor`s found within the provided object.",
                "fileName": "#199",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/environment.ts#L199-L202",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Performance",
                  "subheading": "Memory"
                },
                "symbolName": "keep",
                "paramStr": "(result)",
                "parameters": [
                  {
                    "name": "result",
                    "documentation": "The tensor to keep from being disposed.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Keeps a `tf.Tensor` generated inside a `tf.tidy` from being disposed\nautomatically.\n\n```js\nlet b;\nconst y = tf.tidy(() => {\n   const one = tf.scalar(1);\n   const a = tf.scalar(2);\n\n   // b will not be cleaned up by the tidy. a and one will be cleaned up\n   // when the tidy ends.\n   b = tf.keep(a.square());\n\n   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\n\n   // The value returned inside the tidy function will return\n   // through the tidy, in this case to the variable y.\n   return b.add(one);\n});\n\nconsole.log('numTensors (outside tidy): ' + tf.memory().numTensors);\nconsole.log('y:');\ny.print();\nconsole.log('b:');\nb.print();\n```",
                "fileName": "#235",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/environment.ts#L235-L237",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Profile",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Performance",
                  "subheading": "Profile"
                },
                "symbolName": "profile",
                "paramStr": "(f)",
                "parameters": [
                  {
                    "name": "f",
                    "documentation": "",
                    "type": "() => void|number|string|Tensor|Tensor[]|{[key:\nstring]:Tensor|number|string}",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Promise",
                "documentation": "Executes the provided function `f()` and returns a promise that resolves\nwith information about the function's memory use:\n- `newBytes`: tne number of new bytes allocated\n- `newTensors`: the number of new tensors created\n- `peakBytes`: the peak number of bytes allocated\n- `kernels`: an array of objects for each kernel involved that reports\ntheir input and output shapes, number of bytes used, and number of new\ntensors created.\n\n```js\nconst profile = await tf.profile(() => {\n   const x = tf.tensor1d([1, 2, 3]);\n   let x2 = x.square();\n   x2.dispose();\n   x2 = x.square();\n   x2.dispose();\n   return x;\n});\n\nconsole.log(`newBytes: ${profile.newBytes}`);\nconsole.log(`newTensors: ${profile.newTensors}`);\nconsole.log(`byte usage over all kernels: ${profile.kernels.map(k =>\nk.totalBytesSnapshot)}`);\n```",
                "fileName": "#142",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/environment.ts#L142-L144",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Timing",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Performance",
                  "subheading": "Timing"
                },
                "symbolName": "time",
                "paramStr": "(f)",
                "parameters": [
                  {
                    "name": "f",
                    "documentation": "The function to execute and time.",
                    "type": "() => void",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Promise",
                "documentation": "Executes `f()` and returns a promise that resolves with timing\ninformation.\n\nThe result is an object with the following properties:\n\n- `wallMs`: Wall execution time.\n- `kernelMs`: Kernel execution time, ignoring data transfer.\n- On `WebGL` The following additional properties exist:\n   - `uploadWaitMs`: CPU blocking time on texture uploads.\n   - `downloadWaitMs`: CPU blocking time on texture downloads (readPixels).\n\n```js\nconst x = tf.randomNormal([20, 20]);\nconst time = await tf.time(() => x.matMul(x));\n\nconsole.log(`kernelMs: ${time.kernelMs}, wallTimeMs: ${time.wallMs}`);\n```",
                "fileName": "#261",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/environment.ts#L261-L263",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Performance",
                  "subheading": "Timing"
                },
                "symbolName": "nextFrame",
                "paramStr": "()",
                "parameters": [],
                "returnType": "Promise",
                "documentation": "Returns a promise that resolve when a requestAnimationFrame has completed.\n\nOn Node.js this uses setImmediate instead of requestAnimationFrame.\n\nThis is simply a sugar method so that users can do the following:\n`await tf.nextFrame();`",
                "fileName": "#31",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/browser_util.ts#L31-L33",
                "isFunction": true
              }
            ]
          }
        ]
      },
      {
        "name": "Training",
        "description": "",
        "subheadings": [
          {
            "name": "Gradients",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Gradients"
                },
                "symbolName": "grad",
                "paramStr": "(f)",
                "parameters": [
                  {
                    "name": "f",
                    "documentation": "The function f(x), to compute gradient for.",
                    "type": "(x: Tensor) => Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "(\n    x: Tensor, dy?: Tensor) => Tensor",
                "documentation": "Provided `f(x)`, returns another function `g(x, dy?)`, which gives the\ngradient of `f(x)` with respect to `x`.\n\nIf `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to\n`x` is computed instead. `f(x)` must take a single tensor `x` and return a\nsingle tensor `y`. If `f()` takes multiple inputs, use `tf.grads` instead.\n\n```js\n// f(x) = x ^ 2\nconst f = x => x.square();\n// f'(x) = 2x\nconst g = tf.grad(f);\n\nconst x = tf.tensor1d([2, 3]);\ng(x).print();\n```\n\n```js\n// f(x) = x ^ 3\nconst f = x => x.pow(tf.scalar(3, 'int32'));\n// f'(x) = 3x ^ 2\nconst g = tf.grad(f);\n// f''(x) = 6x\nconst gg = tf.grad(g);\n\nconst x = tf.tensor1d([2, 3]);\ngg(x).print();\n```",
                "fileName": "#73",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/gradients.ts#L73-L94",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Gradients"
                },
                "symbolName": "grads",
                "paramStr": "(f)",
                "parameters": [
                  {
                    "name": "f",
                    "documentation": "The function `f(x1, x2,...)` to compute gradients for.",
                    "type": "(...args: Tensor[]) => Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "(\n    args: Tensor[], dy?: Tensor) => Tensor[]",
                "documentation": "Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,\nwhich gives an array of gradients of `f()` with respect to each input\n[`x1`,`x2`,...].\n\nIf `dy` is passed when calling `g()`, the gradient of\n`f(x1,...).mul(dy).sum()` with respect to each input is computed instead.\nThe provided `f` must take one or more tensors and return a single tensor\n`y`. If `f()` takes a single input, we recommend using `tf.grad` instead.\n\n```js\n// f(a, b) = a * b\nconst f = (a, b) => a.mul(b);\n// df / da = b, df / db = a\nconst g = tf.grads(f);\n\nconst a = tf.tensor1d([2, 3]);\nconst b = tf.tensor1d([-2, -3]);\nconst [da, db] = g([a, b]);\nconsole.log('da');\nda.print();\nconsole.log('db');\ndb.print();\n```",
                "fileName": "#124",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/gradients.ts#L124-L147",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Gradients"
                },
                "symbolName": "valueAndGrad",
                "paramStr": "(f)",
                "parameters": [
                  {
                    "name": "f",
                    "documentation": "",
                    "type": "(x: Tensor) => Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "(\n    x: Tensor, dy?: Tensor) => {\n  value: Tensor;\n  grad: Tensor;\n}",
                "documentation": "Like `tf.grad`, but also returns the value of `f()`. Useful when `f()`\nreturns a metric you want to show.\n\nThe result is a rich object with the following properties:\n- grad: The gradient of `f(x)` w.r.t `x` (result of `tf.grad`).\n- value: The value returned by `f(x)`.\n\n```js\n// f(x) = x ^ 2\nconst f = x => x.square();\n// f'(x) = 2x\nconst g = tf.valueAndGrad(f);\n\nconst x = tf.tensor1d([2, 3]);\nconst {value, grad} = g(x);\n\nconsole.log('value');\nvalue.print();\nconsole.log('grad');\ngrad.print();\n```",
                "fileName": "#173",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/gradients.ts#L173-L191",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Gradients"
                },
                "symbolName": "valueAndGrads",
                "paramStr": "(f)",
                "parameters": [
                  {
                    "name": "f",
                    "documentation": "",
                    "type": "(...args: Tensor[]) => Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "(\n    args: Tensor[], dy?: Tensor) => {\n  grads: Tensor[];\n  value: Tensor;\n}",
                "documentation": "Like `tf.grads`, but returns also the value of `f()`. Useful when `f()`\nreturns a metric you want to show.\n\nThe result is a rich object with the following properties:\n- grads: The gradients of `f()` w.r.t each input (result of `tf.grads`).\n- value: The value returned by `f(x)`.\n\n```js\n// f(a, b) = a * b\nconst f = (a, b) => a.mul(b);\n// df/da = b, df/db = a\nconst g = tf.valueAndGrads(f);\n\nconst a = tf.tensor1d([2, 3]);\nconst b = tf.tensor1d([-2, -3]);\nconst {value, grads} = g([a, b]);\n\nconst [da, db] = grads;\n\nconsole.log('value');\nvalue.print();\n\nconsole.log('da');\nda.print();\nconsole.log('db');\ndb.print();\n```",
                "fileName": "#223",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/gradients.ts#L223-L248",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Gradients"
                },
                "symbolName": "variableGrads",
                "paramStr": "(f, varList?)",
                "parameters": [
                  {
                    "name": "f",
                    "documentation": "The function to execute. f() should return a scalar.",
                    "type": "() => Scalar",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "varList",
                    "documentation": "The list of trainable variables. Defaults to all variables.",
                    "type": "Variable[]",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "{value: Scalar, grads: {[name: string]: Tensor}}",
                "documentation": "Computes and returns the gradient of f(x) with respect to the list of\ntrainable variables provided by `varList`. If no list is provided, it\ndefaults to all trainable variables.\n\n```js\nconst a = tf.variable(tf.tensor1d([3, 4]));\nconst b = tf.variable(tf.tensor1d([5, 6]));\nconst x = tf.tensor1d([1, 2]);\n\n// f(a, b) = a * x ^ 2 + b * x\nconst f = () => a.mul(x.square()).add(b.mul(x)).sum();\n// df/da = x ^ 2, df/db = x\nconst {value, grads} = tf.variableGrads(f);\n\nObject.keys(grads).forEach(varName => grads[varName].print());\n```",
                "fileName": "#272",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/gradients.ts#L272-L319",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Gradients"
                },
                "symbolName": "customGrad",
                "paramStr": "(f)",
                "parameters": [
                  {
                    "name": "f",
                    "documentation": "The function to evaluate in forward mode, which should return\n`{value: Tensor, gradFunc: (dy) => Tensor[]}`, where `gradFunc` returns\nthe custom gradients of `f` with respect to its inputs.",
                    "type": "(a: Tensor, b: Tensor,...) => {\nvalue: Tensor, * gradFunc: (dy: Tensor) => Tensor | Tensor[] * }",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "(...args: Tensor[]) => Tensor",
                "documentation": "Overrides the gradient computation of a function `f`.\n\nTakes a function\n`f(...inputs) => {value: Tensor, gradFunc: dy => Tensor[]}` and returns\nanother function `g(...inputs)` which takes the same inputs as `f`. When\ncalled, `g` returns `f().value`. In backward mode, custom gradients with\nrespect to each input of `f` are computed using `f().gradFunc`.\n\n```js\nconst customOp = tf.customGrad(x => {\n   // Override gradient of our custom x ^ 2 op to be dy * abs(x);\n   return {value: x.square(), gradFunc: dy => [dy.mul(x.abs())]};\n});\n\nconst x = tf.tensor1d([-1, -2, 3]);\nconst dx = tf.grad(x => customOp(x));\n\nconsole.log(`f(x):`);\ncustomOp(x).print();\nconsole.log(`f'(x):`);\ndx(x).print();\n```",
                "fileName": "#350",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/gradients.ts#L350-L353",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Losses",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Losses",
                  "namespace": "losses"
                },
                "symbolName": "computeWeightedLoss",
                "namespace": "losses",
                "paramStr": "(losses, weights?, reduction?)",
                "parameters": [
                  {
                    "name": "losses",
                    "documentation": "Tensor of shape `[batch_size, d1, ... dN]`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "weights",
                    "documentation": "Tensor whose rank is either 0, or the same rank as\n`losses`, and must be broadcastable to `losses` (i.e., all\ndimensions must be either `1`, or the same as the corresponding\n`losses` dimension).",
                    "type": "Tensor|TypedArray|Array",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "reduction",
                    "documentation": "",
                    "type": "Reduction",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the weighted loss between two tensors.",
                "fileName": "#47",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/loss_ops.ts#L47-L88",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Losses",
                  "namespace": "losses"
                },
                "symbolName": "absoluteDifference",
                "namespace": "losses",
                "paramStr": "(labels, predictions, weights?, reduction?)",
                "parameters": [
                  {
                    "name": "labels",
                    "documentation": "The ground truth output tensor, same dimensions as\n'predictions'.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "predictions",
                    "documentation": "The predicted outputs.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "weights",
                    "documentation": "Tensor whose rank is either 0, or the same rank as\n`labels`, and must be broadcastable to `labels` (i.e., all dimensions\nmust be either `1`, or the same as the corresponding `losses`\ndimension).",
                    "type": "Tensor|TypedArray|Array",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "reduction",
                    "documentation": "Type of reduction to apply to loss. Should be of type\n`Reduction`",
                    "type": "Reduction",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the absolute difference loss between two tensors.",
                "fileName": "#104",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/loss_ops.ts#L104-L120",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Losses",
                  "namespace": "losses"
                },
                "symbolName": "meanSquaredError",
                "namespace": "losses",
                "paramStr": "(labels, predictions, weights?, reduction?)",
                "parameters": [
                  {
                    "name": "labels",
                    "documentation": "The ground truth output tensor, same dimensions as\n'predictions'.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "predictions",
                    "documentation": "The predicted outputs.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "weights",
                    "documentation": "Tensor whose rank is either 0, or the same rank as\n`labels`, and must be broadcastable to `labels` (i.e., all dimensions\nmust be either `1`, or the same as the corresponding `losses`\ndimension).",
                    "type": "Tensor|TypedArray|Array",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "reduction",
                    "documentation": "Type of reduction to apply to loss. Should be of type\n`Reduction`",
                    "type": "Reduction",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the mean squared error between two tensors.",
                "fileName": "#136",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/loss_ops.ts#L136-L152",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Losses",
                  "namespace": "losses"
                },
                "symbolName": "cosineDistance",
                "namespace": "losses",
                "paramStr": "(labels, predictions, axis, weights?, reduction?)",
                "parameters": [
                  {
                    "name": "labels",
                    "documentation": "The ground truth output tensor, same dimensions as\n'predictions'.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "predictions",
                    "documentation": "The predicted outputs.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension along which the cosine distance is computed.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "weights",
                    "documentation": "Tensor whose rank is either 0, or the same rank as\n`labels`, and must be broadcastable to `labels` (i.e., all dimensions\nmust be either `1`, or the same as the corresponding `losses`\ndimension).",
                    "type": "Tensor|TypedArray|Array",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "reduction",
                    "documentation": "Type of reduction to apply to loss. Should be of type\n`Reduction`",
                    "type": "Reduction",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the cosine distance loss between two tensors.",
                "fileName": "#169",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/loss_ops.ts#L169-L186",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Losses",
                  "namespace": "losses"
                },
                "symbolName": "hingeLoss",
                "namespace": "losses",
                "paramStr": "(labels, predictions, weights?, reduction?)",
                "parameters": [
                  {
                    "name": "labels",
                    "documentation": "The ground truth output tensor, same dimensions as\n'predictions'.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "predictions",
                    "documentation": "The predicted outputs.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "weights",
                    "documentation": "Tensor whose rank is either 0, or the same rank as\n`labels`, and must be broadcastable to `labels` (i.e., all dimensions\nmust be either `1`, or the same as the corresponding `losses`\ndimension).",
                    "type": "Tensor|TypedArray|Array",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "reduction",
                    "documentation": "Type of reduction to apply to loss. Should be of type\n`Reduction`",
                    "type": "Reduction",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the Hinge loss between two tensors.",
                "fileName": "#202",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/loss_ops.ts#L202-L219",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Losses",
                  "namespace": "losses"
                },
                "symbolName": "logLoss",
                "namespace": "losses",
                "paramStr": "(labels, predictions, weights?, epsilon?, reduction?)",
                "parameters": [
                  {
                    "name": "labels",
                    "documentation": "The ground truth output tensor, same dimensions as\n'predictions'.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "predictions",
                    "documentation": "The predicted outputs.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "weights",
                    "documentation": "Tensor whose rank is either 0, or the same rank as\n`labels`, and must be broadcastable to `labels` (i.e., all dimensions\nmust be either `1`, or the same as the corresponding `losses`\ndimension).",
                    "type": "Tensor|TypedArray|Array",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "epsilon",
                    "documentation": "A small increment to avoid taking log of zero",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "reduction",
                    "documentation": "Type of reduction to apply to loss. Should be of type\n`Reduction`",
                    "type": "Reduction",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the log loss between two tensors.",
                "fileName": "#236",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/loss_ops.ts#L236-L255",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Losses",
                  "namespace": "losses"
                },
                "symbolName": "sigmoidCrossEntropy",
                "namespace": "losses",
                "paramStr": "(multiClassLabels, logits, weights?, labelSmoothing?, reduction?)",
                "parameters": [
                  {
                    "name": "multiClassLabels",
                    "documentation": "The ground truth output tensor of shape\n[batch_size, num_classes], same dimensions as 'predictions'.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "logits",
                    "documentation": "The predicted outputs.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "weights",
                    "documentation": "Tensor whose rank is either 0, or the same rank as\n`labels`, and must be broadcastable to `labels` (i.e., all dimensions\nmust be either `1`, or the same as the corresponding `losses`\ndimension).",
                    "type": "Tensor|TypedArray|Array",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "labelSmoothing",
                    "documentation": "If greater than 0, then smooth the labels.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "reduction",
                    "documentation": "Type of reduction to apply to loss. Should be of type\n`Reduction`",
                    "type": "Reduction",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the sigmoid cross entropy loss between two tensors.\n\nIf labelSmoothing is nonzero, smooth the labels towards 1/2:\n\n   newMulticlassLabels = multiclassLabels * (1 - labelSmoothing)\n                         + 0.5 * labelSmoothing",
                "fileName": "#313",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/loss_ops.ts#L313-L338",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Losses",
                  "namespace": "losses"
                },
                "symbolName": "huberLoss",
                "namespace": "losses",
                "paramStr": "(labels, predictions, weights?, delta?, reduction?)",
                "parameters": [
                  {
                    "name": "labels",
                    "documentation": "The ground truth output tensor, same dimensions as\n'predictions'.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "predictions",
                    "documentation": "The predicted outputs.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "weights",
                    "documentation": "Tensor whose rank is either 0, or the same rank as\n`labels`, and must be broadcastable to `labels` (i.e., all dimensions\nmust be either `1`, or the same as the corresponding `losses`\ndimension).",
                    "type": "Tensor|TypedArray|Array",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "delta",
                    "documentation": "Point where huber loss changes from quadratic to linear.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "reduction",
                    "documentation": "Type of reduction to apply to loss. Should be of type\n`Reduction`.",
                    "type": "Reduction",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the huber loss between two tensors.",
                "fileName": "#355",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/loss_ops.ts#L355-L375",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Losses",
                  "namespace": "losses"
                },
                "symbolName": "softmaxCrossEntropy",
                "namespace": "losses",
                "paramStr": "(onehotLabels, logits, weights?, labelSmoothing?, reduction?)",
                "parameters": [
                  {
                    "name": "onehotLabels",
                    "documentation": "One hot encoded labels\n[batch_size, num_classes], same dimensions as 'predictions'.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "logits",
                    "documentation": "The predicted outputs.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "weights",
                    "documentation": "Tensor whose rank is either 0, or 1, and must be\nbroadcastable to `loss`  of shape [batch_size]",
                    "type": "Tensor|TypedArray|Array",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "labelSmoothing",
                    "documentation": "If greater than 0, then smooth the labels.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "reduction",
                    "documentation": "Type of reduction to apply to loss. Should be of type\n`Reduction`",
                    "type": "Reduction",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the softmax cross entropy loss between two tensors.\n\nIf labelSmoothing is nonzero, smooth the labels towards 1/2:\n\n   newOnehotLabels = onehotLabels * (1 - labelSmoothing)\n                         + labelSmoothing / numClasses",
                "fileName": "#457",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/loss_ops.ts#L457-L485",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Classes",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Classes",
                  "namespace": "train"
                },
                "symbolName": "Optimizer",
                "namespace": "train",
                "documentation": "",
                "fileName": "#24",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/optimizers/optimizer.ts#L24-L78",
                "methods": [
                  {
                    "docInfo": {
                      "heading": "Training",
                      "subheading": "Optimizers"
                    },
                    "symbolName": "minimize",
                    "paramStr": "(f, returnCost?, varList?)",
                    "parameters": [
                      {
                        "name": "f",
                        "documentation": "The function to execute and whose output to minimize.",
                        "type": "() => Scalar",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "returnCost",
                        "documentation": "Whether to return the scalar cost value produced by\nexecuting `f()`.",
                        "type": "boolean",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "varList",
                        "documentation": "An optional list of variables to update. If specified, only\nthe trainable variables in varList will be updated by minimize. Defaults to\nall trainable variables.",
                        "type": "Variable[]",
                        "optional": true,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Scalar\n      |null",
                    "documentation": "Executes `f()` and minimizes the scalar output of `f()` by computing\ngradients of y with respect to the list of trainable variables provided by\n`varList`. If no list is provided, it defaults to all trainable variables.",
                    "fileName": "#38",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/optimizers/optimizer.ts#L38-L54",
                    "isFunction": true
                  }
                ],
                "isClass": true,
                "inheritsFrom": "Serializable"
              }
            ]
          },
          {
            "name": "Optimizers",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Optimizers",
                  "namespace": "train"
                },
                "symbolName": "sgd",
                "namespace": "train",
                "paramStr": "(learningRate)",
                "parameters": [
                  {
                    "name": "learningRate",
                    "documentation": "The learning rate to use for the SGD algorithm.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "SGDOptimizer",
                "documentation": "Constructs a `tf.SGDOptimizer` that uses stochastic gradient descent.\n\n```js\n// Fit a quadratic function by learning the coefficients a, b, c.\nconst xs = tf.tensor1d([0, 1, 2, 3]);\nconst ys = tf.tensor1d([1.1, 5.9, 16.8, 33.9]);\n\nconst a = tf.scalar(Math.random()).variable();\nconst b = tf.scalar(Math.random()).variable();\nconst c = tf.scalar(Math.random()).variable();\n\n// y = a * x^2 + b * x + c.\nconst f = x => a.mul(x.square()).add(b.mul(x)).add(c);\nconst loss = (pred, label) => pred.sub(label).square().mean();\n\nconst learningRate = 0.01;\nconst optimizer = tf.train.sgd(learningRate);\n\n// Train the model.\nfor (let i = 0; i < 10; i++) {\n   optimizer.minimize(() => loss(f(xs), ys));\n}\n\n// Make predictions.\nconsole.log(\n     `a: ${a.dataSync()}, b: ${b.dataSync()}, c: ${c.dataSync()}`);\nconst preds = f(xs).dataSync();\npreds.forEach((pred, i) => {\n   console.log(`x: ${i}, pred: ${pred}`);\n});\n```",
                "fileName": "#65",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/optimizers/optimizer_constructors.ts#L65-L67",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Optimizers",
                  "namespace": "train"
                },
                "symbolName": "momentum",
                "namespace": "train",
                "paramStr": "(learningRate, momentum, useNesterov?)",
                "parameters": [
                  {
                    "name": "learningRate",
                    "documentation": "The learning rate to use for the Momentum gradient\ndescent algorithm.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "momentum",
                    "documentation": "The momentum to use for the momentum gradient descent\nalgorithm.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "useNesterov",
                    "documentation": "",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "MomentumOptimizer",
                "documentation": "Constructs a `tf.MomentumOptimizer` that uses momentum gradient\ndescent.\n\nSee\n[http://proceedings.mlr.press/v28/sutskever13.pdf](\nhttp://proceedings.mlr.press/v28/sutskever13.pdf)",
                "fileName": "#85",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/optimizers/optimizer_constructors.ts#L85-L88",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Optimizers",
                  "namespace": "train"
                },
                "symbolName": "rmsprop",
                "namespace": "train",
                "paramStr": "(learningRate, decay?, momentum?, epsilon?, centered?)",
                "parameters": [
                  {
                    "name": "learningRate",
                    "documentation": "The learning rate to use for the RMSProp gradient\ndescent algorithm.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "decay",
                    "documentation": "The discounting factor for the history/coming gradient.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "momentum",
                    "documentation": "The momentum to use for the RMSProp gradient descent\nalgorithm.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "epsilon",
                    "documentation": "Small value to avoid zero denominator.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "centered",
                    "documentation": "If true, gradients are normalized by the estimated\nvariance of the gradient.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "RMSPropOptimizer",
                "documentation": "Constructs a `tf.RMSPropOptimizer` that uses RMSProp gradient\ndescent. This implementation uses plain momentum and is not centered\nversion of RMSProp.\n\nSee\n[http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf](\nhttp://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)",
                "fileName": "#111",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/optimizers/optimizer_constructors.ts#L111-L116",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Optimizers",
                  "namespace": "train"
                },
                "symbolName": "adam",
                "namespace": "train",
                "paramStr": "(learningRate?, beta1?, beta2?, epsilon?)",
                "parameters": [
                  {
                    "name": "learningRate",
                    "documentation": "The learning rate to use for the Adam gradient\ndescent algorithm.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "beta1",
                    "documentation": "The exponential decay rate for the 1st moment estimates.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "beta2",
                    "documentation": "The exponential decay rate for the 2nd moment estimates.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "epsilon",
                    "documentation": "A small constant for numerical stability.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "AdamOptimizer",
                "documentation": "Constructs a `tf.AdamOptimizer` that uses the Adam algorithm.\nSee [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)",
                "fileName": "#131",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/optimizers/optimizer_constructors.ts#L131-L135",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Optimizers",
                  "namespace": "train"
                },
                "symbolName": "adadelta",
                "namespace": "train",
                "paramStr": "(learningRate?, rho?, epsilon?)",
                "parameters": [
                  {
                    "name": "learningRate",
                    "documentation": "The learning rate to use for the Adadelta gradient\ndescent algorithm.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "rho",
                    "documentation": "The learning rate decay over each update.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "epsilon",
                    "documentation": "A constant epsilon used to better condition the grad\nupdate.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "AdadeltaOptimizer",
                "documentation": "Constructs a `tf.AdadeltaOptimizer` that uses the Adadelta algorithm.\nSee [https://arxiv.org/abs/1212.5701](https://arxiv.org/abs/1212.5701)",
                "fileName": "#150",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/optimizers/optimizer_constructors.ts#L150-L153",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Optimizers",
                  "namespace": "train"
                },
                "symbolName": "adamax",
                "namespace": "train",
                "paramStr": "(learningRate?, beta1?, beta2?, epsilon?, decay?)",
                "parameters": [
                  {
                    "name": "learningRate",
                    "documentation": "The learning rate to use for the Adamax gradient\ndescent algorithm.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "beta1",
                    "documentation": "The exponential decay rate for the 1st moment estimates.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "beta2",
                    "documentation": "The exponential decay rate for the 2nd moment estimates.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "epsilon",
                    "documentation": "A small constant for numerical stability.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "decay",
                    "documentation": "The learning rate decay over each update.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "AdamaxOptimizer",
                "documentation": "Constructs a `tf.AdamaxOptimizer` that uses the Adamax algorithm.\nSee [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)",
                "fileName": "#169",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/optimizers/optimizer_constructors.ts#L169-L173",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Optimizers",
                  "namespace": "train"
                },
                "symbolName": "adagrad",
                "namespace": "train",
                "paramStr": "(learningRate, initialAccumulatorValue?)",
                "parameters": [
                  {
                    "name": "learningRate",
                    "documentation": "The learning rate to use for the Adagrad gradient\ndescent algorithm.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "initialAccumulatorValue",
                    "documentation": "Starting value for the accumulators, must be\npositive.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "AdagradOptimizer",
                "documentation": "Constructs a `tf.AdagradOptimizer` that uses the Adagrad algorithm.\nSee\n[http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf](\nhttp://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)\nor\n[http://ruder.io/optimizing-gradient-descent/index.html#adagrad](\nhttp://ruder.io/optimizing-gradient-descent/index.html#adagrad)",
                "fileName": "#192",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/optimizers/optimizer_constructors.ts#L192-L195",
                "isFunction": true
              }
            ]
          }
        ]
      },
      {
        "name": "Operations",
        "description": "",
        "subheadings": [
          {
            "name": "Normalization",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Normalization"
                },
                "symbolName": "softmax",
                "paramStr": "(logits, dim?)",
                "parameters": [
                  {
                    "name": "logits",
                    "documentation": "The logits array.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dim",
                    "documentation": "The dimension softmax would be performed on. Defaults to `-1`\nwhich indicates the last dimension.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the softmax normalized vector given the logits.\n\n```js\nconst a = tf.tensor1d([1, 2, 3]);\n\na.softmax().print();  // or tf.softmax(a)\n```\n\n```js\nconst a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);\n\na.softmax().print();  // or tf.softmax(a)\n```",
                "fileName": "#44",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/softmax.ts#L44-L74",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Normalization"
                },
                "symbolName": "logSoftmax",
                "paramStr": "(logits, axis?)",
                "parameters": [
                  {
                    "name": "logits",
                    "documentation": "The logits array.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension softmax would be performed on. Defaults to `-1`\nwhich indicates the last dimension.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the log softmax.\n\n```js\nconst a = tf.tensor1d([1, 2, 3]);\n\na.logSoftmax().print();  // or tf.logSoftmax(a)\n```\n\n```js\nconst a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);\n\na.logSoftmax().print();  // or tf.logSoftmax(a)\n```",
                "fileName": "#96",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/softmax.ts#L96-L124",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Normalization"
                },
                "symbolName": "batchNormalization",
                "paramStr": "(x, mean, variance, varianceEpsilon?, scale?, offset?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input Tensor.",
                    "type": "Tensor|Tensor1D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "mean",
                    "documentation": "A mean Tensor.",
                    "type": "Tensor|Tensor1D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "variance",
                    "documentation": "A variance Tensor.",
                    "type": "Tensor|Tensor1D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "varianceEpsilon",
                    "documentation": "A small float number to avoid dividing by 0.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "scale",
                    "documentation": "A scale Tensor.",
                    "type": "Tensor|Tensor1D|TypedArray|Array",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "offset",
                    "documentation": "An offset Tensor.",
                    "type": "Tensor|Tensor1D|TypedArray|Array",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Batch normalization.\n\nAs described in\n[http://arxiv.org/abs/1502.03167](http://arxiv.org/abs/1502.03167).\n\nMean, variance, scale, and offset can be of two shapes:\n   - The same shape as the input.\n   - In the common case, the depth dimension is the last dimension of x, so\n     the values would be an `tf.Tensor1D` of shape [depth].\n\nAlso available are stricter rank-specific methods with the same signature\nas this method that assert that parameters passed are of given rank\n   - `tf.batchNormalization2d`\n   - `tf.batchNormalization3d`\n   - `tf.batchNormalization4d`",
                "fileName": "#222",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/batchnorm.ts#L222-L336",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Normalization"
                },
                "symbolName": "moments",
                "paramStr": "(x, axis?, keepDims?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension(s) along with to compute mean and\nvariance. By default it reduces all dimensions.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "keepDims",
                    "documentation": "If true, the moments have the same dimensionality as the\ninput.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "{mean: Tensor, variance: Tensor}",
                "documentation": "Calculates the mean and variance of `x`. The mean and variance are\ncalculated by aggregating the contents of `x` across `axes`. If `x` is\n1-D and `axes = [0]` this is just the mean and variance of a vector.",
                "fileName": "#579",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/reduction_ops.ts#L579-L592",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Normalization"
                },
                "symbolName": "localResponseNormalization",
                "paramStr": "(x, depthRadius?, bias?, alpha?, beta?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor. The 4-D input tensor is treated as a 3-D array\nof 1D vectors (along the last dimension), and each vector is\nnormalized independently.",
                    "type": "Tensor3D|Tensor4D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "depthRadius",
                    "documentation": "The number of adjacent channels in the 1D normalization\nwindow.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "bias",
                    "documentation": "A constant bias term for the basis.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "alpha",
                    "documentation": "A scale factor, usually positive.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "beta",
                    "documentation": "An exponent.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D|Tensor4D",
                "documentation": "Normalizes the activation of a local neighborhood across or within\nchannels.",
                "fileName": "#39",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/lrn.ts#L39-L75",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Normalization"
                },
                "symbolName": "sparseToDense",
                "paramStr": "(sparseIndices, sparseValues, outputShape, defaultValue)",
                "parameters": [
                  {
                    "name": "sparseIndices",
                    "documentation": "A 0-D, 1-D, or 2-D Tensor of type int32.\nsparseIndices[i] contains the complete index where sparseValues[i] will be\nplaced.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "sparseValues",
                    "documentation": "A 0-D or 1-D Tensor. Values\ncorresponding to each row of sparseIndices, or a scalar value to be used for\nall sparse indices.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "outputShape",
                    "documentation": "Shape of the dense output tensor. the type is inferred.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "defaultValue",
                    "documentation": "Scalar. Value to set for indices not specified in\nsparseIndices. Defaults to zero.",
                    "type": "Scalar|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Converts a sparse representation into a dense tensor.\n\nBuilds an array dense with shape outputShape such that:\n\n// If sparseIndices is scalar\ndense[i] = (i == sparseIndices ? sparseValues : defaultValue)\n\n// If sparseIndices is a vector, then for each i\ndense[sparseIndices[i]] = sparseValues[i]\n\n// If sparseIndices is an n by d matrix, then for each i in [0, n)\ndense[sparseIndices[i][0], ..., sparseIndices[i][d-1]] = sparseValues[i]\nAll other values in dense are set to defaultValue. If sparseValues is a\nscalar, all sparse indices are set to this single value.\n\n```js\nconst indices = tf.tensor1d([4, 5, 6, 1, 2, 3], 'int32');\nconst values = tf.tensor1d([10, 11, 12, 13, 14, 15], 'float32');\nconst shape = [8];\ntf.sparseToDense(indices, values, shape).print();\n```",
                "fileName": "#60",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/sparse_to_dense.ts#L60-L77",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Scan",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Scan"
                },
                "symbolName": "cumsum",
                "paramStr": "(x, axis?, exclusive?, reverse?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor to be summed.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The axis along which to sum. Optional. Defaults to 0.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "exclusive",
                    "documentation": "Whether to perform exclusive cumulative sum. Optional.\nDefaults to false. If set to true then the sum of each tensor entry\ndoes not include its own value, but only the values previous to it\nalong the specified axis.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "reverse",
                    "documentation": "Whether to sum in the opposite direction. Optional.\nDefaults to false.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the cumulative sum of a `tf.Tensor` along `axis`.\n\n```js\nconst x = tf.tensor([1, 2, 3, 4]);\nx.cumsum().print();\n```\n```js\nconst x = tf.tensor([[1, 2], [3, 4]]);\nx.cumsum().print();\n```",
                "fileName": "#956",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L956-L980",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Basic math",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "neg",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes `-1 * x` element-wise.\n\n```js\nconst x = tf.tensor2d([1, 2, -2, 0], [2, 2]);\n\nx.neg().print();  // or tf.neg(x)\n```",
                "fileName": "#39",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L39-L46",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "ceil",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input Tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes ceiling of input `tf.Tensor` element-wise: `ceil(x)`\n\n```js\nconst x = tf.tensor1d([.6, 1.1, -3.3]);\n\nx.ceil().print();  // or tf.ceil(x)\n```",
                "fileName": "#59",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L59-L67",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "floor",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes floor of input `tf.Tensor` element-wise: `floor(x)`.\n\n```js\nconst x = tf.tensor1d([.6, 1.1, -3.3]);\n\nx.floor().print();  // or tf.floor(x)\n```",
                "fileName": "#80",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L80-L89",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "sign",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input Tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns an element-wise indication of the sign of a number.\n\n```js\nconst x = tf.tensor1d([.6, 1.1, -3.3, NaN, 0]);\n\nx.sign().print();  // or tf.sign(x)\n```",
                "fileName": "#102",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L102-L109",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "round",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes round of input `tf.Tensor` element-wise: `round(x)`.\nIt implements banker's rounding.\n\n```js\nconst x = tf.tensor1d([.6, 1.1, -3.3]);\n\nx.round().print();  // or tf.round(x)\n```",
                "fileName": "#123",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L123-L132",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "exp",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes exponential of the input `tf.Tensor` element-wise. `e ^ x`\n\n```js\nconst x = tf.tensor1d([1, 2, -3]);\n\nx.exp().print();  // or tf.exp(x)\n```",
                "fileName": "#145",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L145-L154",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "expm1",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes exponential of the input `tf.Tensor` minus one element-wise.\n`e ^ x - 1`\n\n```js\nconst x = tf.tensor1d([1, 2, -3]);\n\nx.expm1().print();  // or tf.expm1(x)\n```",
                "fileName": "#168",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L168-L175",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "log",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes natural logarithm of the input `tf.Tensor` element-wise: `ln(x)`\n\n```js\nconst x = tf.tensor1d([1, 2, Math.E]);\n\nx.log().print();  // or tf.log(x)\n```",
                "fileName": "#188",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L188-L195",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "log1p",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes natural logarithm of the input `tf.Tensor` plus one\nelement-wise: `ln(1 + x)`\n\n```js\nconst x = tf.tensor1d([1, 2, Math.E - 1]);\n\nx.log1p().print();  // or tf.log1p(x)\n```",
                "fileName": "#209",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L209-L216",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "sqrt",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes square root of the input `tf.Tensor` element-wise: `y = sqrt(x)`\n\n```js\nconst x = tf.tensor1d([1, 2, 4, -1]);\n\nx.sqrt().print();  // or tf.sqrt(x)\n```",
                "fileName": "#229",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L229-L236",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "rsqrt",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes reciprocal of square root of the input `tf.Tensor` element-wise:\n`y = 1 / sqrt(x)`\n\n```js\nconst x = tf.tensor1d([1, 2, 4, -1]);\n\nx.rsqrt().print();  // or tf.rsqrt(x)\n```",
                "fileName": "#250",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L250-L257",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "square",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input Tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes square of `x` element-wise: `x ^ 2`\n\n```js\nconst x = tf.tensor1d([1, 2, Math.sqrt(2), -1]);\n\nx.square().print();  // or tf.square(x)\n```",
                "fileName": "#270",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L270-L277",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "reciprocal",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes reciprocal of x element-wise: `1 / x`\n\n```js\nconst x = tf.tensor1d([0, 1, 2]);\n\nx.reciprocal().print();  // or tf.reciprocal(x)\n```",
                "fileName": "#290",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L290-L297",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "abs",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input `tf.Tensor`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes absolute value element-wise: `abs(x)`\n\n```js\nconst x = tf.tensor1d([-1, 2, -3, 4]);\n\nx.abs().print();  // or tf.abs(x)\n```",
                "fileName": "#310",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L310-L321",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "clipByValue",
                "paramStr": "(x, clipValueMin, clipValueMax)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "clipValueMin",
                    "documentation": "Lower-bound of range to be clipped to.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "clipValueMax",
                    "documentation": "Upper-bound of range to be clipped to.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Clips values element-wise. `max(min(x, clipValueMax), clipValueMin)`\n\n```js\nconst x = tf.tensor1d([-1, 2, -3, 4]);\n\nx.clipByValue(-2, 3).print();  // or tf.clipByValue(x, -2, 3)\n```",
                "fileName": "#336",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L336-L354",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "sigmoid",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes sigmoid element-wise, `1 / (1 + exp(-x))`\n\n```js\nconst x = tf.tensor1d([0, -1, 2, -3]);\n\nx.sigmoid().print();  // or tf.sigmoid(x)\n```",
                "fileName": "#367",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L367-L376",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "logSigmoid",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes log sigmoid of the input `tf.Tensor` element-wise:\n`logSigmoid(x)`. For numerical stability, we use `-tf.softplus(-x)`.\n\n```js\nconst x = tf.tensor1d([0, 1, -1, .7]);\n\nx.logSigmoid().print();  // or tf.logSigmoid(x)\n```",
                "fileName": "#390",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L390-L398",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "softplus",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes softplus of the input `tf.Tensor` element-wise: `log(exp(x) + 1)`\n\n```js\nconst x = tf.tensor1d([0, 1, -1, .7]);\n\nx.softplus().print();  // or tf.softplus(x)\n```",
                "fileName": "#411",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L411-L418",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "sin",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes sin of the input Tensor element-wise: `sin(x)`\n\n```js\nconst x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n\nx.sin().print();  // or tf.sin(x)\n```",
                "fileName": "#431",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L431-L438",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "cos",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes cos of the input `tf.Tensor` element-wise: `cos(x)`\n\n```js\nconst x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n\nx.cos().print();  // or tf.cos(x)\n```",
                "fileName": "#451",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L451-L458",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "tan",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes tan of the input `tf.Tensor` element-wise, `tan(x)`\n\n```js\nconst x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n\nx.tan().print();  // or tf.tan(x)\n```",
                "fileName": "#471",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L471-L478",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "asin",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes asin of the input `tf.Tensor` element-wise: `asin(x)`\n\n```js\nconst x = tf.tensor1d([0, 1, -1, .7]);\n\nx.asin().print();  // or tf.asin(x)\n```",
                "fileName": "#491",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L491-L500",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "acos",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes acos of the input `tf.Tensor` element-wise: `acos(x)`\n\n```js\nconst x = tf.tensor1d([0, 1, -1, .7]);\n\nx.acos().print();  // or tf.acos(x)\n```",
                "fileName": "#513",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L513-L523",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "atan",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes atan of the input `tf.Tensor` element-wise: `atan(x)`\n\n```js\nconst x = tf.tensor1d([0, 1, -1, .7]);\n\nx.atan().print();  // or tf.atan(x)\n```",
                "fileName": "#536",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L536-L543",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "sinh",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes hyperbolic sin of the input `tf.Tensor` element-wise: `sinh(x)`\n\n```js\nconst x = tf.tensor1d([0, 1, -1, .7]);\n\nx.sinh().print();  // or tf.sinh(x)\n```",
                "fileName": "#556",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L556-L563",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "cosh",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes hyperbolic cos of the input `tf.Tensor` element-wise: `cosh(x)`\n\n```js\nconst x = tf.tensor1d([0, 1, -1, .7]);\n\nx.cosh().print();  // or tf.cosh(x)\n```",
                "fileName": "#576",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L576-L583",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "tanh",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes hyperbolic tangent of the input `tf.Tensor` element-wise: `tanh(x)`\n\n```js\nconst x = tf.tensor1d([0, 1, -1, 70]);\n\nx.tanh().print();  // or tf.tanh(x)\n```",
                "fileName": "#596",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L596-L605",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "asinh",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes inverse hyperbolic sin of the input `tf.Tensor` element-wise:\n`asinh(x)`\n\n```js\nconst x = tf.tensor1d([0, 1, -1, .7]);\n\nx.asinh().print();  // or tf.asinh(x)\n```",
                "fileName": "#619",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L619-L628",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "acosh",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the inverse hyperbolic cos of the input `tf.Tensor` element-wise:\n`acosh(x)`\n\n```js\nconst x = tf.tensor1d([10, 1, 3, 5.7]);\n\nx.acosh().print();  // or tf.acosh(x)\n```",
                "fileName": "#642",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L642-L649",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "atanh",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes inverse hyperbolic tan of the input `tf.Tensor` element-wise:\n`atanh(x)`\n\n```js\nconst x = tf.tensor1d([0, .1, -.1, .7]);\n\nx.atanh().print();  // or tf.atanh(x)\n```",
                "fileName": "#663",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L663-L670",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "erf",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes gause error function of the input `tf.Tensor` element-wise:\n`erf(x)`\n\n```js\nconst x = tf.tensor1d([0, .1, -.1, .7]);\n\nx.erf().print(); // or tf.erf(x);\n```",
                "fileName": "#684",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L684-L700",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "step",
                "paramStr": "(x, alpha?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "alpha",
                    "documentation": "The gradient when input is negative.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes step of the input `tf.Tensor` element-wise: `x > 0 ? 1 : alpha * x`\n\n```js\nconst x = tf.tensor1d([0, 2, -1, -3]);\n\nx.step(.5).print();  // or tf.step(x, .5)\n```",
                "fileName": "#714",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/unary_ops.ts#L714-L723",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "atan2",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second tensor. Must have the same dtype as `a`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes arctangent of `tf.Tensor`s a / b element-wise: `atan2(a, b)`.\nSupports broadcasting.\n\n```js\nconst a = tf.tensor1d([1.0, 1.0, -1.0, .7]);\nconst b = tf.tensor1d([2.0, 13.0, 3.5, .21]);\n\ntf.atan2(a, b).print()\n```",
                "fileName": "#773",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/binary_ops.ts#L773-L805",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "relu",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor. If the dtype is `bool`, the output dtype will be\n`int32'.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes rectified linear element-wise: `max(x, 0)`.\n\n```js\nconst x = tf.tensor1d([-1, 2, -3, 4]);\n\nx.relu().print();  // or tf.relu(x)\n```",
                "fileName": "#41",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/relu_ops.ts#L41-L52",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "elu",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes exponential linear element-wise: `x > 0 ? e ^ x - 1 : 0`.\n\n```js\nconst x = tf.tensor1d([-1, 1, -3, 2]);\n\nx.elu().print();  // or tf.elu(x)\n```",
                "fileName": "#65",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/relu_ops.ts#L65-L77",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "selu",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes scaled exponential linear element-wise.\n\n`x < 0 ? scale * alpha * (exp(x) - 1) : x`\n\n```js\nconst x = tf.tensor1d([-1, 2, -3, 4]);\n\nx.selu().print();  // or tf.selu(x)\n```",
                "fileName": "#92",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/relu_ops.ts#L92-L111",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "leakyRelu",
                "paramStr": "(x, alpha?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "alpha",
                    "documentation": "The scaling factor for negative values, defaults to 0.2.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes leaky rectified linear element-wise.\n\nSee\n[http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf](\n     http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf)\n\n```js\nconst x = tf.tensor1d([-1, 2, -3, 4]);\n\nx.leakyRelu(0.1).print();  // or tf.leakyRelu(x, 0.1)\n```",
                "fileName": "#129",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/relu_ops.ts#L129-L132",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "prelu",
                "paramStr": "(x, alpha)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "alpha",
                    "documentation": "Scaling factor for negative values.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes leaky rectified linear element-wise with parametric alphas.\n\n`x < 0 ? alpha * x : f(x) = x`\n\n```js\nconst x = tf.tensor1d([-1, 2, -3, 4]);\nconst alpha = tf.scalar(0.1);\n\nx.prelu(alpha).print();  // or tf.prelu(x, alpha)\n```",
                "fileName": "#149",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/relu_ops.ts#L149-L171",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Matrices",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Matrices"
                },
                "symbolName": "matMul",
                "paramStr": "(a, b, transposeA?, transposeB?)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "First matrix in dot product operation.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "Second matrix in dot product operation.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "transposeA",
                    "documentation": "If true, `a` is transposed before multiplication.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "transposeB",
                    "documentation": "If true, `b` is transposed before multiplication.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the dot product of two matrices, A * B. These must be matrices.\n\n```js\nconst a = tf.tensor2d([1, 2], [1, 2]);\nconst b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\na.matMul(b).print();  // or tf.matMul(a, b)\n```",
                "fileName": "#41",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/matmul.ts#L41-L116",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Matrices"
                },
                "symbolName": "outerProduct",
                "paramStr": "(v1, v2)",
                "parameters": [
                  {
                    "name": "v1",
                    "documentation": "The first vector in the outer product operation.",
                    "type": "Tensor1D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "v2",
                    "documentation": "The second vector in the outer product operation.",
                    "type": "Tensor1D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor2D",
                "documentation": "Computes the outer product of two vectors, `v1` and `v2`.\n\n```js\nconst a = tf.tensor1d([1, 2, 3]);\nconst b = tf.tensor1d([3, 4, 5]);\n\ntf.outerProduct(a, b).print();\n```",
                "fileName": "#131",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/matmul.ts#L131-L142",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Matrices"
                },
                "symbolName": "dot",
                "paramStr": "(t1, t2)",
                "parameters": [
                  {
                    "name": "t1",
                    "documentation": "The first tensor in the dot operation.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "t2",
                    "documentation": "The second tensor in the dot operation.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the dot product of two matrices and/or vectors, `t1` and `t2`.\n\n```js\nconst a = tf.tensor1d([1, 2]);\nconst b = tf.tensor2d([[1, 2], [3, 4]]);\nconst c = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);\n\na.dot(b).print();  // or tf.dot(a, b)\nb.dot(a).print();\nb.dot(c).print();\n```",
                "fileName": "#160",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/matmul.ts#L160-L185",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Matrices"
                },
                "symbolName": "transpose",
                "paramStr": "(x, perm?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The tensor to transpose.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "perm",
                    "documentation": "The permutation of the dimensions of a.",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.\n\nThe returned `tf.Tensor`'s dimension `i` will correspond to the input\ndimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,\nwhere `n` is the rank of the input `tf.Tensor`. Hence by default, this\noperation performs a regular matrix transpose on 2-D input `tf.Tensor`s.\n\n```js\nconst a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\n\na.transpose().print();  // or tf.transpose(a)\n```",
                "fileName": "#44",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/transpose.ts#L44-L71",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Matrices"
                },
                "symbolName": "norm",
                "paramStr": "(x, ord?, axis?, keepDims?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input array.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "ord",
                    "documentation": "Optional. Order of the norm. Supported norm types are\nfollowing:\n\n| ord        | norm for matrices         | norm for vectors\n|------------|---------------------------|---------------------\n|'euclidean' |Frobenius norm             |2-norm\n|'fro'       |Frobenius norm\t           |\n|Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))\n|-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))\n|1           |max(sum(abs(x), axis=0))   |sum(abs(x))\n|2           |                           |sum(abs(x)^2)^1/2*",
                    "type": "number|'euclidean'|'fro'",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "Optional. If axis is null (the default), the input is\nconsidered a vector and a single vector norm is computed over the entire\nset of values in the Tensor, i.e. norm(x, ord) is equivalent\nto norm(x.reshape([-1]), ord). If axis is a integer, the input\nis considered a batch of vectors, and axis determines the axis in x\nover which to compute vector norms. If axis is a 2-tuple of integer it is\nconsidered a batch of matrices and axis determines the axes in NDArray\nover which to compute a matrix norm.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "keepDims",
                    "documentation": "Optional. If true, the norm have the same dimensionality\nas the input.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the norm of scalar, vectors, and matrices.\nThis function can compute several different vector norms (the 1-norm, the\nEuclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)\nand matrix norms (Frobenius, 1-norm, and inf-norm).\n\n```js\nconst x = tf.tensor1d([1, 2, 3, 4]);\n\nx.norm().print();  // or tf.norm(x)\n```",
                "fileName": "#63",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/norm.ts#L63-L75",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Convolution",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Convolution"
                },
                "symbolName": "conv1d",
                "paramStr": "(x, filter, stride, pad, dataFormat?, dilation?, dimRoundingMode?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor, of rank 3 or rank 2, of shape\n`[batch, width, inChannels]`. If rank 2, batch of 1 is assumed.",
                    "type": "Tensor2D|Tensor3D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "filter",
                    "documentation": "The filter, rank 3, of shape\n`[filterWidth, inDepth, outDepth]`.",
                    "type": "Tensor3D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "stride",
                    "documentation": "The number of entries by which the filter is moved right at\neach step.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "pad",
                    "documentation": "The type of padding algorithm.\n- `same` and stride 1: output will be of same size as input,\nregardless of filter size.\n- `valid`: output will be smaller than input if filter is larger\nthan 1x1.\n- For more info, see this guide:\n[https://www.tensorflow.org/api_guides/python/nn#Convolution](\nhttps://www.tensorflow.org/api_guides/python/nn#Convolution)",
                    "type": "'valid'|'same'|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dataFormat",
                    "documentation": "An optional string from \"NWC\", \"NCW\". Defaults to \"NWC\",\nthe data is stored in the order of [batch, in_width, in_channels]. Only\n\"NWC\" is currently supported.",
                    "type": "'NWC'|'NCW'",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dilation",
                    "documentation": "The dilation rate in which we sample input values in\natrous convolution. Defaults to `1`. If it is greater than 1, then\nstride must be `1`.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dimRoundingMode",
                    "documentation": "The rounding mode used when computing output\ndimensions if pad is a number. If none is provided, it will not round\nand error if the output is of fractional size.",
                    "type": "'floor'|'round'|'ceil'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor2D|Tensor3D",
                "documentation": "Computes a 1D convolution over the input x.",
                "fileName": "#55",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/conv.ts#L55-L112",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Convolution"
                },
                "symbolName": "conv2d",
                "paramStr": "(x, filter, strides, pad, dataFormat?, dilations?, dimRoundingMode?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor, of rank 4 or rank 3, of shape\n`[batch, height, width, inChannels]`. If rank 3, batch of 1 is\nassumed.",
                    "type": "Tensor3D|Tensor4D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "filter",
                    "documentation": "The filter, rank 4, of shape\n`[filterHeight, filterWidth, inDepth, outDepth]`.",
                    "type": "Tensor4D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "strides",
                    "documentation": "The strides of the convolution: `[strideHeight,\nstrideWidth]`.",
                    "type": "[number, number]|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "pad",
                    "documentation": "The type of padding algorithm.\n- `same` and stride 1: output will be of same size as input,\nregardless of filter size.\n- `valid`: output will be smaller than input if filter is larger\nthan 1x1.\n- For more info, see this guide:\n[https://www.tensorflow.org/api_guides/python/nn#Convolution](\nhttps://www.tensorflow.org/api_guides/python/nn#Convolution)",
                    "type": "'valid'|'same'|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dataFormat",
                    "documentation": ": An optional string from: \"NHWC\", \"NCHW\". Defaults to\n\"NHWC\". Specify the data format of the input and output data. With the\ndefault format \"NHWC\", the data is stored in the order of: [batch,\nheight, width, channels]. Only \"NHWC\" is currently supported.",
                    "type": "'NHWC'|'NCHW'",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dilations",
                    "documentation": "The dilation rates: `[dilationHeight, dilationWidth]`\nin which we sample input values across the height and width dimensions\nin atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single\nnumber, then `dilationHeight == dilationWidth`. If it is greater than\n1, then all values of `strides` must be 1.",
                    "type": "[number, number]|number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dimRoundingMode",
                    "documentation": "The rounding mode used when computing output\ndimensions if pad is a number. If none is provided, it will not round\nand error if the output is of fractional size.",
                    "type": "'floor'|'round'|'ceil'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D|Tensor4D",
                "documentation": "Computes a 2D convolution over the input x.",
                "fileName": "#146",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/conv.ts#L146-L223",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Convolution"
                },
                "symbolName": "conv2dTranspose",
                "paramStr": "(x, filter, outputShape, strides, pad, dimRoundingMode?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input image, of rank 4 or rank 3, of shape\n`[batch, height, width, inDepth]`. If rank 3, batch of 1 is assumed.",
                    "type": "Tensor3D|Tensor4D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "filter",
                    "documentation": "The filter, rank 4, of shape\n`[filterHeight, filterWidth, outDepth, inDepth]`.\n`inDepth` must match `inDepth` in `x`.",
                    "type": "Tensor4D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "outputShape",
                    "documentation": "Output shape, of rank 4 or rank 3:\n`[batch, height, width, outDepth]`. If rank 3, batch of 1 is assumed.",
                    "type": "[number, number, number, number]|[number, number, number]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "strides",
                    "documentation": "The strides of the original convolution:\n`[strideHeight, strideWidth]`.",
                    "type": "[number, number]|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "pad",
                    "documentation": "The type of padding algorithm used in the non-transpose version\nof the op.",
                    "type": "'valid'|'same'|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dimRoundingMode",
                    "documentation": "The rounding mode used when computing output\ndimensions if pad is a number. If none is provided, it will not round\nand error if the output is of fractional size.",
                    "type": "'floor'|'round'|'ceil'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D|Tensor4D",
                "documentation": "Computes the transposed 2D convolution of an image, also known as a\ndeconvolution.",
                "fileName": "#401",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/conv.ts#L401-L411",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Convolution"
                },
                "symbolName": "depthwiseConv2d",
                "paramStr": "(x, filter, strides, pad, dataFormat?, dilations?, dimRoundingMode?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor, of rank 4 or rank 3, of shape\n`[batch, height, width, inChannels]`. If rank 3, batch of 1 is\nassumed.",
                    "type": "Tensor3D|Tensor4D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "filter",
                    "documentation": "The filter tensor, rank 4, of shape\n`[filterHeight, filterWidth, inChannels, channelMultiplier]`.",
                    "type": "Tensor4D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "strides",
                    "documentation": "The strides of the convolution: `[strideHeight,\nstrideWidth]`. If strides is a single number, then `strideHeight ==\nstrideWidth`.",
                    "type": "[number, number]|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "pad",
                    "documentation": "The type of padding algorithm.\n- `same` and stride 1: output will be of same size as input,\nregardless of filter size.\n- `valid`: output will be smaller than input if filter is larger\nthan 1x1.\n- For more info, see this guide:\n[https://www.tensorflow.org/api_guides/python/nn#Convolution](\nhttps://www.tensorflow.org/api_guides/python/nn#Convolution)",
                    "type": "'valid'|'same'|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dataFormat",
                    "documentation": ": An optional string from: \"NHWC\", \"NCHW\". Defaults to\n\"NHWC\". Specify the data format of the input and output data. With the\ndefault format \"NHWC\", the data is stored in the order of: [batch,\nheight, width, channels]. Only \"NHWC\" is currently supported.",
                    "type": "'NHWC'|'NCHW'",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dilations",
                    "documentation": "The dilation rates: `[dilationHeight, dilationWidth]`\nin which we sample input values across the height and width dimensions\nin atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\nnumber, then `dilationHeight == dilationWidth`. If it is greater than\n1, then all values of `strides` must be 1.",
                    "type": "[number, number]|number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dimRoundingMode",
                    "documentation": "The rounding mode used when computing output\ndimensions if pad is a number. If none is provided, it will not round\nand error if the output is of fractional size.",
                    "type": "'floor'|'round'|'ceil'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D|Tensor4D",
                "documentation": "Depthwise 2D convolution.\n\nGiven a 4D `input` array and a `filter` array of shape\n`[filterHeight, filterWidth, inChannels, channelMultiplier]` containing\n`inChannels` convolutional filters of depth 1, this op applies a\ndifferent filter to each input channel (expanding from 1 channel to\n`channelMultiplier` channels for each), then concatenates the results\ntogether. The output has `inChannels * channelMultiplier` channels.\n\nSee\n[https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](\n     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)\nfor more details.",
                "fileName": "#458",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/conv.ts#L458-L523",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Convolution"
                },
                "symbolName": "separableConv2d",
                "paramStr": "(x, depthwiseFilter, pointwiseFilter, strides, pad, dilation?, dataFormat?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor, of rank 4 or rank 3, of shape\n`[batch, height, width, inChannels]`. If rank 3, batch of 1 is\nassumed.",
                    "type": "Tensor3D|Tensor4D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "depthwiseFilter",
                    "documentation": "The depthwise filter tensor, rank 4, of shape\n`[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is\nthe filter used in the first step.",
                    "type": "Tensor4D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "pointwiseFilter",
                    "documentation": "The pointwise filter tensor, rank 4, of shape\n`[1, 1, inChannels * channelMultiplier, outChannels]`. This is\nthe filter used in the second step.",
                    "type": "Tensor4D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "strides",
                    "documentation": "The strides of the convolution: `[strideHeight,\nstrideWidth]`. If strides is a single number, then `strideHeight ==\nstrideWidth`.",
                    "type": "[number, number]|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "pad",
                    "documentation": "The type of padding algorithm.\n- `same` and stride 1: output will be of same size as input,\nregardless of filter size.\n- `valid`: output will be smaller than input if filter is larger\nthan 1x1.\n- For more info, see this guide:\n[https://www.tensorflow.org/api_guides/python/nn#Convolution](\nhttps://www.tensorflow.org/api_guides/python/nn#Convolution)",
                    "type": "'valid'|'same'",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dilation",
                    "documentation": "",
                    "type": "[number, number]|number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dataFormat",
                    "documentation": ": An optional string from: \"NHWC\", \"NCHW\". Defaults to\n\"NHWC\". Specify the data format of the input and output data. With the\ndefault format \"NHWC\", the data is stored in the order of: [batch,\nheight, width, channels]. Only \"NHWC\" is currently supported.",
                    "type": "'NHWC'|'NCHW'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D|Tensor4D",
                "documentation": "2-D convolution with separable filters.\n\nPerforms a depthwise convolution that acts separately on channels followed\nby a pointwise convolution that mixes channels. Note that this is\nseparability between dimensions [1, 2] and 3, not spatial separability\nbetween dimensions 1 and 2.\n\nSee\n[https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](\n     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)\nfor more details.",
                "fileName": "#569",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/conv.ts#L569-L631",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Convolution"
                },
                "symbolName": "conv3d",
                "paramStr": "(x, filter, strides, pad, dataFormat?, dilations?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor, of rank 5 or rank 4, of shape\n`[batch, depth, height, width, channels]`. If rank 4,\nbatch of 1 is assumed.",
                    "type": "Tensor4D|Tensor5D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "filter",
                    "documentation": "The filter, rank 5, of shape\n`[filterDepth, filterHeight, filterWidth, inChannels, outChannels]`.\ninChannels must match between input and filter.",
                    "type": "Tensor5D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "strides",
                    "documentation": "The strides of the convolution: `[strideDepth, strideHeight,\nstrideWidth]`.",
                    "type": "[number, number, number]|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "pad",
                    "documentation": "The type of padding algorithm.\n- `same` and stride 1: output will be of same size as input,\nregardless of filter size.\n- `valid`: output will be smaller than input if filter is larger\nthan 1x1.\n- For more info, see this guide:\n[https://www.tensorflow.org/api_guides/python/nn#Convolution](\nhttps://www.tensorflow.org/api_guides/python/nn#Convolution)",
                    "type": "'valid'|'same'",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dataFormat",
                    "documentation": ": An optional string from: \"NHWC\", \"NCHW\". Defaults to\n\"NHWC\". Specify the data format of the input and output data. With the\ndefault format \"NHWC\", the data is stored in the order of: [batch,\ndepth, height, width, channels]. Only \"NHWC\" is currently supported.",
                    "type": "'NHWC'|'NCHW'",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dilations",
                    "documentation": "The dilation rates: `[dilationDepth, dilationHeight,\ndilationWidth]` in which we sample input values across the height\nand width dimensions in atrous convolution. Defaults to `[1, 1, 1]`.\nIf `dilations` is a single number, then\n`dilationDepth == dilationHeight == dilationWidth`. If it is greater\nthan 1, then all values of `strides` must be 1.",
                    "type": "[number, number, number]|number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor4D|Tensor5D",
                "documentation": "Computes a 3D convolution over the input x.",
                "fileName": "#723",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/conv.ts#L723-L781",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Convolution"
                },
                "symbolName": "maxPool",
                "paramStr": "(x, filterSize, strides, pad, dimRoundingMode?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor, of rank 4 or rank 3 of shape\n`[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.",
                    "type": "Tensor3D|Tensor4D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "filterSize",
                    "documentation": "The filter size: `[filterHeight, filterWidth]`. If\n`filterSize` is a single number, then `filterHeight == filterWidth`.",
                    "type": "[number, number]|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "strides",
                    "documentation": "The strides of the pooling: `[strideHeight, strideWidth]`. If\n`strides` is a single number, then `strideHeight == strideWidth`.",
                    "type": "[number, number]|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "pad",
                    "documentation": "The type of padding algorithm.\n- `same` and stride 1: output will be of same size as input,\nregardless of filter size.\n- `valid`: output will be smaller than input if filter is larger\nthan 1x1.\n- For more info, see this guide:\n[https://www.tensorflow.org/api_guides/python/nn#Convolution](\nhttps://www.tensorflow.org/api_guides/python/nn#Convolution)",
                    "type": "'valid'|'same'|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dimRoundingMode",
                    "documentation": "The rounding mode used when computing output\ndimensions if pad is a number. If none is provided, it will not round\nand error if the output is of fractional size.",
                    "type": "'floor'|'round'|'ceil'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D|Tensor4D",
                "documentation": "Computes the 2D max pooling of an image.",
                "fileName": "#122",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/pool.ts#L122-L127",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Convolution"
                },
                "symbolName": "avgPool",
                "paramStr": "(x, filterSize, strides, pad, dimRoundingMode?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor, of rank 4 or rank 3 of shape\n`[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.",
                    "type": "Tensor3D|Tensor4D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "filterSize",
                    "documentation": "The filter size: `[filterHeight, filterWidth]`. If\n`filterSize` is a single number, then `filterHeight == filterWidth`.",
                    "type": "[number, number]|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "strides",
                    "documentation": "The strides of the pooling: `[strideHeight, strideWidth]`. If\n`strides` is a single number, then `strideHeight == strideWidth`.",
                    "type": "[number, number]|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "pad",
                    "documentation": "The type of padding algorithm:\n- `same` and stride 1: output will be of same size as input,\nregardless of filter size.\n- `valid`: output will be smaller than input if filter is larger\nthan 1x1.\n- For more info, see this guide:\n[https://www.tensorflow.org/api_guides/python/nn#Convolution](\nhttps://www.tensorflow.org/api_guides/python/nn#Convolution)",
                    "type": "'valid'|'same'|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dimRoundingMode",
                    "documentation": "The rounding mode used when computing output\ndimensions if pad is a number. If none is provided, it will not round\nand error if the output is of fractional size.",
                    "type": "'floor'|'round'|'ceil'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D|Tensor4D",
                "documentation": "Computes the 2D average pooling of an image.",
                "fileName": "#222",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/pool.ts#L222-L227",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Convolution"
                },
                "symbolName": "pool",
                "paramStr": "(input, windowShape, poolingType, pad, dilations?, strides?)",
                "parameters": [
                  {
                    "name": "input",
                    "documentation": "The input tensor, of rank 4 or rank 3 of shape\n`[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.",
                    "type": "Tensor3D|Tensor4D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "windowShape",
                    "documentation": "The filter size: `[filterHeight, filterWidth]`. If\n`filterSize` is a single number, then `filterHeight == filterWidth`.",
                    "type": "[number, number]|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "poolingType",
                    "documentation": "The type of pooling, either 'max' or 'avg'.",
                    "type": "'avg'|'max'",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "pad",
                    "documentation": "The type of padding algorithm:\n- `same` and stride 1: output will be of same size as input,\nregardless of filter size.\n- `valid`: output will be smaller than input if filter is larger\nthan 1x1.\n- For more info, see this guide:\n[https://www.tensorflow.org/api_guides/python/nn#Convolution](\nhttps://www.tensorflow.org/api_guides/python/nn#Convolution)",
                    "type": "'valid'|'same'|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dilations",
                    "documentation": "The dilation rates: `[dilationHeight, dilationWidth]`\nin which we sample input values across the height and width dimensions\nin dilated pooling. Defaults to `[1, 1]`. If `dilationRate` is a single\nnumber, then `dilationHeight == dilationWidth`. If it is greater than\n1, then all values of `strides` must be 1.",
                    "type": "[number, number]|number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "strides",
                    "documentation": "The strides of the pooling: `[strideHeight, strideWidth]`. If\n`strides` is a single number, then `strideHeight == strideWidth`.",
                    "type": "[number, number]|number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D|Tensor4D",
                "documentation": "Performs an N-D pooling operation",
                "fileName": "#254",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/pool.ts#L254-L312",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Reduction",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Reduction"
                },
                "symbolName": "logSumExp",
                "paramStr": "(x, axis?, keepDims?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension(s) to reduce. If null (the default),\nreduces all dimensions.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "keepDims",
                    "documentation": "If true, retains reduced dimensions with length\nof 1. Defaults to false.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the log(sum(exp(elements across the reduction dimensions)).\n\nReduces the input along the dimensions given in `axis`. Unless `keepDims`\nis true, the rank of the array is reduced by 1 for each entry in `axis`.\nIf `keepDims` is true, the reduced dimensions are retained with length 1.\nIf `axis` has no entries, all dimensions are reduced, and an array with a\nsingle element is returned.\n\n```js\nconst x = tf.tensor1d([1, 2, 3]);\n\nx.logSumExp().print();  // or tf.logSumExp(x)\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\nconst axis = 1;\nx.logSumExp(axis).print();  // or tf.logSumExp(a, axis)\n```",
                "fileName": "#56",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/reduction_ops.ts#L56-L73",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Reduction"
                },
                "symbolName": "sum",
                "paramStr": "(x, axis?, keepDims?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor to compute the sum over. If the dtype is `bool`\nit will be converted to `int32` and the output dtype will be `int32`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension(s) to reduce. By default it reduces\nall dimensions.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "keepDims",
                    "documentation": "If true, retains reduced dimensions with size 1.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the sum of elements across dimensions of a `tf.Tensor`.\n\nReduces the input along the dimensions given in `axes`. Unless `keepDims`\nis true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n`axes`. If `keepDims` is true, the reduced dimensions are retained with\nlength 1. If axes has no entries, all dimensions are reduced, and a\n`tf.Tensor` with a single element is returned.\n\n```js\nconst x = tf.tensor1d([1, 2, 3]);\n\nx.sum().print();  // or tf.sum(x)\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\nconst axis = 1;\nx.sum(axis).print();  // or tf.sum(x, axis)\n```",
                "fileName": "#104",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/reduction_ops.ts#L104-L143",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Reduction"
                },
                "symbolName": "prod",
                "paramStr": "(x, axis?, keepDims?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor to compute the product over. If the dtype is `bool`\nit will be converted to `int32` and the output dtype will be `int32`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension(s) to reduce. By default it reduces\nall dimensions.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "keepDims",
                    "documentation": "If true, retains reduced dimensions with size 1.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the product of elements across dimensions of a `tf.Tensor`.\n\nReduces the input along the dimensions given in `axes`. Unless `keepDims`\nis true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n`axes`. If `keepDims` is true, the reduced dimensions are retained with\nlength 1. If `axes` has no entries, all dimensions are reduced, and a\n`tf.Tensor` with a single element is returned.\n\n```js\nconst x = tf.tensor1d([1, 2, 3]);\n\nx.prod().print();  // or tf.prod(x)\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\nconst axis = 1;\nx.prod(axis).print();  // or tf.prod(x, axis)\n```",
                "fileName": "#174",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/reduction_ops.ts#L174-L198",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Reduction"
                },
                "symbolName": "mean",
                "paramStr": "(x, axis?, keepDims?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension(s) to reduce. By default it reduces\nall dimensions.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "keepDims",
                    "documentation": "If true, retains reduced dimensions with size 1.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the mean of elements across dimensions of a `tf.Tensor`.\n\nReduces `x` along the dimensions given in `axis`. Unless `keepDims` is\ntrue, the rank of the `tf.Tensor` is reduced by 1 for each entry in `axis`.\nIf `keepDims` is true, the reduced dimensions are retained with length 1.\nIf `axis` has no entries, all dimensions are reduced, and a `tf.Tensor` with\na single element is returned.\n\n```js\nconst x = tf.tensor1d([1, 2, 3]);\n\nx.mean().print();  // or tf.mean(a)\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\nconst axis = 1;\nx.mean(axis).print();  // or tf.mean(x, axis)\n```",
                "fileName": "#227",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/reduction_ops.ts#L227-L260",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Reduction"
                },
                "symbolName": "min",
                "paramStr": "(x, axis?, keepDims?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input Tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension(s) to reduce. By default it reduces\nall dimensions.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "keepDims",
                    "documentation": "If true, retains reduced dimensions with size 1.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the minimum value from the input.\n\nReduces the input along the dimensions given in `axes`. Unless `keepDims`\nis true, the rank of the array is reduced by 1 for each entry in `axes`.\nIf `keepDims` is true, the reduced dimensions are retained with length 1.\nIf `axes` has no entries, all dimensions are reduced, and an array with a\nsingle element is returned.\n\n```js\nconst x = tf.tensor1d([1, 2, 3]);\n\nx.min().print();  // or tf.min(x)\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\nconst axis = 1;\nx.min(axis).print();  // or tf.min(x, axis)\n```",
                "fileName": "#311",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/reduction_ops.ts#L311-L333",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Reduction"
                },
                "symbolName": "max",
                "paramStr": "(x, axis?, keepDims?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension(s) to reduce. By default it reduces\nall dimensions.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "keepDims",
                    "documentation": "If true, retains reduced dimensions with size 1.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the maximum of elements across dimensions of a `tf.Tensor`.\n\nReduces the input along the dimensions given in `axes`. Unless `keepDims`\nis true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n`axes`. If `keepDims` is true, the reduced dimensions are retained with\nlength 1. If `axes` has no entries, all dimensions are reduced, and an\n`tf.Tensor` with a single element is returned.\n\n```js\nconst x = tf.tensor1d([1, 2, 3]);\n\nx.max().print();  // or tf.max(x)\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\nconst axis = 1;\nx.max(axis).print();  // or tf.max(x, axis)\n```",
                "fileName": "#363",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/reduction_ops.ts#L363-L385",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Reduction"
                },
                "symbolName": "argMin",
                "paramStr": "(x, axis?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension to reduce. Defaults to 0 (outer-most dimension).",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the indices of the minimum values along an `axis`.\n\nThe result has the same shape as `input` with the dimension along `axis`\nremoved.\n\n```js\nconst x = tf.tensor1d([1, 2, 3]);\n\nx.argMin().print();  // or tf.argMin(x)\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 4, 3], [2, 2]);\n\nconst axis = 1;\nx.argMin(axis).print();  // or tf.argMin(x, axis)\n```",
                "fileName": "#411",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/reduction_ops.ts#L411-L428",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Reduction"
                },
                "symbolName": "argMax",
                "paramStr": "(x, axis?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension to reduce. Defaults to 0 (outer-most dimension).",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the indices of the maximum values along an `axis`.\n\nThe result has the same shape as `input` with the dimension along `axis`\nremoved.\n\n```js\nconst x = tf.tensor1d([1, 2, 3]);\n\nx.argMax().print();  // or tf.argMax(x)\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 4, 3], [2, 2]);\n\nconst axis = 1;\nx.argMax(axis).print();  // or tf.argMax(x, axis)\n```",
                "fileName": "#453",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/reduction_ops.ts#L453-L470",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Reduction"
                },
                "symbolName": "all",
                "paramStr": "(x, axis?, keepDims?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor. Must be of dtype bool.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension(s) to reduce. By default it reduces\nall dimensions.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "keepDims",
                    "documentation": "If true, retains reduced dimensions with size 1.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the logical and of elements across dimensions of a `tf.Tensor`.\n\nReduces the input along the dimensions given in `axes`. Unless `keepDims`\nis true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n`axes`. If `keepDims` is true, the reduced dimensions are retained with\nlength 1. If `axes` has no entries, all dimensions are reduced, and an\n`tf.Tensor` with a single element is returned.\n\n```js\nconst x = tf.tensor1d([1, 1, 1]);\n\nx.all().print();  // or tf.all(x)\n```\n\n```js\nconst x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');\n\nconst axis = 1;\nx.all(axis).print();  // or tf.all(x, axis)\n```",
                "fileName": "#500",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/reduction_ops.ts#L500-L517",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Reduction"
                },
                "symbolName": "any",
                "paramStr": "(x, axis?, keepDims?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor. Must be of dtype bool.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension(s) to reduce. By default it reduces\nall dimensions.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "keepDims",
                    "documentation": "If true, retains reduced dimensions with size 1.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the logical or of elements across dimensions of a `tf.Tensor`.\n\nReduces the input along the dimensions given in `axes`. Unless `keepDims`\nis true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\n`axes`. If `keepDims` is true, the reduced dimensions are retained with\nlength 1. If `axes` has no entries, all dimensions are reduced, and an\n`tf.Tensor` with a single element is returned.\n\n```js\nconst x = tf.tensor1d([1, 1, 1]);\n\nx.any().print();  // or tf.any(x)\n```\n\n```js\nconst x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');\n\nconst axis = 1;\nx.any(axis).print();  // or tf.any(x, axis)\n```",
                "fileName": "#547",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/reduction_ops.ts#L547-L564",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Logical",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Logical"
                },
                "symbolName": "notEqual",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second input tensor. Must have the same dtype as `a`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the truth value of (a != b) element-wise. Supports broadcasting.\n\nWe also expose `tf.notEqualStrict` which has the same signature as this op\nand asserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 2, 3]);\nconst b = tf.tensor1d([0, 2, 3]);\n\na.notEqual(b).print();\n```",
                "fileName": "#44",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/compare.ts#L44-L52",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Logical"
                },
                "symbolName": "less",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second input tensor. Must have the same dtype as `a`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the truth value of (a < b) element-wise. Supports broadcasting.\n\nWe also expose `tf.lessStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 2, 3]);\nconst b = tf.tensor1d([2, 2, 2]);\n\na.less(b).print();\n```",
                "fileName": "#86",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/compare.ts#L86-L94",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Logical"
                },
                "symbolName": "equal",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second input tensor. Must have the same dtype as `a`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the truth value of (a == b) element-wise. Supports broadcasting.\n\nWe also expose `tf.equalStrict` which has the same signature as this op\nand asserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 2, 3]);\nconst b = tf.tensor1d([2, 2, 2]);\n\na.equal(b).print();\n```",
                "fileName": "#128",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/compare.ts#L128-L136",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Logical"
                },
                "symbolName": "lessEqual",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second input tensor. Must have the same dtype as `a`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the truth value of (a <= b) element-wise. Supports broadcasting.\n\nWe also expose `tf.lessEqualStrict` which has the same signature as this op\nand asserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 2, 3]);\nconst b = tf.tensor1d([2, 2, 2]);\n\na.lessEqual(b).print();\n```",
                "fileName": "#162",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/compare.ts#L162-L171",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Logical"
                },
                "symbolName": "greater",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second input tensor. Must have the same dtype as `a`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the truth value of (a > b) element-wise. Supports broadcasting.\n\nWe also expose `tf.greaterStrict` which has the same signature as this\nop and asserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 2, 3]);\nconst b = tf.tensor1d([2, 2, 2]);\n\na.greater(b).print();\n```",
                "fileName": "#198",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/compare.ts#L198-L207",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Logical"
                },
                "symbolName": "greaterEqual",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first input tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second input tensor. Must have the same dtype as `a`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the truth value of (a >= b) element-wise. Supports broadcasting.\n\nWe also expose `tf.greaterEqualStrict` which has the same signature as this\nop and asserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 2, 3]);\nconst b = tf.tensor1d([2, 2, 2]);\n\na.greaterEqual(b).print();\n```",
                "fileName": "#233",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/compare.ts#L233-L245",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Logical"
                },
                "symbolName": "logicalNot",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor. Must be of dtype 'bool'.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the truth value of `NOT x` element-wise.\n\n```js\nconst a = tf.tensor1d([false, true], 'bool');\n\na.logicalNot().print();\n```",
                "fileName": "#40",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/logical_ops.ts#L40-L43",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Logical"
                },
                "symbolName": "logicalAnd",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first input tensor. Must be of dtype bool.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second input tensor. Must be of dtype bool.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the truth value of `a AND b` element-wise. Supports broadcasting.\n\n```js\nconst a = tf.tensor1d([false, false, true, true], 'bool');\nconst b = tf.tensor1d([false, true, false, true], 'bool');\n\na.logicalAnd(b).print();\n```",
                "fileName": "#59",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/logical_ops.ts#L59-L67",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Logical"
                },
                "symbolName": "logicalOr",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first input tensor. Must be of dtype bool.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second input tensor. Must be of dtype bool.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the truth value of `a OR b` element-wise. Supports broadcasting.\n\n```js\nconst a = tf.tensor1d([false, false, true, true], 'bool');\nconst b = tf.tensor1d([false, true, false, true], 'bool');\n\na.logicalOr(b).print();\n```",
                "fileName": "#82",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/logical_ops.ts#L82-L90",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Logical"
                },
                "symbolName": "logicalXor",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first input tensor. Must be of dtype bool.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second input tensor. Must be of dtype bool.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the truth value of `a XOR b` element-wise. Supports broadcasting.\n\n```js\nconst a = tf.tensor1d([false, false, true, true], 'bool');\nconst b = tf.tensor1d([false, true, false, true], 'bool');\n\na.logicalXor(b).print();\n```",
                "fileName": "#106",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/logical_ops.ts#L106-L114",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Logical"
                },
                "symbolName": "where",
                "paramStr": "(condition, a, b)",
                "parameters": [
                  {
                    "name": "condition",
                    "documentation": "The input condition. Must be of dtype bool.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "a",
                    "documentation": "If `condition` is rank 1, `a` may have a higher rank but\nits first dimension must match the size of `condition`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "A tensor with the same shape and type as `a`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the elements, either `a` or `b` depending on the `condition`.\n\nIf the condition is true, select from `a`, otherwise select from `b`.\n\n```js\nconst cond = tf.tensor1d([false, false, true], 'bool');\nconst a = tf.tensor1d([1 , 2, 3]);\nconst b = tf.tensor1d([-1, -2, -3]);\n\na.where(cond, b).print();\n```",
                "fileName": "#135",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/logical_ops.ts#L135-L165",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Logical"
                },
                "symbolName": "whereAsync",
                "paramStr": "(condition)",
                "parameters": [
                  {
                    "name": "condition",
                    "documentation": "",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Promise",
                "documentation": "Returns the coordinates of true elements of condition.\n\nThe coordinates are returned in a 2-D tensor where the first dimension (rows)\nrepresents the number of true elements, and the second dimension (columns)\nrepresents the coordinates of the true elements. Keep in mind, the shape of\nthe output tensor can vary depending on how many true values there are in\ninput. Indices are output in row-major order. The resulting tensor has the\nshape `[numTrueElems, condition.rank]`.\n\nThis is analogous to calling the python `tf.where(cond)` without an x or y.\n\n```js\nconst cond = tf.tensor1d([false, false, true], 'bool');\ntf.whereAsync(cond).then(result => result.print());\n```",
                "fileName": "#185",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/logical_ops.ts#L185-L194",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Arithmetic",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Arithmetic"
                },
                "symbolName": "add",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first `tf.Tensor` to add.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second `tf.Tensor` to add. Must have the same type as `a`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Adds two `tf.Tensor`s element-wise, A + B. Supports broadcasting.\n\nWe also expose `tf.addStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 2, 3, 4]);\nconst b = tf.tensor1d([10, 20, 30, 40]);\n\na.add(b).print();  // or tf.add(a, b)\n```\n\n```js\n// Broadcast add a with b.\nconst a = tf.scalar(5);\nconst b = tf.tensor1d([10, 20, 30, 40]);\n\na.add(b).print();  // or tf.add(a, b)\n```",
                "fileName": "#55",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/binary_ops.ts#L55-L84",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Arithmetic"
                },
                "symbolName": "addN",
                "paramStr": "(tensors)",
                "parameters": [
                  {
                    "name": "tensors",
                    "documentation": "A list of tensors with the same shape and dtype.",
                    "type": "Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.\n\n```js\nconst a = tf.tensor1d([1, 2]);\nconst b = tf.tensor1d([3, 4]);\nconst c = tf.tensor1d([5, 6]);\n\ntf.addN([a, b, c]).print();\n```",
                "fileName": "#99",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/binary_ops.ts#L99-L132",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Arithmetic"
                },
                "symbolName": "sub",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first `tf.Tensor` to subtract from.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second `tf.Tensor` to be subtracted. Must have the same dtype as\n`a`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Subtracts two `tf.Tensor`s element-wise, A - B. Supports broadcasting.\n\nWe also expose `tf.subStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([10, 20, 30, 40]);\nconst b = tf.tensor1d([1, 2, 3, 4]);\n\na.sub(b).print();  // or tf.sub(a, b)\n```\n\n```js\n// Broadcast subtract a with b.\nconst a = tf.tensor1d([10, 20, 30, 40]);\nconst b = tf.scalar(5);\n\na.sub(b).print();  // or tf.sub(a, b)\n```",
                "fileName": "#174",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/binary_ops.ts#L174-L203",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Arithmetic"
                },
                "symbolName": "pow",
                "paramStr": "(base, exp)",
                "parameters": [
                  {
                    "name": "base",
                    "documentation": "The base `tf.Tensor` to pow element-wise.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "exp",
                    "documentation": "The exponent `tf.Tensor` to pow element-wise.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the power of one `tf.Tensor` to another. Supports broadcasting.\n\nGiven a `tf.Tensor` x and a `tf.Tensor` y, this operation computes x^y for\ncorresponding elements in x and y. The result's dtype will be the upcasted\ntype of the `base` and `exp` dtypes.\n\n```js\nconst a = tf.tensor([[2, 3], [4, 5]])\nconst b = tf.tensor([[1, 2], [3, 0]]).toInt();\n\na.pow(b).print();  // or tf.pow(a, b)\n```\n\n```js\nconst a = tf.tensor([[1, 2], [3, 4]])\nconst b = tf.tensor(2).toInt();\n\na.pow(b).print();  // or tf.pow(a, b)\n```\nWe also expose `powStrict` which has the same signature as this op and\nasserts that `base` and `exp` are the same shape (does not broadcast).",
                "fileName": "#248",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/binary_ops.ts#L248-L282",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Arithmetic"
                },
                "symbolName": "mul",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first tensor to multiply.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second tensor to multiply. Must have the same dtype as `a`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Multiplies two `tf.Tensor`s element-wise, A * B. Supports broadcasting.\n\nWe also expose `tf.mulStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 2, 3, 4]);\nconst b = tf.tensor1d([2, 3, 4, 5]);\n\na.mul(b).print();  // or tf.mul(a, b)\n```\n\n```js\n// Broadcast mul a with b.\nconst a = tf.tensor1d([1, 2, 3, 4]);\nconst b = tf.scalar(5);\n\na.mul(b).print();  // or tf.mul(a, b)\n```",
                "fileName": "#322",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/binary_ops.ts#L322-L351",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Arithmetic"
                },
                "symbolName": "div",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first tensor as the numerator.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second tensor as the denominator. Must have the same dtype as\n`a`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.\n\nWe also expose `tf.divStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 4, 9, 16]);\nconst b = tf.tensor1d([1, 2, 3, 4]);\n\na.div(b).print();  // or tf.div(a, b)\n```\n\n```js\n// Broadcast div a with b.\nconst a = tf.tensor1d([2, 4, 6, 8]);\nconst b = tf.scalar(2);\n\na.div(b).print();  // or tf.div(a, b)\n```",
                "fileName": "#395",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/binary_ops.ts#L395-L430",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Arithmetic"
                },
                "symbolName": "floorDiv",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first tensor as the numerator.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second tensor as the denominator. Must have the same dtype as\n`a`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.\nThe result is rounded with floor function.\n\n\n```js\nconst a = tf.tensor1d([1, 4, 9, 16]);\nconst b = tf.tensor1d([1, 2, 3, 4]);\n\na.floorDiv(b).print();  // or tf.div(a, b)\n```\n\n```js\n// Broadcast div a with b.\nconst a = tf.tensor1d([2, 4, 6, 8]);\nconst b = tf.scalar(2);\n\na.floorDiv(b).print();  // or tf.floorDiv(a, b)\n```",
                "fileName": "#457",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/binary_ops.ts#L457-L487",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Arithmetic"
                },
                "symbolName": "mod",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second tensor. Must have the same type as `a`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the mod of a and b element-wise.\n`floor(x / y) * y + mod(x, y) = x`\nSupports broadcasting.\n\nWe also expose `tf.modStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 4, 3, 16]);\nconst b = tf.tensor1d([1, 2, 9, 4]);\n\na.mod(b).print();  // or tf.mod(a, b)\n```\n\n```js\n// Broadcast a mod b.\nconst a = tf.tensor1d([2, 4, 6, 8]);\nconst b = tf.scalar(5);\n\na.mod(b).print();  // or tf.mod(a, b)\n```",
                "fileName": "#530",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/binary_ops.ts#L530-L557",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Arithmetic"
                },
                "symbolName": "minimum",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second tensor. Must have the same type as `a`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the min of a and b (`a < b ? a : b`) element-wise.\nSupports broadcasting.\n\nWe also expose `minimumStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 4, 3, 16]);\nconst b = tf.tensor1d([1, 2, 9, 4]);\n\na.minimum(b).print();  // or tf.minimum(a, b)\n```\n\n```js\n// Broadcast minimum a with b.\nconst a = tf.tensor1d([2, 4, 6, 8]);\nconst b = tf.scalar(5);\n\na.minimum(b).print();  // or tf.minimum(a, b)\n```",
                "fileName": "#599",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/binary_ops.ts#L599-L618",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Arithmetic"
                },
                "symbolName": "maximum",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second tensor. Must have the same type as `a`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the max of a and b (`a > b ? a : b`) element-wise.\nSupports broadcasting.\n\nWe also expose `tf.maximumStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 4, 3, 16]);\nconst b = tf.tensor1d([1, 2, 9, 4]);\n\na.maximum(b).print();  // or tf.maximum(a, b)\n```\n\n```js\n// Broadcast maximum a with b.\nconst a = tf.tensor1d([2, 4, 6, 8]);\nconst b = tf.scalar(5);\n\na.maximum(b).print();  // or tf.maximum(a, b)\n```",
                "fileName": "#660",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/binary_ops.ts#L660-L679",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Arithmetic"
                },
                "symbolName": "squaredDifference",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second tensor. Must have the same type as `a`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns (a - b) * (a - b) element-wise.\nSupports broadcasting.\n\nWe also expose `tf.squaredDifferenceStrict` which has the same signature as\nthis op and asserts that `a` and `b` are the same shape (does not\nbroadcast).\n\n```js\nconst a = tf.tensor1d([1, 4, 3, 16]);\nconst b = tf.tensor1d([1, 2, 9, 4]);\n\na.squaredDifference(b).print();  // or tf.squaredDifference(a, b)\n```\n\n```js\n// Broadcast squared difference  a with b.\nconst a = tf.tensor1d([2, 4, 6, 8]);\nconst b = tf.scalar(5);\n\na.squaredDifference(b).print();  // or tf.squaredDifference(a, b)\n```",
                "fileName": "#722",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/binary_ops.ts#L722-L737",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Segment",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Segment"
                },
                "symbolName": "unsortedSegmentSum",
                "paramStr": "(x, segmentIds, numSegments)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The `tf.Tensor` that will be summed along its segments.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "segmentIds",
                    "documentation": "A `tf.Tensor1D` whose rank is equal to the rank of `x`'s\ndimension along the `axis`.  Maps each element of `x` to a segment.",
                    "type": "Tensor1D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "numSegments",
                    "documentation": "The number of distinct `segmentIds`.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the sum along segments of a `tf.Tensor`.\n\n```js\nconst x = tf.tensor1d([1, 2, 3, 4]);\nconst segmentIds = tf.tensor1d([1, 2, 0, 1], 'int32');\nconst numSegments = 3;\n\nx.unsortedSegmentSum(segmentIds, numSegments).print()\n//or tf.unsortedSegmentSum(x, segmentIds, numSegments)\n```",
                "fileName": "#48",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/segment_ops.ts#L48-L65",
                "isFunction": true
              }
            ]
          },
          {
            "name": "RNN",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "RNN"
                },
                "symbolName": "multiRNNCell",
                "paramStr": "(lstmCells, data, c, h)",
                "parameters": [
                  {
                    "name": "lstmCells",
                    "documentation": "Array of LSTMCell functions.",
                    "type": "(data: Tensor2D, c: Tensor2D, h: Tensor2D): [Tensor2D, Tensor2D][]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "data",
                    "documentation": "The input to the cell.",
                    "type": "Tensor2D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "c",
                    "documentation": "Array of previous cell states.",
                    "type": "Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "h",
                    "documentation": "Array of previous cell outputs.",
                    "type": "Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "[Tensor2D[], Tensor2D[]]",
                "documentation": "Computes the next states and outputs of a stack of LSTMCells.\n\nEach cell output is used as input to the next cell.\n\nReturns `[cellState, cellOutput]`.\n\nDerived from tf.contrib.rn.MultiRNNCell.",
                "fileName": "#45",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/lstm.ts#L45-L68",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "RNN"
                },
                "symbolName": "basicLSTMCell",
                "paramStr": "(forgetBias, lstmKernel, lstmBias, data, c, h)",
                "parameters": [
                  {
                    "name": "forgetBias",
                    "documentation": "Forget bias for the cell.",
                    "type": "Scalar|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "lstmKernel",
                    "documentation": "The weights for the cell.",
                    "type": "Tensor2D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "lstmBias",
                    "documentation": "The bias for the cell.",
                    "type": "Tensor1D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "data",
                    "documentation": "The input to the cell.",
                    "type": "Tensor2D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "c",
                    "documentation": "Previous cell state.",
                    "type": "Tensor2D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "h",
                    "documentation": "Previous cell output.",
                    "type": "Tensor2D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "[Tensor2D, Tensor2D]",
                "documentation": "Computes the next state and output of a BasicLSTMCell.\n\nReturns `[newC, newH]`.\n\nDerived from tf.contrib.rnn.BasicLSTMCell.",
                "fileName": "#85",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/lstm.ts#L85-L115",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Moving Average",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Moving Average"
                },
                "symbolName": "movingAverage",
                "paramStr": "(v, x, decay, step?, zeroDebias?)",
                "parameters": [
                  {
                    "name": "v",
                    "documentation": "The current moving average value.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "x",
                    "documentation": "New input value, must have the same shape and dtype as `v`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "decay",
                    "documentation": "The decay factor. Typical values are 0.95 and 0.99.",
                    "type": "number|Scalar",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "step",
                    "documentation": "Step count.",
                    "type": "number|Scalar",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "zeroDebias",
                    "documentation": ": Whether zeroDebias is to be performed (default: `true`).",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Compute the moving average of a variable.\n\nWithout zeroDebias, the moving average operation is defined by:\n   `v += delta`\nwhere\n   `delta = (1 - decay) * (x - v)`\n\nWith zeroDebias (default), the `delta` term is scaled to debias the\neffect of the (assumed) zero-initialization of `v`.\n   `delta /= (1 - decay ^ step)`\n\nFor more details on the zero-debiasing algorithm, see:\n   https://arxiv.org/abs/1412.6980\n\nNote that this function is completely stateless and does not keep track of\nstep count. The step count needs to be maintained by the caller and passed\nin as `step`.",
                "fileName": "#54",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/moving_average.ts#L54-L75",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Slicing and Joining",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Slicing and Joining"
                },
                "symbolName": "stridedSlice",
                "paramStr": "(x, begin, end, strides, beginMask?, endMask?, ellipsisMask?, newAxisMask?, shrinkAxisMask?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The tensor to stride slice.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "begin",
                    "documentation": "The coordinates to start the slice from.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "end",
                    "documentation": ": The coordinates to end the slice at.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "strides",
                    "documentation": ": The size of the slice.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "beginMask",
                    "documentation": ": If the ith bit of begin_mask is set, begin[i] is ignored\nand the fullest possible range in that dimension is used instead.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "endMask",
                    "documentation": ": If the ith bit of end_mask is set, end[i] is ignored\nand the fullest possible range in that dimension is used instead.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "ellipsisMask",
                    "documentation": "",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "newAxisMask",
                    "documentation": "",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "shrinkAxisMask",
                    "documentation": ": a bitmask where bit i implies that\nthe ith specification should shrink the dimensionality. begin and end must\nimply a slice of size 1 in the dimension.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Extracts a strided slice of a tensor.\n\nRoughly speaking, this op extracts a slice of size (end-begin)/stride from\nthe given input_ tensor. Starting at the location specified by begin the\nslice continues by adding stride to the index until all dimensions are not\nless than end. Note that a stride can be negative, which causes a reverse\nslice.\n\n```js\nt = tf.tensor3d([1, 1, 1 ,2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6],\n    [3, 2, 3]);\nt.stridedSlice([1, 0, 0], [2, 1, 3], [1, 1, 1]).print()  // [[[3, 3, 3]]]\nt.stridedSlice([1, 0, 0], [2, 2, 3], [1, 1, 1]).print()  // [[[3, 3, 3],\n                                                     // [4, 4, 4]]]\nt.stridedSlice([1, -1, 0], [2, -3, 3], [1, -1, 1]).print() // [[[4, 4, 4],\n                                                     // [3, 3, 3]]]\n```",
                "fileName": "#58",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/strided_slice.ts#L58-L83",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Slicing and Joining"
                },
                "symbolName": "scatterND",
                "paramStr": "(indices, updates, shape)",
                "parameters": [
                  {
                    "name": "indices",
                    "documentation": "The tensor contains the indices into the output tensor.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "updates",
                    "documentation": "The tensor contains the value for the indices.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "shape",
                    "documentation": ": The shape of the output tensor.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Creates a new tensor by applying sparse updates to individual\nvalues or slices within a zero tensor of the given shape tensor according to\nindices. This operator is the inverse of the `tf.gatherND` operator which\nextracts values or slices from a given tensor.\n\n```js\nconst indices = tf.tensor2d([[4], [3], [1], [7]]);\nconst updates = tf.tensor2d([9, 10, 11, 12]);\nconst shape = [8];\ntf.scatterND(indices, updates, shape]).print() //[0, 11, 0, 10, 9, 0, 0, 12]\n```",
                "fileName": "#44",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/scatter_nd.ts#L44-L54",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Slicing and Joining"
                },
                "symbolName": "gatherND",
                "paramStr": "(x, indices)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The tensor from which to gather values.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "indices",
                    "documentation": "Index tensor, must be of type int32.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Gather slices from input tensor into a Tensor with shape specified by\n`indices`.\n\n`indices` is an K-dimensional integer tensor, best thought of as a\n(K-1)-dimensional tensor of indices into input, where each element defines a\nslice of input:\noutput[\\\\(i_0, ..., i_{K-2}\\\\)] = input[indices[\\\\(i_0, ..., i_{K-2}\\\\)]]\n\nWhereas in `tf.gather`, `indices` defines slices into the first dimension of\ninput, in `tf.gatherND`, `indices` defines slices into the first N dimensions\nof input, where N = indices.shape[-1].\n\nThe last dimension of indices can be at most the rank of input:\nindices.shape[-1] <= input.rank\n\nThe last dimension of `indices` corresponds to elements\n(if indices.shape[-1] == input.rank) or slices\n(if indices.shape[-1] < input.rank) along dimension indices.shape[-1] of\ninput.\nThe output tensor has shape\nindices.shape[:-1] + input.shape[indices.shape[-1]:]\n\nNote that on CPU, if an out of bound index is found, an error is returned. On\nGPU, if an out of bound index is found, a 0 is stored in the corresponding\noutput value.\n\n```js\nconst indices = tf.tensor2d([0, 1, 1, 0], [2,2], 'int32');\nconst input = tf.tensor2d([9, 10, 11, 12], [2, 2]);\ntf.gatherND(input, indices).print() //[10, 11]\n```",
                "fileName": "#60",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/gather_nd.ts#L60-L67",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Evaluation",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Evaluation"
                },
                "symbolName": "topk",
                "paramStr": "(x, k?, sorted?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "1-D or higher `tf.Tensor` with last dimension being at least `k`.",
                    "type": "Tensor|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "k",
                    "documentation": "Number of top elements to look for along the last dimension.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "sorted",
                    "documentation": "If true, the resulting `k` elements will be sorted by the\nvalues in descending order.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "{values: Tensor, indices: Tensor}",
                "documentation": "Finds the values and indices of the `k` largest entries along the last\ndimension.\n\nIf the input is a vector (rank=1), finds the k largest entries in the vector\nand outputs their values and indices as vectors. Thus values[j] is the j-th\nlargest entry in input, and its index is indices[j].\nFor higher rank inputs, computes the top k entries along the last dimension.\n\nIf two elements are equal, the lower-index element appears first.\n\n```js\nconst a = tf.tensor2d([[1, 5], [4, 3]]);\nconst {values, indices} = tf.topk(a);\nvalues.print();\nindices.print();\n```",
                "fileName": "#47",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/topk.ts#L47-L63",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Evaluation"
                },
                "symbolName": "confusionMatrix",
                "paramStr": "(labels, predictions, numClasses)",
                "parameters": [
                  {
                    "name": "labels",
                    "documentation": "The target labels, assumed to be 0-based integers\nfor the classes. The shape is `[numExamples]`, where\n`numExamples` is the number of examples included.",
                    "type": "Tensor1D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "predictions",
                    "documentation": "The predicted classes, assumed to be\n0-based integers for the classes. Must have the same shape as `labels`.",
                    "type": "Tensor1D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "numClasses",
                    "documentation": "Number of all classes, as an integer.\nIts value must be larger than the largest element in `labels` and\n`predictions`.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor2D",
                "documentation": "Computes the confusion matrix from true labels and predicted labels.\n\n```js\nconst labels = tf.tensor1d([0, 1, 2, 1, 0], 'int32');\nconst predictions = tf.tensor1d([0, 2, 2, 1, 0], 'int32');\nconst numClasses = 3;\nconst out = tf.math.confusionMatrix(labels, predictions, numClasses);\nout.print();\n// Expected output matrix:\n// [[2, 0, 0],\n//  [0, 1, 1],\n//  [0, 0, 1]]\n```",
                "fileName": "#54",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/confusion_matrix.ts#L54-L87",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Spectral",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Spectral",
                  "namespace": "spectral"
                },
                "symbolName": "fft",
                "namespace": "spectral",
                "paramStr": "(input)",
                "parameters": [
                  {
                    "name": "input",
                    "documentation": "The complex input to compute an fft over.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Fast Fourier transform.\n\nComputes the 1-dimensional discrete Fourier transform over the inner-most\ndimension of input.\n\n```js\nconst real = tf.tensor1d([1, 2, 3]);\nconst imag = tf.tensor1d([1, 2, 3]);\nconst x = tf.complex(real, imag);\n\nx.fft().print();  // tf.spectral.fft(x).print();\n```",
                "fileName": "#43",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/spectral_ops.ts#L43-L57",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Spectral",
                  "namespace": "spectral"
                },
                "symbolName": "ifft",
                "namespace": "spectral",
                "paramStr": "(input)",
                "parameters": [
                  {
                    "name": "input",
                    "documentation": "The complex input to compute an ifft over.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Inverse fast Fourier transform.\n\nComputes the inverse 1-dimensional discrete Fourier transform over the\ninner-most dimension of input.\n\n```js\nconst real = tf.tensor1d([1, 2, 3]);\nconst imag = tf.tensor1d([1, 2, 3]);\nconst x = tf.complex(real, imag);\n\nx.ifft().print();  // tf.spectral.ifft(x).print();\n```",
                "fileName": "#77",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/spectral_ops.ts#L77-L91",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Spectral",
                  "namespace": "spectral"
                },
                "symbolName": "rfft",
                "namespace": "spectral",
                "paramStr": "(input)",
                "parameters": [
                  {
                    "name": "input",
                    "documentation": "The real value input to compute an rfft over.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Real value input fast Fourier transform.\n\nComputes the 1-dimensional discrete Fourier transform over the\ninner-most dimension of the real input.\n\n```js\nconst real = tf.tensor1d([1, 2, 3]);\n\nx.rfft().print();\n```",
                "fileName": "#109",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/spectral_ops.ts#L109-L136",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Spectral",
                  "namespace": "spectral"
                },
                "symbolName": "irfft",
                "namespace": "spectral",
                "paramStr": "(input)",
                "parameters": [
                  {
                    "name": "input",
                    "documentation": "The real value input to compute an irfft over.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Inversed real value input fast Fourier transform.\n\nComputes the 1-dimensional inversed discrete Fourier transform over the\ninner-most dimension of the real input.\n\n```js\nconst real = tf.tensor1d([1, 2, 3]);\n\nx.irfft().print();\n```",
                "fileName": "#154",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/spectral_ops.ts#L154-L182",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Linear Algebra",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Linear Algebra",
                  "namespace": "linalg"
                },
                "symbolName": "gramSchmidt",
                "namespace": "linalg",
                "paramStr": "(xs)",
                "parameters": [
                  {
                    "name": "xs",
                    "documentation": "The vectors to be orthogonalized, in one of the two following\nformats:\n- An Array of `tf.Tensor1D`.\n- A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows\nof `xs`.\nIn each case, all the vectors must have the same length and the length\nmust be greater than or equal to the number of vectors.",
                    "type": "Tensor1D[]|Tensor2D",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor1D[]|Tensor2D",
                "documentation": "Gram-Schmidt orthogonalization.\n\n```js\nconst x = tf.tensor2d([[1, 2], [3, 4]]);\nlet y = tf.linalg.gramSchmidt(x);\ny.print();\nconsole.log('Othogonalized:');\ny.dot(y.transpose()).print();  // should be nearly the identity matrix.\nconsole.log('First row direction maintained:');\nconsole.log(y.get(0, 1) / y.get(0, 0));  // should be nearly 2.\n```",
                "fileName": "#63",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/linalg_ops.ts#L63-L107",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Linear Algebra",
                  "namespace": "linalg"
                },
                "symbolName": "qr",
                "namespace": "linalg",
                "paramStr": "(x, fullMatrices?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The `tf.Tensor` to be QR-decomposed. Must have rank >= 2. Suppose\nit has the shape `[..., M, N]`.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "fullMatrices",
                    "documentation": "An optional boolean parameter. Defaults to `false`.\nIf `true`, compute full-sized `Q`. If `false` (the default),\ncompute only the leading N columns of `Q` and `R`.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "[Tensor, Tensor]",
                "documentation": "Compute QR decomposition of m-by-n matrix using Householder transformation.\n\nImplementation based on\n   [http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf]\n(http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf)\n\n```js\nconst a = tf.tensor2d([[1, 2], [3, 4]]);\nlet [q, r] = tf.linalg.qr(a);\nconsole.log('Q');\nq.print();\nconsole.log('R');\nr.print();\nconsole.log('Orthogonalized');\nq.dot(q.transpose()).print()  // should be nearly the identity matrix.\nconsole.log('Reconstructed');\nq.dot(r).print(); // should be nearly [[1, 2], [3, 4]];\n```",
                "fileName": "#153",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/linalg_ops.ts#L153-L184",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Images",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Images",
                  "namespace": "image"
                },
                "symbolName": "resizeBilinear",
                "namespace": "image",
                "paramStr": "(images, size, alignCorners?)",
                "parameters": [
                  {
                    "name": "images",
                    "documentation": "The images, of rank 4 or rank 3, of shape\n`[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.",
                    "type": "Tensor3D|Tensor4D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "size",
                    "documentation": "The new shape `[newHeight, newWidth]` to resize the\nimages to. Each channel is resized individually.",
                    "type": "[number, number]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "alignCorners",
                    "documentation": "Defaults to False. If true, rescale\ninput by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\ncorners of images and resized images. If false, rescale by\n`new_height / height`. Treat similarly the width dimension.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D|Tensor4D",
                "documentation": "Bilinear resize a batch of 3D images to a new shape.",
                "fileName": "#40",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/image_ops.ts#L40-L78",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Images",
                  "namespace": "image"
                },
                "symbolName": "resizeNearestNeighbor",
                "namespace": "image",
                "paramStr": "(images, size, alignCorners?)",
                "parameters": [
                  {
                    "name": "images",
                    "documentation": "The images, of rank 4 or rank 3, of shape\n`[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.",
                    "type": "Tensor3D|Tensor4D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "size",
                    "documentation": "The new shape `[newHeight, newWidth]` to resize the\nimages to. Each channel is resized individually.",
                    "type": "[number, number]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "alignCorners",
                    "documentation": "Defaults to False. If true, rescale\ninput by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\ncorners of images and resized images. If false, rescale by\n`new_height / height`. Treat similarly the width dimension.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D|Tensor4D",
                "documentation": "NearestNeighbor resize a batch of 3D images to a new shape.",
                "fileName": "#93",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/image_ops.ts#L93-L136",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Images",
                  "namespace": "image"
                },
                "symbolName": "nonMaxSuppression",
                "namespace": "image",
                "paramStr": "(boxes, scores, maxOutputSize, iouThreshold?, scoreThreshold?)",
                "parameters": [
                  {
                    "name": "boxes",
                    "documentation": "a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n`[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\nthe bounding box.",
                    "type": "Tensor2D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "scores",
                    "documentation": "a 1d tensor providing the box scores of shape `[numBoxes]`.",
                    "type": "Tensor1D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "maxOutputSize",
                    "documentation": "The maximum number of boxes to be selected.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "iouThreshold",
                    "documentation": "A float representing the threshold for deciding whether\nboxes overlap too much with respect to IOU. Must be between [0, 1].\nDefaults to 0.5 (50% box overlap).",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "scoreThreshold",
                    "documentation": "A threshold for deciding when to remove boxes based\non score. Defaults to -inf, which means any score is accepted.",
                    "type": "any",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor1D",
                "documentation": "Performs non maximum suppression of bounding boxes based on\niou (intersection over union)",
                "fileName": "#155",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/image_ops.ts#L155-L172",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Images",
                  "namespace": "image"
                },
                "symbolName": "cropAndResize",
                "namespace": "image",
                "paramStr": "(image, boxes, boxInd, cropSize, method?, extrapolationValue?)",
                "parameters": [
                  {
                    "name": "image",
                    "documentation": "4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,\nwhere imageHeight and imageWidth must be positive, specifying the\nbatch of images from which to take crops",
                    "type": "Tensor4D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "boxes",
                    "documentation": "2d float32 tensor of shape `[numBoxes, 4]`. Each entry is\n`[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized\ncoordinates of the box in the boxInd[i]'th image in the batch",
                    "type": "Tensor2D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "boxInd",
                    "documentation": "1d int32 tensor of shape `[numBoxes]` with values in range\n`[0, batch)` that specifies the image that the `i`-th box refers to.",
                    "type": "Tensor1D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "cropSize",
                    "documentation": "1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`\nspecifying the size to which all crops are resized to.",
                    "type": "[number, number]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "method",
                    "documentation": "Optional string from `'bilinear' | 'nearest'`,\ndefaults to bilinear, which specifies the sampling method for resizing",
                    "type": "'bilinear'|'nearest'",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "extrapolationValue",
                    "documentation": "A threshold for deciding when to remove boxes based\non score. Defaults to 0.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor4D",
                "documentation": "Extracts crops from the input image tensor and resizes them using bilinear\nsampling or nearest neighbor sampling (possibly with aspect ratio change)\nto a common output size specified by crop_size.",
                "fileName": "#253",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/image_ops.ts#L253-L298",
                "isFunction": true
              }
            ]
          }
        ]
      },
      {
        "name": "Visualization",
        "description": "",
        "subheadings": [
          {
            "symbols": [
              {
                "docInfo": {
                  "heading": "Visualization"
                },
                "symbolName": "toPixels",
                "paramStr": "(img, canvas?)",
                "parameters": [
                  {
                    "name": "img",
                    "documentation": "A rank-2 or rank-3 tensor. If rank-2, draws grayscale. If\nrank-3, must have depth of 1, 3 or 4. When depth of 1, draws\ngrayscale. When depth of 3, we draw with the first three components of\nthe depth dimension corresponding to r, g, b and alpha = 1. When depth of\n4, all four components of the depth dimension correspond to r, g, b, a.",
                    "type": "Tensor2D|Tensor3D|TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "canvas",
                    "documentation": "The canvas to draw to.",
                    "type": "HTMLCanvasElement",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Promise",
                "documentation": "Draws a `tf.Tensor` of pixel values to a byte array or optionally a\ncanvas.\n\nWhen the dtype of the input is 'float32', we assume values in the range\n[0-1]. Otherwise, when input is 'int32', we assume values in the range\n[0-255].\n\nReturns a promise that resolves when the canvas has been drawn to.",
                "fileName": "#356",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/ops/array_ops.ts#L356-L442",
                "isFunction": true
              }
            ]
          }
        ]
      },
      {
        "name": "Models",
        "description": "",
        "subheadings": [
          {
            "name": "Management",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Management",
                  "namespace": "io"
                },
                "symbolName": "listModels",
                "namespace": "io",
                "paramStr": "()",
                "parameters": [],
                "returnType": "Promise",
                "documentation": "List all models stored in registered storage mediums.\n\nFor a web browser environment, the registered mediums are Local Storage and\nIndexedDB.\n\n```js\n// First create and save a model.\nconst model = tf.sequential();\nmodel.add(tf.layers.dense(\n     {units: 1, inputShape: [10], activation: 'sigmoid'}));\nawait model.save('localstorage://demo/management/model1');\n\n// Then list existing models.\nconsole.log(JSON.stringify(await tf.io.listModels()));\n\n// Delete the model.\nawait tf.io.removeModel('localstorage://demo/management/model1');\n\n// List models again.\nconsole.log(JSON.stringify(await tf.io.listModels()));\n```",
                "fileName": "#191",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/io/model_management.ts#L191-L203",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Management",
                  "namespace": "io"
                },
                "symbolName": "removeModel",
                "namespace": "io",
                "paramStr": "(url)",
                "parameters": [
                  {
                    "name": "url",
                    "documentation": "A URL to a stored model, with a scheme prefix, e.g.,\n'localstorage://my-model-1', 'indexeddb://my/model/2'.",
                    "type": "string",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Promise",
                "documentation": "Remove a model specified by URL from a reigstered storage medium.\n\n```js\n// First create and save a model.\nconst model = tf.sequential();\nmodel.add(tf.layers.dense(\n     {units: 1, inputShape: [10], activation: 'sigmoid'}));\nawait model.save('localstorage://demo/management/model1');\n\n// Then list existing models.\nconsole.log(JSON.stringify(await tf.io.listModels()));\n\n// Delete the model.\nawait tf.io.removeModel('localstorage://demo/management/model1');\n\n// List models again.\nconsole.log(JSON.stringify(await tf.io.listModels()));\n```",
                "fileName": "#232",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/io/model_management.ts#L232-L236",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Management",
                  "namespace": "io"
                },
                "symbolName": "copyModel",
                "namespace": "io",
                "paramStr": "(sourceURL, destURL)",
                "parameters": [
                  {
                    "name": "sourceURL",
                    "documentation": "Source URL of copying.",
                    "type": "string",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "destURL",
                    "documentation": "Destination URL of copying.",
                    "type": "string",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Promise",
                "documentation": "Copy a model from one URL to another.\n\nThis function supports:\n\n1. Copying within a storage medium, e.g.,\n    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`\n2. Copying between two storage mediums, e.g.,\n    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`\n\n```js\n// First create and save a model.\nconst model = tf.sequential();\nmodel.add(tf.layers.dense(\n     {units: 1, inputShape: [10], activation: 'sigmoid'}));\nawait model.save('localstorage://demo/management/model1');\n\n// Then list existing models.\nconsole.log(JSON.stringify(await tf.io.listModels()));\n\n// Copy the model, from Local Storage to IndexedDB.\nawait tf.io.copyModel(\n     'localstorage://demo/management/model1',\n     'indexeddb://demo/management/model1');\n\n// List models again.\nconsole.log(JSON.stringify(await tf.io.listModels()));\n\n// Remove both models.\nawait tf.io.removeModel('localstorage://demo/management/model1');\nawait tf.io.removeModel('indexeddb://demo/management/model1');\n```",
                "fileName": "#279",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/io/model_management.ts#L279-L283",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Management",
                  "namespace": "io"
                },
                "symbolName": "moveModel",
                "namespace": "io",
                "paramStr": "(sourceURL, destURL)",
                "parameters": [
                  {
                    "name": "sourceURL",
                    "documentation": "Source URL of moving.",
                    "type": "string",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "destURL",
                    "documentation": "Destination URL of moving.",
                    "type": "string",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Promise",
                "documentation": "Move a model from one URL to another.\n\nThis function supports:\n\n1. Moving within a storage medium, e.g.,\n    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`\n2. Moving between two storage mediums, e.g.,\n    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`\n\n```js\n// First create and save a model.\nconst model = tf.sequential();\nmodel.add(tf.layers.dense(\n     {units: 1, inputShape: [10], activation: 'sigmoid'}));\nawait model.save('localstorage://demo/management/model1');\n\n// Then list existing models.\nconsole.log(JSON.stringify(await tf.io.listModels()));\n\n// Move the model, from Local Storage to IndexedDB.\nawait tf.io.moveModel(\n     'localstorage://demo/management/model1',\n     'indexeddb://demo/management/model1');\n\n// List models again.\nconsole.log(JSON.stringify(await tf.io.listModels()));\n\n// Remove the moved model.\nawait tf.io.removeModel('indexeddb://demo/management/model1');\n```",
                "fileName": "#325",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/io/model_management.ts#L325-L329",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Loading",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Loading",
                  "namespace": "io"
                },
                "symbolName": "browserDownloads",
                "namespace": "io",
                "paramStr": "(fileNamePrefix?)",
                "parameters": [
                  {
                    "name": "fileNamePrefix",
                    "documentation": "Prefix name of the files to be downloaded. For use with\n`tf.Model`, `fileNamePrefix` should follow either of the following two\nformats:\n1. `null` or `undefined`, in which case the default file\nnames will be used:\n- 'model.json' for the JSON file containing the model topology and\nweights manifest.\n- 'model.weights.bin' for the binary file containing the binary weight\nvalues.\n2. A single string or an Array of a single string, as the file name prefix.\nFor example, if `'foo'` is provided, the downloaded JSON\nfile and binary weights file will be named 'foo.json' and\n'foo.weights.bin', respectively.",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "IOHandler",
                "documentation": "Creates an IOHandler that triggers file downloads from the browser.\n\nThe returned `IOHandler` instance can be used as model exporting methods such\nas `tf.Model.save` and supports only saving.\n\n```js\nconst model = tf.sequential();\nmodel.add(tf.layers.dense(\n     {units: 1, inputShape: [10], activation: 'sigmoid'}));\nconst saveResult = await model.save('downloads://mymodel'));\n// This will trigger downloading of two files:\n//   'mymodel.json' and 'mymodel.weights.bin'.\nconsole.log(saveResult);\n```",
                "fileName": "#279",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/io/browser_files.ts#L279-L281",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Loading",
                  "namespace": "io"
                },
                "symbolName": "browserFiles",
                "namespace": "io",
                "paramStr": "(files)",
                "parameters": [
                  {
                    "name": "files",
                    "documentation": "`File`s to load from. Currently, this function supports only\nloading from files that contain Keras-style models (i.e., `tf.Model`s), for\nwhich an `Array` of `File`s is expected (in that order):\n- A JSON file containing the model topology and weight manifest.\n- Optionally, One or more binary files containing the binary weights.\nThese files must have names that match the paths in the `weightsManifest`\ncontained by the aforementioned JSON file, or errors will be thrown\nduring loading. These weights files have the same format as the ones\ngenerated by `tensorflowjs_converter` that comes with the `tensorflowjs`\nPython PIP package. If no weights files are provided, only the model\ntopology will be loaded from the JSON file above.",
                    "type": "File[]",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "IOHandler",
                "documentation": "Creates an IOHandler that loads model artifacts from user-selected files.\n\nThis method can be used for loading from files such as user-selected files\nin the browser.\nWhen used in conjunction with `tf.loadModel`, an instance of `tf.Model`\n(Keras-style) can be constructed from the loaded artifacts.\n\n```js\n// Note: This code snippet won't run properly without the actual file input\n//   elements in the HTML DOM.\n\n// Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n// elements.\nconst uploadJSONInput = document.getElementById('upload-json');\nconst uploadWeightsInput = document.getElementById('upload-weights');\nconst model = await tfl.loadModel(tf.io.browserFiles(\n     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n```",
                "fileName": "#317",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/io/browser_files.ts#L317-L319",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Serialization",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Serialization"
                },
                "symbolName": "registerClass",
                "paramStr": "(cls)",
                "parameters": [
                  {
                    "name": "cls",
                    "documentation": "The class to be registered. It must have a public static member\ncalled `className` defined and the value must be a non-empty string.",
                    "type": "SerializableConstructor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "void",
                "documentation": "Register a class with the serialization map of TensorFlow.js.\n\nThis is often used for registering custom Layers, so they can be\nserialized and deserialized.\n\nExample:\n\n```js\nclass MyCustomLayer extends tf.layers.Layer {\n   static className = 'MyCustomLayer';\n\n   constructor(config) {\n     super(config);\n   }\n}\ntf.serialization.registerClass(MyCustomLayer);\n```",
                "fileName": "#159",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.14.5/src/serialization.ts#L159-L175",
                "isFunction": true
              }
            ]
          }
        ]
      }
    ]
  },
  "docLinkAliases": {
    "Scalar": "Tensor",
    "Tensor1D": "Tensor",
    "Tensor2D": "Tensor",
    "Tensor3D": "Tensor",
    "Tensor4D": "Tensor",
    "Tensor5D": "Tensor",
    "Tensor6D": "Tensor",
    "AdadeltaOptimizer": "Optimizer",
    "AdagradOptimizer": "Optimizer",
    "SGDOptimizer": "Optimizer",
    "MomentumOptimizer": "Optimizer",
    "RMSPropOptimizer": "Optimizer"
  }
}