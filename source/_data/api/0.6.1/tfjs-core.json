{
  "docs": {
    "headings": [
      {
        "name": "Performance",
        "description": "",
        "subheadings": [
          {
            "name": "Timing",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Performance",
                  "subheading": "Timing"
                },
                "symbolName": "nextFrame",
                "paramStr": "()",
                "parameters": [],
                "returnType": "Promise",
                "documentation": "Returns a promise that resolve when a requestAnimationFrame has completed.\n\nThis is simply a sugar method so that users can do the following:\n`await tf.nextFrame();`",
                "fileName": "#26",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/browser_util.ts#L26-L29",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Performance",
                  "subheading": "Timing"
                },
                "symbolName": "time",
                "paramStr": "(f)",
                "parameters": [
                  {
                    "name": "f",
                    "documentation": "The function to execute and time.",
                    "type": "() => void",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Promise",
                "documentation": "Executes `f()` and returns a promise that resolves with timing\ninformation.\n\nThe result is an object with the following properties:\n\n- `wallMs`: Wall execution time.\n- `kernelMs`: Kernel execution time, ignoring data transfer.\n- On `WebGL` The following additional properties exist:\n   - `uploadWaitMs`: CPU blocking time on texture uploads.\n   - `downloadWaitMs`: CPU blocking time on texture downloads (readPixels).\n\n```js\nconst x = tf.randomNormal([20, 20]);\nconst time = await tf.time(() => x.matMul(x));\n\nconsole.log(`kernelMs: ${time.kernelMs}, wallTimeMs: ${time.wallMs}`);\n```",
                "fileName": "#172",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tracking.ts#L172-L175",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Memory",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Performance",
                  "subheading": "Memory"
                },
                "symbolName": "tidy",
                "paramStr": "(nameOrFn, fn?, gradMode?)",
                "parameters": [
                  {
                    "name": "nameOrFn",
                    "documentation": "The name of the closure, or the function to execute.\nIf a name is provided, the 2nd argument should be the function.\nIf debug mode is on, the timing and the memory usage of the function\nwill be tracked and displayed on the console using the provided name.",
                    "type": "string|Function",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "fn",
                    "documentation": "The function to execute.",
                    "type": "Function",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "gradMode",
                    "documentation": "If true, starts a tape and doesn't dispose tensors.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "void|number|string|Tensor|Tensor[]|{[key:\nstring]:Tensor|number|string}",
                "documentation": "Executes the provided function `f` and after it is executed, cleans up all\nintermediate tensors allocated by `f` except those returned by `f`.\n`f` must not return a Promise (async functions not allowed).\nThe returned result can be a complex object, however tidy only walks the\ntop-level properties (depth 1) of that object to search for tensors, or\nlists of tensors that need to be tracked in the parent scope.\n\nUsing this method helps avoid memory leaks. In general, wrap calls to\noperations in `tidy` for automatic memory cleanup.\n\nWhen in safe mode, you must enclose all `Tensor` creation and ops\ninside a `tidy` to prevent memory leaks.\n\n```js\n// y = 2 ^ 2 + 1\nconst y = tf.tidy(() => {\n   // a, b, and one will be cleaned up when the tidy ends.\n   const one = tf.scalar(1);\n   const a = tf.scalar(2);\n   const b = a.square();\n\n   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\n\n   // The value returned inside the tidy function will return\n   // through the tidy, in this case to the variable y.\n   return b.add(one);\n});\n\nconsole.log('numTensors (outside tidy): ' + tf.memory().numTensors);\ny.print();\n```",
                "fileName": "#66",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tracking.ts#L66-L99",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Performance",
                  "subheading": "Memory"
                },
                "symbolName": "keep",
                "paramStr": "(result)",
                "parameters": [
                  {
                    "name": "result",
                    "documentation": "The tensor to keep from being disposed.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Keeps a `Tensor` generated inside a `tidy` from being disposed\nautomatically.\n\n```js\nlet b;\nconst y = tf.tidy(() => {\n   const one = tf.scalar(1);\n   const a = tf.scalar(2);\n\n   // b will not be cleaned up by the tidy. a and one will be cleaned up\n   // when the tidy ends.\n   b = tf.keep(a.square());\n\n   console.log('numTensors (in tidy): ' + tf.memory().numTensors);\n\n   // The value returned inside the tidy function will return\n   // through the tidy, in this case to the variable y.\n   return b.add(one);\n});\n\nconsole.log('numTensors (outside tidy): ' + tf.memory().numTensors);\nconsole.log('y:');\ny.print();\nconsole.log('b:');\nb.print();\n```",
                "fileName": "#146",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tracking.ts#L146-L149",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Performance",
                  "subheading": "Memory"
                },
                "symbolName": "memory",
                "paramStr": "()",
                "parameters": [],
                "returnType": "MemoryInfo",
                "documentation": "Returns memory info at the current time in the program. The result is an\nobject with the following properties:\n\n- `numBytes`: Number of bytes allocated (undisposed) at this time.\n- `numTensors`: Number of unique tensors allocated.\n- `numDataBuffers`: Number of unique data buffers allocated\n   (undisposed) at this time, which is â‰¤ the number of tensors\n   (e.g. `a.reshape(newShape)` makes a new Tensor that shares the same\n   data buffer with `a`).\n- `unreliable`: `Optional` `boolean`:\n    - On WebGL, not present (always reliable).\n    - On CPU, true. Due to automatic garbage collection, these numbers\n     represent undisposed tensors, i.e. not wrapped in `tidy()`, or\n     lacking a call to `tensor.dispose()`.",
                "fileName": "#262",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/environment.ts#L262-L265",
                "isFunction": true
              }
            ]
          }
        ]
      },
      {
        "name": "Tensors",
        "description": "",
        "subheadings": [
          {
            "name": "Slicing and Joining",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Slicing and Joining"
                },
                "symbolName": "concat",
                "paramStr": "(tensors, axis?)",
                "parameters": [
                  {
                    "name": "tensors",
                    "documentation": "A list of tensors to concatenate.",
                    "type": "Tensor[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The axis to concate along. Defaults to 0 (the first dim).",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Concatenates a list of `Tensor`s along a given axis.\n\nThe tensors ranks and types must match, and their sizes must match in all\ndimensions except `axis`.\n\n```js\nconst a = tf.tensor1d([1, 2]);\nconst b = tf.tensor1d([3, 4]);\na.concat(b).print();  // or a.concat(b)\n```\n\n```js\nconst a = tf.tensor1d([1, 2]);\nconst b = tf.tensor1d([3, 4]);\nconst c = tf.tensor1d([5, 6]);\ntf.concat([a, b, c]).print();\n```\n\n```js\nconst a = tf.tensor2d([[1, 2], [10, 20]]);\nconst b = tf.tensor2d([[3, 4], [30, 40]]);\nconst axis = 1;\ntf.concat([a, b], axis).print();\n```",
                "fileName": "#146",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/concat.ts#L146-L157",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Slicing and Joining"
                },
                "symbolName": "tile",
                "paramStr": "(x, reps)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The tensor to transpose.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "reps",
                    "documentation": "Determines the number of replications per dimension.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Construct an tensor by repeating it the number of times given by reps.\n\nThis operation creates a new tensor by replicating `input` `reps`\ntimes. The output tensor's i'th dimension has `input.shape[i] *\nreps[i]` elements, and the values of `input` are replicated\n`reps[i]` times along the i'th dimension. For example, tiling\n`[a, b, c, d]` by `[2]` produces `[a, b, c, d, a, b, c, d]`.\n\n```js\nconst a = tf.tensor1d([1, 2]);\n\na.tile([2]).print();    // or a.tile([2])\n```\n\n```js\nconst a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\na.tile([1, 2]).print();  // or a.tile([1, 2])\n```",
                "fileName": "#673",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L673-L731",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Slicing and Joining"
                },
                "symbolName": "gather",
                "paramStr": "(x, indices, axis?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor whose slices to be gathered.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "indices",
                    "documentation": "The indices of the values to extract.",
                    "type": "Tensor1D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The axis over which to select values. Defaults to 0.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Gather slices from tensor `x`'s axis `axis` according to `indices`.\n\n```js\nconst x = tf.tensor1d([1, 2, 3, 4]);\nconst indices = tf.tensor1d([1, 3, 3]);\n\nx.gather(indices).print();\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\nconst indices = tf.tensor1d([1, 1, 0]);\n\nx.gather(indices).print();\n```",
                "fileName": "#753",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L753-L759",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Slicing and Joining"
                },
                "symbolName": "stack",
                "paramStr": "(tensors, axis?)",
                "parameters": [
                  {
                    "name": "tensors",
                    "documentation": "A list of tensor objects with the same shape and dtype.",
                    "type": "Tensor[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The axis to stack along. Defaults to 0 (the first dim).",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Stacks a list of rank-`R` `Tensor`s into one rank-`(R+1)` `Tensor`.\n\n```js\nconst a = tf.tensor1d([1, 2]);\nconst b = tf.tensor1d([3, 4]);\nconst c = tf.tensor1d([5, 6]);\ntf.stack([a, b, c]).print();\n```",
                "fileName": "#864",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L864-L887",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Slicing and Joining"
                },
                "symbolName": "reverse",
                "paramStr": "(x, axis?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor to be reversed.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The set of dimensions to reverse. Must be in the\nrange [-rank(x), rank(x)). Defaults to all axes.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Reverses a `Tensor` along a specified axis.\n\n```js\nconst x = tf.tensor1d([1, 2, 3, 4]);\n\nx.reverse().print();\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\nconst axis = 1;\nx.reverse(axis).print();\n```",
                "fileName": "#93",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/reverse.ts#L93-L106",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Slicing and Joining"
                },
                "symbolName": "slice",
                "paramStr": "(x, begin, size)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input `Tensor` to slice from.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "begin",
                    "documentation": "The coordinates to start the slice from. The length of this\narray should match the rank of `x`.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "size",
                    "documentation": "The size of the slice. The length of this array should match\nthe rank of `x`.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Extracts a slice from a `Tensor` starting at coordinates `begin`\nand is of size `size`.\n\nAlso available are stricter rank-specific methods with the same signature\nas this method that assert that `x` is of the given rank:\n   - `tf.slice1d`\n   - `tf.slice2d`\n   - `tf.slice3d`\n   - `tf.slice4d`\n\n```js\nconst x = tf.tensor1d([1, 2, 3, 4]);\n\nx.slice([1], [2]).print();\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\nx.slice([1, 0], [1, 2]).print();\n```",
                "fileName": "#104",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/slice.ts#L104-L128",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Creation",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "tensor",
                "paramStr": "(values, shape?, dtype?)",
                "parameters": [
                  {
                    "name": "values",
                    "documentation": "The values of the tensor. Can be nested array of numbers,\nor a flat array, or a `TypedArray`.",
                    "type": "TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "shape",
                    "documentation": "The shape of the tensor. Optional. If not provided,\nit is inferred from `values`.",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type.",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Creates a `Tensor` with the provided values, shape and dtype.\n\n```js\n// Pass an array of values to create a vector.\ntf.tensor([1, 2, 3, 4]).print();\n```\n\n```js\n// Pass a nested array of values to make a matrix or a higher\n// dimensional tensor.\ntf.tensor([[1, 2], [3, 4]]).print();\n```\n\n```js\n// Pass a flat array and specify a shape yourself.\ntf.tensor([1, 2, 3, 4], [2, 2]).print();\n```",
                "fileName": "#59",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L59-L78",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "scalar",
                "paramStr": "(value, dtype?)",
                "parameters": [
                  {
                    "name": "value",
                    "documentation": "The value of the scalar.",
                    "type": "number|boolean",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type.",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Scalar",
                "documentation": "Creates rank-0 `Tensor` (scalar) with the provided value and dtype.\n\nThe same functionality can be achieved with `tensor`, but in general\nwe recommend using `scalar` as it makes the code more readable.\n\n```js\ntf.scalar(3.14).print();\n```",
                "fileName": "#93",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L93-L101",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "tensor1d",
                "paramStr": "(values, dtype?)",
                "parameters": [
                  {
                    "name": "values",
                    "documentation": "The values of the tensor. Can be array of numbers,\nor a `TypedArray`.",
                    "type": "TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type.",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor1D",
                "documentation": "Creates rank-1 `Tensor` with the provided values, shape and dtype.\n\nThe same functionality can be achieved with `tensor`, but in general\nwe recommend using `tensor1d` as it makes the code more readable.\n\n```js\ntf.tensor1d([1, 2, 3]).print();\n```",
                "fileName": "#117",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L117-L125",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "tensor2d",
                "paramStr": "(values, shape?, dtype?)",
                "parameters": [
                  {
                    "name": "values",
                    "documentation": "The values of the tensor. Can be nested array of numbers,\nor a flat array, or a `TypedArray`.",
                    "type": "TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "shape",
                    "documentation": "The shape of the tensor. If not provided, it is inferred from\n`values`.",
                    "type": "[number, number]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type.",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor2D",
                "documentation": "Creates rank-2 `Tensor` with the provided values, shape and dtype.\n\nThe same functionality can be achieved with `tensor`, but in general\nwe recommend using `tensor2d` as it makes the code more readable.\n\n  ```js\n// Pass a nested array.\ntf.tensor2d([[1, 2], [3, 4]]).print();\n```\n```js\n// Pass a flat array and specify a shape.\ntf.tensor2d([1, 2, 3, 4], [2, 2]).print();\n```",
                "fileName": "#148",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L148-L160",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "tensor3d",
                "paramStr": "(values, shape?, dtype?)",
                "parameters": [
                  {
                    "name": "values",
                    "documentation": "The values of the tensor. Can be nested array of numbers,\nor a flat array, or a `TypedArray`.",
                    "type": "TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "shape",
                    "documentation": "The shape of the tensor. If not provided,  it is inferred from\n`values`.",
                    "type": "[number, number, number]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type.",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D",
                "documentation": "Creates rank-3 `Tensor` with the provided values, shape and dtype.\n\nThe same functionality can be achieved with `tensor`, but in general\nwe recommend using `tensor3d` as it makes the code more readable.\n\n  ```js\n// Pass a nested array.\ntf.tensor3d([[[1], [2]], [[3], [4]]]).print();\n```\n```js\n// Pass a flat array and specify a shape.\ntf.tensor3d([1, 2, 3, 4], [2, 2, 1]).print();\n```",
                "fileName": "#183",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L183-L195",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "tensor4d",
                "paramStr": "(values, shape?, dtype?)",
                "parameters": [
                  {
                    "name": "values",
                    "documentation": "The values of the tensor. Can be nested array of numbers,\nor a flat array, or a `TypedArray`.",
                    "type": "TypedArray|Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "shape",
                    "documentation": "The shape of the tensor. Optional. If not provided,\nit is inferred from `values`.",
                    "type": "[number, number, number, number]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type.",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor4D",
                "documentation": "Creates rank-4 `Tensor` with the provided values, shape and dtype.\n\nThe same functionality can be achieved with `tensor`, but in general\nwe recommend using `tensor4d` as it makes the code more readable.\n\n  ```js\n// Pass a nested array.\ntf.tensor4d([[[[1], [2]], [[3], [4]]]]).print();\n```\n```js\n// Pass a flat array and specify a shape.\ntf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]).print();\n```",
                "fileName": "#218",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L218-L230",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "ones",
                "paramStr": "(shape, dtype?)",
                "parameters": [
                  {
                    "name": "shape",
                    "documentation": "An array of integers defining the output tensor shape.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The type of an element in the resulting tensor. Defaults to\n'float'.",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Creates a `Tensor` with all elements set to 1.\n\n```js\ntf.ones([2, 2]).print();\n```",
                "fileName": "#243",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L243-L249",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "zeros",
                "paramStr": "(shape, dtype?)",
                "parameters": [
                  {
                    "name": "shape",
                    "documentation": "An array of integers defining the output tensor shape.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The type of an element in the resulting tensor. Can\nbe 'float32', 'int32' or 'bool'. Defaults to 'float'.",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Creates a `Tensor` with all elements set to 0.\n\n```js\ntf.zeros([2, 2]).print();\n```",
                "fileName": "#262",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L262-L268",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "fill",
                "paramStr": "(shape, value, dtype?)",
                "parameters": [
                  {
                    "name": "shape",
                    "documentation": "An array of integers defining the output tensor shape.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "value",
                    "documentation": "The scalar value to fill the tensor with.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The type of an element in the resulting tensor. Defaults to\n'float'.",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Creates a `Tensor` filled with a scalar value.\n\n```js\ntf.fill([2, 2], 4).print();\n```",
                "fileName": "#282",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L282-L291",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "onesLike",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "A tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Creates a `Tensor` with all elements set to 1 with the same shape as the\ngiven tensor.\n\n```js\nconst x = tf.tensor([1, 2]);\ntf.onesLike(x).print();\n```",
                "fileName": "#303",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L303-L307",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "zerosLike",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The tensor of required shape.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Creates a `Tensor` with all elements set to 0 with the same shape as the\ngiven tensor.\n\n```js\nconst x = tf.tensor([1, 2]);\ntf.zerosLike(x).print();\n```",
                "fileName": "#320",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L320-L324",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "clone",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The tensor to clone.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Creates a new tensor with the same values and shape as the specified\ntensor.\n\n```js\nconst x = tf.tensor([1, 2]);\nx.clone().print();\n```",
                "fileName": "#337",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L337-L341",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "randomNormal",
                "paramStr": "(shape, mean?, stdDev?, dtype?, seed?)",
                "parameters": [
                  {
                    "name": "shape",
                    "documentation": "An array of integers defining the output tensor shape.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "mean",
                    "documentation": "The mean of the normal distribution.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "stdDev",
                    "documentation": "The standard deviation of the normal distribution.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type of the output.",
                    "type": "'float32'|'int32'",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "seed",
                    "documentation": "The seed for the random number generator.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Creates a `Tensor` with values sampled from a normal distribution.\n\n```js\ntf.randomNormal([2, 2]).print();\n```",
                "fileName": "#356",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L356-L371",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "truncatedNormal",
                "paramStr": "(shape, mean?, stdDev?, dtype?, seed?)",
                "parameters": [
                  {
                    "name": "shape",
                    "documentation": "An array of integers defining the output tensor shape.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "mean",
                    "documentation": "The mean of the normal distribution.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "stdDev",
                    "documentation": "The standard deviation of the normal distribution.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type of the output tensor.",
                    "type": "'float32'|'int32'",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "seed",
                    "documentation": "The seed for the random number generator.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Creates a `Tensor` with values sampled from a truncated normal\ndistribution.\n\n```js\ntf.truncatedNormal([2, 2]).print();\n```\n\nThe generated values follow a normal distribution with specified mean and\nstandard deviation, except that values whose magnitude is more than 2\nstandard deviations from the mean are dropped and re-picked.",
                "fileName": "#391",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L391-L406",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "randomUniform",
                "paramStr": "(shape, minval?, maxval?, dtype?)",
                "parameters": [
                  {
                    "name": "shape",
                    "documentation": "An array of integers defining the output tensor shape.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "minval",
                    "documentation": "The lower bound on the range of random values to generate.\nDefaults to 0.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "maxval",
                    "documentation": "The upper bound on the range of random values to generate.\nDefaults to 1.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type of the output tensor. Defaults to 'float32'.",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Creates a `Tensor` with values sampled from a uniform distribution.\n\nThe generated values follow a uniform distribution in the range [minval,\nmaxval). The lower bound minval is included in the range, while the upper\nbound maxval is excluded.\n\n```js\ntf.randomUniform([2, 2]).print();\n```",
                "fileName": "#426",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L426-L436",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "oneHot",
                "paramStr": "(indices, depth, onValue?, offValue?)",
                "parameters": [
                  {
                    "name": "indices",
                    "documentation": "1D Array of indices.",
                    "type": "Tensor1D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "depth",
                    "documentation": "The depth of the one hot dimension.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "onValue",
                    "documentation": "A number used to fill in output when the index matches\nthe location.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "offValue",
                    "documentation": "A number used to fill in the output when the index does\nnot match the location.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor2D",
                "documentation": "Creates a one-hot `Tensor`. The locations represented by `indices` take\nvalue `onValue` (defaults to 1), while all other locations take value\n`offValue` (defaults to 0).\n\n```js\ntf.oneHot(tf.tensor1d([0, 1]), 3).print();\n```",
                "fileName": "#531",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L531-L541",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "fromPixels",
                "paramStr": "(pixels, numChannels?)",
                "parameters": [
                  {
                    "name": "pixels",
                    "documentation": "The input image to construct the tensor from.",
                    "type": "ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "numChannels",
                    "documentation": "The number of channels of the output tensor. The\nsupported image types are all 4-channel by default, a numChannels value\nless than 4 allows you to ignore channels.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D",
                "documentation": "Creates a `Tensor` from an image.\n\n```js\nconst image = new ImageData(1, 1);\nimage.data[0] = 100;\nimage.data[1] = 150;\nimage.data[2] = 200;\nimage.data[3] = 255;\n\ntf.fromPixels(image).print();\n```",
                "fileName": "#561",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L561-L571",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "linspace",
                "paramStr": "(start, stop, num)",
                "parameters": [
                  {
                    "name": "start",
                    "documentation": "The start value of the sequence.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "stop",
                    "documentation": "The end value of the sequence.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "num",
                    "documentation": "The number of values to generate.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor1D",
                "documentation": "Return an evenly spaced sequence of numbers over the given interval.\n\n```js\ntf.linspace(0, 9, 10).print();\n```",
                "fileName": "#924",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L924-L940",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "range",
                "paramStr": "(start, stop, step?, dtype?)",
                "parameters": [
                  {
                    "name": "start",
                    "documentation": "An integer start value",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "stop",
                    "documentation": "An integer stop value",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "step",
                    "documentation": "An integer increment (will default to 1 or -1)",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type of the output tensor. Defaults to 'float32'.",
                    "type": "'float32'|'int32'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor1D",
                "documentation": "Creates a new `Tensor1D` filled with the numbers in the range provided.\n\nThe tensor is a is half-open interval meaning it includes start, but\nexcludes stop. Decrementing ranges and negative step values are also\nsupported.\n\n```js\ntf.range(0, 9, 2).print();\n```",
                "fileName": "#958",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L958-L991",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "buffer",
                "paramStr": "(shape, dtype?, values?)",
                "parameters": [
                  {
                    "name": "shape",
                    "documentation": "An array of integers defining the output tensor shape.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The dtype of the buffer. Defaults to 'float32'.",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "values",
                    "documentation": "The values of the buffer as `TypedArray`. Defaults to zeros.",
                    "type": "TypedArray",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "TensorBuffer",
                "documentation": "Creates an empty `TensorBuffer` with the specified `shape` and `dtype`.\n\nThe values are stored in cpu as `TypedArray`. Fill the buffer using\n`buffer.set()`, or by modifying directly `buffer.values`. When done,\ncall `buffer.toTensor()` to get an immutable `Tensor` with those values.\n\nWhen done, call `buffer.toTensor()` to get an immutable `Tensor` with those\nvalues.\n\n```js\n// Create a buffer and set values at particular indices.\nconst buffer = tf.buffer([2, 2]);\nbuffer.set(3, 0, 0);\nbuffer.set(5, 1, 0);\n\n// Convert the buffer back to a tensor.\nbuffer.toTensor().print();\n```",
                "fileName": "#1017",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L1017-L1022",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "print",
                "paramStr": "(x, verbose?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The tensor to be printed.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "verbose",
                    "documentation": "Whether to print verbose information about the ` Tensor`,\nincluding dtype and size.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "void",
                "documentation": "Prints information about the `Tensor` including its data.\n\n```js\nconst verbose = true;\ntf.tensor2d([1, 2, 3, 4], [2, 2]).print(verbose);\n```",
                "fileName": "#1035",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L1035-L1038",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Creation"
                },
                "symbolName": "variable",
                "paramStr": "(initialValue, trainable?, name?, dtype?)",
                "parameters": [
                  {
                    "name": "initialValue",
                    "documentation": "Initial value for the tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "trainable",
                    "documentation": "If true, optimizers are allowed to update it.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "name",
                    "documentation": "Name of the variable. Defaults to a unique id.",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "If set, initialValue will be converted to the given type.",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Variable",
                "documentation": "Creates a new variable with the provided initial value.\n```js\nconst x = tf.variable(tf.tensor([1, 2, 3]));\nx.assign(tf.tensor([4, 5, 6]));\n\nx.print();\n```",
                "fileName": "#899",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L899-L907",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Transformations",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Transformations"
                },
                "symbolName": "reshape",
                "paramStr": "(x, shape)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor to be reshaped.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "shape",
                    "documentation": "An array of integers defining the output tensor shape.",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Reshapes a `Tensor` to a given shape.\n\nGiven a input tensor, returns a new tensor with the same values as the\ninput tensor with shape `shape`.\n\nIf one component of shape is the special value -1, the size of that\ndimension is computed so that the total size remains constant. In\nparticular, a shape of [-1] flattens into 1-D. At most one component of\nshape can be -1.\n\nIf shape is 1-D or higher, then the operation returns a tensor with shape\nshape filled with the values of tensor. In this case, the number of\nelements implied by shape must be the same as the number of elements in\ntensor.\n\n```js\nconst x = tf.tensor1d([1, 2, 3, 4]);\nx.reshape([2, 2]).print();\n```",
                "fileName": "#597",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L597-L610",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Transformations"
                },
                "symbolName": "squeeze",
                "paramStr": "(x, axis?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor to be squeezed.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "An optional list of numbers. If specified, only\nsqueezes the dimensions listed. The dimension index starts at 0. It is\nan error to squeeze a dimension that is not 1.",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Removes dimensions of size 1 from the shape of a `Tensor`.\n\n```js\nconst x = tf.tensor([1, 2, 3, 4], [1, 1, 4]);\nx.squeeze().print();\n```",
                "fileName": "#625",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L625-L628",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Transformations"
                },
                "symbolName": "cast",
                "paramStr": "(x, dtype)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor to be casted.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The dtype to cast the input tensor to.",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Casts a `Tensor` to a new dtype.\n\n```js\nconst x = tf.tensor1d([1.5, 2.5, 3]);\ntf.cast(x, 'int32').print();\n```",
                "fileName": "#640",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L640-L648",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Transformations"
                },
                "symbolName": "pad",
                "paramStr": "(x, paddings, constantValue?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The tensor to pad.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "paddings",
                    "documentation": "An array of length `R` (the rank of the tensor), where each\nelement is a length-2 tuple of ints `[padBefore, padAfter]`, specifying\nhow much to pad along each dimension of the tensor.",
                    "type": "Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "constantValue",
                    "documentation": "The pad value to use. Defaults to 0.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Pads a `Tensor` with a given value and paddings.\n\nThis operation currently only implements the `CONSTANT` mode.\n\n```js\nconst x = tf.tensor1d([1, 2, 3, 4]);\nx.pad([[1, 2]]).print();\n```",
                "fileName": "#833",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L833-L849",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Transformations"
                },
                "symbolName": "expandDims",
                "paramStr": "(x, axis?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor whose dimensions to be expanded.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension index at which to insert shape of `1`. Defaults\nto 0 (the first dimension).",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns a `Tensor` that has expanded rank, by inserting a dimension\ninto the tensor's shape.\n\n```js\nconst x = tf.tensor1d([1, 2, 3, 4]);\nconst axis = 1;\nx.expandDims(axis).print();\n```",
                "fileName": "#903",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/array_ops.ts#L903-L910",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Classes",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Classes"
                },
                "symbolName": "TensorBuffer",
                "documentation": "A mutable object, similar to `Tensor`, that allows users to set values\nat locations before converting to an immutable `Tensor`.\n\nSee `buffer` for creating a tensor buffer.",
                "fileName": "#37",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L37-L135",
                "methods": [
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Creation"
                    },
                    "symbolName": "set",
                    "paramStr": "(value, locs)",
                    "parameters": [
                      {
                        "name": "value",
                        "documentation": "The value to set.",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "locs",
                        "documentation": "The location indices.",
                        "type": "number[]",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "void",
                    "documentation": "Sets a value in the buffer at a given location.",
                    "fileName": "#66",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L66-L77",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Creation"
                    },
                    "symbolName": "get",
                    "paramStr": "(locs)",
                    "parameters": [
                      {
                        "name": "locs",
                        "documentation": "The location indices.",
                        "type": "number[]",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "number",
                    "documentation": "Returns the value in the buffer at the provided location.",
                    "fileName": "#84",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L84-L94",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Creation"
                    },
                    "symbolName": "toTensor",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "Tensor",
                    "documentation": "Creates an immutable `Tensor` object from the buffer.",
                    "fileName": "#131",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L131-L134",
                    "isFunction": true
                  }
                ],
                "isClass": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Classes"
                },
                "symbolName": "Tensor",
                "documentation": "A `Tensor` object represents an immutable, multidimensional array of numbers\nthat has a shape and a data type.\n\nSee `tensor` for details on how to create a `Tensor`.",
                "fileName": "#153",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L153-L846",
                "methods": [
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "flatten",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "Tensor1D",
                    "documentation": "Flatten a Tensor to a 1D array. ",
                    "fileName": "#213",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L213-L217",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "asScalar",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "Scalar",
                    "documentation": "Converts a size-1 `Tensor` to a `Scalar`. ",
                    "fileName": "#220",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L220-L225",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "as1D",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "Tensor1D",
                    "documentation": "Converts a `Tensor` to a `Tensor1D`. ",
                    "fileName": "#228",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L228-L232",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "as2D",
                    "paramStr": "(rows, columns)",
                    "parameters": [
                      {
                        "name": "rows",
                        "documentation": "Number of rows in `Tensor2D`.",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "columns",
                        "documentation": "Number of columns in `Tensor2D`.",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Tensor2D",
                    "documentation": "Converts a `Tensor` to a `Tensor2D`.",
                    "fileName": "#240",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L240-L244",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "as3D",
                    "paramStr": "(rows, columns, depth)",
                    "parameters": [
                      {
                        "name": "rows",
                        "documentation": "Number of rows in `Tensor3D`.",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "columns",
                        "documentation": "Number of columns in `Tensor3D`.",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "depth",
                        "documentation": "Depth of `Tensor3D`.",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Tensor3D",
                    "documentation": "Converts a `Tensor` to a `Tensor3D`.",
                    "fileName": "#253",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L253-L257",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "as4D",
                    "paramStr": "(rows, columns, depth, depth2)",
                    "parameters": [
                      {
                        "name": "rows",
                        "documentation": "Number of rows in `Tensor4D`.",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "columns",
                        "documentation": "Number of columns in `Tensor4D`.",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "depth",
                        "documentation": "Depth of `Tensor4D`.",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "depth2",
                        "documentation": "4th dimension of `Tensor4D`.",
                        "type": "number",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Tensor4D",
                    "documentation": "Converts a `Tensor` to a `Tensor4D`.",
                    "fileName": "#267",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L267-L271",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "asType",
                    "paramStr": "(dtype)",
                    "parameters": [
                      {
                        "name": "dtype",
                        "documentation": "Data-type to cast the tensor to.",
                        "type": "'float32'|'int32'|'bool'",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "this",
                    "documentation": "Casts a `Tensor` to a specified dtype.",
                    "fileName": "#278",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L278-L282",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "buffer",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "TensorBuffer",
                    "documentation": "Returns a `TensorBuffer` that holds the underlying data. ",
                    "fileName": "#308",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L308-L311",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "data",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "Promise",
                    "documentation": "Asynchronously downloads the values from the `Tensor`. Returns a promise of\n`TypedArray` that resolves when the computation has finished.",
                    "fileName": "#317",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L317-L321",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "dataSync",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "TypedArray",
                    "documentation": "Synchronously downloads the values from the `Tensor`. This blocks the UI\nthread until the values are ready, which can cause performance issues.",
                    "fileName": "#327",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L327-L331",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "dispose",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "void",
                    "documentation": "Disposes `Tensor` from memory.",
                    "fileName": "#336",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L336-L343",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "toFloat",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "this",
                    "documentation": "Casts the array to type `float32` ",
                    "fileName": "#353",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L353-L356",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "toInt",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "this",
                    "documentation": "Casts the array to type `int32` ",
                    "fileName": "#359",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L359-L362",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "toBool",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "this",
                    "documentation": "Casts the array to type `bool` ",
                    "fileName": "#365",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L365-L368",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "print",
                    "paramStr": "(verbose?)",
                    "parameters": [
                      {
                        "name": "verbose",
                        "documentation": "Whether to print verbose information about the tensor,\nincluding dtype and size.",
                        "type": "boolean",
                        "optional": true,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "void",
                    "documentation": "Prints the `Tensor`. See `print` for details.",
                    "fileName": "#376",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L376-L379",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "reshape",
                    "paramStr": "(newShape)",
                    "parameters": [
                      {
                        "name": "newShape",
                        "documentation": "An array of integers defining the output tensor shape.",
                        "type": "number[]",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Tensor",
                    "documentation": "Reshapes the tensor into the provided shape.\nSee `reshape` for more details.",
                    "fileName": "#387",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L387-L391",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "reshapeAs",
                    "paramStr": "(x)",
                    "parameters": [
                      {
                        "name": "x",
                        "documentation": "The tensor of required shape.",
                        "type": "Tensor",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Tensor",
                    "documentation": "Reshapes the tensor into the shape of the provided tensor.",
                    "fileName": "#398",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L398-L402",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "expandDims",
                    "paramStr": "(axis?)",
                    "parameters": [
                      {
                        "name": "axis",
                        "documentation": "The dimension index at which to insert shape of 1. Defaults to\n0 (the first dimension).",
                        "type": "number",
                        "optional": true,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Tensor",
                    "documentation": "Returns a `Tensor` that has expanded rank, by inserting a dimension\ninto the tensor's shape. See `expandDims` for details.",
                    "fileName": "#411",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L411-L414",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "squeeze",
                    "paramStr": "(axis?)",
                    "parameters": [
                      {
                        "name": "axis",
                        "documentation": "A list of numbers. If specified, only squeezes the\ndimensions listed. The dimension index starts at 0. It is an error to\nsqueeze a dimension that is not 1.",
                        "type": "number[]",
                        "optional": true,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Tensor",
                    "documentation": "Returns a `Tensor` with dimensions of size 1 removed from the shape.\nSee `squeeze` for more details.",
                    "fileName": "#424",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L424-L428",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "clone",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "Tensor",
                    "documentation": "Returns a copy of the tensor. See `clone` for details. ",
                    "fileName": "#431",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L431-L435",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "toString",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "string",
                    "documentation": "Returns a human-readable description of the tensor. Useful for logging. ",
                    "fileName": "#438",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L438-L441",
                    "isFunction": true
                  }
                ],
                "isClass": true
              },
              {
                "docInfo": {
                  "heading": "Tensors",
                  "subheading": "Classes"
                },
                "symbolName": "Variable",
                "documentation": "A mutable `Tensor`, useful for persisting state, e.g. for training.",
                "fileName": "#862",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L862-L931",
                "methods": [
                  {
                    "docInfo": {
                      "heading": "Tensors",
                      "subheading": "Classes"
                    },
                    "symbolName": "assign",
                    "paramStr": "(newValue)",
                    "parameters": [
                      {
                        "name": "newValue",
                        "documentation": "New tensor to be assigned to this variable.",
                        "type": "Tensor",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "void",
                    "documentation": "Assign a new `Tensor` to this variable. The new `Tensor` must have the\nsame shape and dtype as the old `Tensor`.",
                    "fileName": "#915",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/tensor.ts#L915-L930",
                    "isFunction": true
                  }
                ],
                "isClass": true,
                "inheritsFrom": "Tensor"
              }
            ]
          }
        ]
      },
      {
        "name": "Operations",
        "description": "",
        "subheadings": [
          {
            "name": "Normalization",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Normalization"
                },
                "symbolName": "batchNormalization",
                "paramStr": "(x, mean, variance, varianceEpsilon?, scale?, offset?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input Tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "mean",
                    "documentation": "A mean Tensor.",
                    "type": "Tensor|Tensor1D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "variance",
                    "documentation": "A variance Tensor.",
                    "type": "Tensor|Tensor1D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "varianceEpsilon",
                    "documentation": "A small float number to avoid dividing by 0.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "scale",
                    "documentation": "A scale Tensor.",
                    "type": "Tensor|Tensor1D",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "offset",
                    "documentation": "An offset Tensor.",
                    "type": "Tensor|Tensor1D",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Batch normalization.\n\nAs described in\n[http://arxiv.org/abs/1502.03167](http://arxiv.org/abs/1502.03167).\n\nMean, variance, scale, and offset can be of two\nshapes:\n   - The same shape as the input.\n   - In the common case, the depth dimension is the last dimension of x, so\n     the values would be an `Tensor1D` of shape [depth].",
                "fileName": "#180",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/batchnorm.ts#L180-L203",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Normalization"
                },
                "symbolName": "localResponseNormalization",
                "paramStr": "(x, radius?, bias?, alpha?, beta?, normRegion?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor. The 4-D input tensor is treated as a 3-D array\nof 1D vectors (along the last dimension), and each vector is\nnormalized independently.",
                    "type": "Tensor3D|Tensor4D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "radius",
                    "documentation": "The number of adjacent channels or spatial locations of the\n1D normalization window. In TensorFlow this param is called\n'depth_radius' because only 'acrossChannels' mode is supported.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "bias",
                    "documentation": "A constant bias term for the basis.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "alpha",
                    "documentation": "A scale factor, usually positive.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "beta",
                    "documentation": "An exponent.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "normRegion",
                    "documentation": "Default is 'acrossChannels'.",
                    "type": "'acrossChannels'|'withinChannel'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D|Tensor4D",
                "documentation": "Normalizes the activation of a local neighborhood across or within\nchannels.",
                "fileName": "#40",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/lrn.ts#L40-L68",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Normalization"
                },
                "symbolName": "moments",
                "paramStr": "(x, axis?, keepDims?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension(s) along with to compute mean and\nvariance. By default it reduces all dimensions.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "keepDims",
                    "documentation": "If true, the moments have the same dimensionality as the\ninput.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "{mean: Tensor, variance: Tensor}",
                "documentation": "Calculates the mean and variance of `x`. The mean and variance are\ncalculated by aggregating the contents of `x` across `axes`. If `x` is\n1-D and `axes = [0]` this is just the mean and variance of a vector.",
                "fileName": "#375",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/reduction_ops.ts#L375-L388",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Normalization"
                },
                "symbolName": "softmax",
                "paramStr": "(logits, dim?)",
                "parameters": [
                  {
                    "name": "logits",
                    "documentation": "The logits array.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dim",
                    "documentation": "The dimension softmax would be performed on. Defaults to `-1`\nwhich indicates the last dimension.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the softmax normalized vector given the logits.\n\n```js\nconst a = tf.tensor1d([1, 2, 3]);\n\na.softmax().print();  // or tf.softmax(a)\n```\n\n```js\nconst a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);\n\na.softmax().print();  // or tf.softmax(a)\n```",
                "fileName": "#47",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/softmax.ts#L47-L77",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Arithmetic",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Arithmetic"
                },
                "symbolName": "add",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first `Tensor` to add.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second `Tensor` to add. Must have the same type as `a`.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Adds two `Tensor`s element-wise, A + B. Supports broadcasting.\n\nWe also expose `addStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 2, 3, 4]);\nconst b = tf.tensor1d([10, 20, 30, 40]);\n\na.add(b).print();  // or tf.add(a, b)\n```\n\n```js\n// Broadcast add a with b.\nconst a = tf.scalar(5);\nconst b = tf.tensor1d([10, 20, 30, 40]);\n\na.add(b).print();  // or tf.add(a, b)\n```",
                "fileName": "#51",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/binary_ops.ts#L51-L78",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Arithmetic"
                },
                "symbolName": "sub",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first `Tensor` to subtract from.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second `Tensor` to be subtracted. Must have the same dtype as\n`a`.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Subtracts two `Tensor`s element-wise, A - B. Supports broadcasting.\n\nWe also expose `subStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([10, 20, 30, 40]);\nconst b = tf.tensor1d([1, 2, 3, 4]);\n\na.sub(b).print();  // or tf.sub(a, b)\n```\n\n```js\n// Broadcast subtract a with b.\nconst a = tf.tensor1d([10, 20, 30, 40]);\nconst b = tf.scalar(5);\n\na.sub(b).print();  // or tf.sub(a, b)\n```",
                "fileName": "#118",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/binary_ops.ts#L118-L146",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Arithmetic"
                },
                "symbolName": "pow",
                "paramStr": "(base, exp)",
                "parameters": [
                  {
                    "name": "base",
                    "documentation": "The base `Tensor` to pow element-wise.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "exp",
                    "documentation": "The exponent `Tensor` to pow element-wise.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the power of one `Tensor` to another. Supports broadcasting.\n\nGiven a `Tensor` x and a `Tensor` y, this operation computes x^y for\ncorresponding elements in x and y.\n\n```js\nconst a = tf.tensor([[2, 3], [4, 5]])\nconst b = tf.tensor([[1, 2], [3, 0]]).toInt();\n\na.pow(b).print();  // or tf.pow(a, b)\n```\n\n```js\nconst a = tf.tensor([[1, 2], [3, 4]])\nconst b = tf.tensor(2).toInt();\n\na.pow(b).print();  // or tf.pow(a, b)\n```\nWe also expose `powStrict` which has the same signature as this op and\nasserts that `base` and `exp` are the same shape (does not broadcast).",
                "fileName": "#188",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/binary_ops.ts#L188-L209",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Arithmetic"
                },
                "symbolName": "mul",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first tensor to multiply.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second tensor to multiply. Must have the same dtype as `a`.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Multiplies two `Tensor`s element-wise, A * B. Supports broadcasting.\n\nWe also expose `mulStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 2, 3, 4]);\nconst b = tf.tensor1d([2, 3, 4, 5]);\n\na.mul(b).print();  // or tf.mul(a, b)\n```\n\n```js\n// Broadcast mul a with b.\nconst a = tf.tensor1d([1, 2, 3, 4]);\nconst b = tf.scalar(5);\n\na.mul(b).print();  // or tf.mul(a, b)\n```",
                "fileName": "#249",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/binary_ops.ts#L249-L277",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Arithmetic"
                },
                "symbolName": "div",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first tensor as the numerator.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second tensor as the denominator. Must have the same dtype as\n`a`.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Divides two `Tensor`s element-wise, A / B. Supports broadcasting.\n\nWe also expose `divStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 4, 9, 16]);\nconst b = tf.tensor1d([1, 2, 3, 4]);\n\na.div(b).print();  // or tf.div(a, b)\n```\n\n```js\n// Broadcast div a with b.\nconst a = tf.tensor1d([2, 4, 6, 8]);\nconst b = tf.scalar(2);\n\na.div(b).print();  // or tf.div(a, b)\n```",
                "fileName": "#319",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/binary_ops.ts#L319-L346",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Arithmetic"
                },
                "symbolName": "minimum",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second tensor. Must have the same type as `a`.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the min of a and b (`a < b ? a : b`) element-wise.\nSupports broadcasting.\n\nWe also expose `minimumStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 4, 3, 16]);\nconst b = tf.tensor1d([1, 2, 9, 4]);\n\na.minimum(b).print();  // or tf.minimum(a, b)\n```\n\n```js\n// Broadcast minimum a with b.\nconst a = tf.tensor1d([2, 4, 6, 8]);\nconst b = tf.scalar(5);\n\na.minimum(b).print();  // or tf.minimum(a, b)\n```",
                "fileName": "#386",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/binary_ops.ts#L386-L398",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Arithmetic"
                },
                "symbolName": "maximum",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second tensor. Must have the same type as `a`.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the max of a and b (`a > b ? a : b`) element-wise.\nSupports broadcasting.\n\nWe also expose `maximumStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).\n\n```js\nconst a = tf.tensor1d([1, 4, 3, 16]);\nconst b = tf.tensor1d([1, 2, 9, 4]);\n\na.maximum(b).print();  // or tf.maximum(a, b)\n```\n\n```js\n// Broadcast maximum a with b.\nconst a = tf.tensor1d([2, 4, 6, 8]);\nconst b = tf.scalar(5);\n\na.maximum(b).print();  // or tf.maximum(a, b)\n```",
                "fileName": "#438",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/binary_ops.ts#L438-L450",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Logical",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Logical"
                },
                "symbolName": "notEqual",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second input tensor. Must have the same dtype as `a`.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the truth value of (a != b) element-wise. Supports broadcasting.\n\nWe also expose `notEqualStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).",
                "fileName": "#35",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/compare.ts#L35-L41",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Logical"
                },
                "symbolName": "less",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second input tensor. Must have the same dtype as `a`.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the truth value of (a < b) element-wise. Supports broadcasting.\n\nWe also expose `lessStrict` which has the same signature as this op and\nasserts that `a` and `b` are the same shape (does not broadcast).",
                "fileName": "#66",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/compare.ts#L66-L72",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Logical"
                },
                "symbolName": "equal",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second input tensor. Must have the same dtype as `a`.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the truth value of (a == b) element-wise. Supports broadcasting.\n\nWe also expose `equalStrict` which has the same signature as this op\nand asserts that `a` and `b` are the same shape (does not broadcast).",
                "fileName": "#97",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/compare.ts#L97-L103",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Logical"
                },
                "symbolName": "lessEqual",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second input tensor. Must have the same dtype as `a`.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the truth value of (a <= b) element-wise. Supports broadcasting.\n\nWe also expose `lessEqualStrict` which has the same signature as this op\nand asserts that `a` and `b` are the same shape (does not broadcast).",
                "fileName": "#120",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/compare.ts#L120-L127",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Logical"
                },
                "symbolName": "greater",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second input tensor. Must have the same dtype as `a`.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the truth value of (a > b) element-wise. Supports broadcasting.\n\nWe also expose `greaterStrict` which has the same signature as this\nop and asserts that `a` and `b` are the same shape (does not broadcast).",
                "fileName": "#144",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/compare.ts#L144-L150",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Logical"
                },
                "symbolName": "greaterEqual",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second input tensor. Must have the same dtype as `a`.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the truth value of (a >= b) element-wise. Supports broadcasting.\n\nWe also expose `greaterStrict` which has the same signature as this\nop and asserts that `a` and `b` are the same shape (does not broadcast).",
                "fileName": "#167",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/compare.ts#L167-L174",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Logical"
                },
                "symbolName": "logicalNot",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor. Must be of dtype 'bool'.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the truth value of `NOT x` element-wise.",
                "fileName": "#32",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/logical_ops.ts#L32-L37",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Logical"
                },
                "symbolName": "logicalAnd",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first input tensor. Must be of dtype bool.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second input tensor. Must be of dtype bool.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the truth value of a AND b element-wise. Supports broadcasting.",
                "fileName": "#45",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/logical_ops.ts#L45-L54",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Logical"
                },
                "symbolName": "logicalOr",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first input tensor. Must be of dtype bool.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second input tensor. Must be of dtype bool.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the truth value of `a OR b` element-wise. Supports broadcasting.",
                "fileName": "#62",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/logical_ops.ts#L62-L71",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Logical"
                },
                "symbolName": "logicalXor",
                "paramStr": "(a, b)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "The first input tensor. Must be of dtype bool.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "The second input tensor. Must be of dtype bool.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the truth value of `a XOR b` element-wise. Supports broadcasting.",
                "fileName": "#79",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/logical_ops.ts#L79-L88",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Logical"
                },
                "symbolName": "where",
                "paramStr": "(condition, a, b)",
                "parameters": [
                  {
                    "name": "condition",
                    "documentation": "The input condition. Must be of dtype bool.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "a",
                    "documentation": "If `condition` is rank 1, `a` may have a higher rank but\nits first dimension must match the size of `condition`.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "A tensor with the same shape and type as `a`.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the elements, either `a` or `b` depending on the `condition`.\n\nIf the condition is true, select from `a`, otherwise select from `b`.",
                "fileName": "#100",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/logical_ops.ts#L100-L125",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Convolution",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Convolution"
                },
                "symbolName": "conv1d",
                "paramStr": "(input, filter, stride, pad, dataFormat?, dilation?, dimRoundingMode?)",
                "parameters": [
                  {
                    "name": "input",
                    "documentation": "The input tensor, of rank 3 or rank 2, of shape\n`[batch, width, inChannels]`. If rank 2, batch of 1 is assumed.",
                    "type": "Tensor2D|Tensor3D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "filter",
                    "documentation": "The filter, rank 3, of shape\n`[filterWidth, inDepth, outDepth]`.",
                    "type": "Tensor3D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "stride",
                    "documentation": "The number of entries by which the filter is moved right at\neach step.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "pad",
                    "documentation": "The type of padding algorithm.\n- `same` and stride 1: output will be of same size as input,\nregardless of filter size.\n- `valid`: output will be smaller than input if filter is larger\nthan 1x1.\n- For more info, see this guide:\n[https://www.tensorflow.org/api_guides/python/nn#Convolution](\nhttps://www.tensorflow.org/api_guides/python/nn#Convolution)",
                    "type": "'valid'|'same'|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dataFormat",
                    "documentation": "An optional string from \"NWC\", \"NCW\". Defaults to \"NWC\",\nthe data is stored in the order of [batch, in_width, in_channels]. Only\n\"NWC\" is currently supported.",
                    "type": "'NWC'|'NCW'",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dilation",
                    "documentation": "The dilation rate in which we sample input values in\natrous convolution. Defaults to `1`. If it is greater than 1, then\nstride must be `1`.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dimRoundingMode",
                    "documentation": "The rounding mode used when computing output\ndimensions if pad is a number. If none is provided, it will not round\nand error if the output is of fractional size.",
                    "type": "'floor'|'round'|'ceil'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor2D|Tensor3D",
                "documentation": "Computes a 1D convolution over the input x.",
                "fileName": "#53",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/conv.ts#L53-L110",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Convolution"
                },
                "symbolName": "conv2d",
                "paramStr": "(x, filter, strides, pad, dataFormat?, dilations?, dimRoundingMode?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor, of rank 4 or rank 3, of shape\n`[batch, height, width, inChannels]`. If rank 3, batch of 1 is\nassumed.",
                    "type": "Tensor3D|Tensor4D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "filter",
                    "documentation": "The filter, rank 4, of shape\n`[filterHeight, filterWidth, inDepth, outDepth]`.",
                    "type": "Tensor4D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "strides",
                    "documentation": "The strides of the convolution: `[strideHeight,\nstrideWidth]`.",
                    "type": "[number, number]|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "pad",
                    "documentation": "The type of padding algorithm.\n- `same` and stride 1: output will be of same size as input,\nregardless of filter size.\n- `valid`: output will be smaller than input if filter is larger\nthan 1x1.\n- For more info, see this guide:\n[https://www.tensorflow.org/api_guides/python/nn#Convolution](\nhttps://www.tensorflow.org/api_guides/python/nn#Convolution)",
                    "type": "'valid'|'same'|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dataFormat",
                    "documentation": ": An optional string from: \"NHWC\", \"NCHW\". Defaults to\n\"NHWC\". Specify the data format of the input and output data. With the\ndefault format \"NHWC\", the data is stored in the order of: [batch,\nheight, width, channels]. Only \"NHWC\" is currently supported.",
                    "type": "'NHWC'|'NCHW'",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dilations",
                    "documentation": "The dilation rates: `[dilationHeight, dilationWidth]`\nin which we sample input values across the height and width dimensions\nin atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single\nnumber, then `dilationHeight == dilationWidth`. If it is greater than\n1, then all values of `strides` must be 1.",
                    "type": "[number, number]|number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dimRoundingMode",
                    "documentation": "The rounding mode used when computing output\ndimensions if pad is a number. If none is provided, it will not round\nand error if the output is of fractional size.",
                    "type": "'floor'|'round'|'ceil'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D|Tensor4D",
                "documentation": "Computes a 2D convolution over the input x.",
                "fileName": "#143",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/conv.ts#L143-L207",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Convolution"
                },
                "symbolName": "conv2dTranspose",
                "paramStr": "(x, filter, outputShape, strides, pad, dimRoundingMode?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input image, of rank 4 or rank 3, of shape\n`[batch, height, width, inDepth]`. If rank 3, batch of 1 is assumed.",
                    "type": "Tensor3D|Tensor4D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "filter",
                    "documentation": "The filter, rank 4, of shape\n`[filterHeight, filterWidth, outDepth, inDepth]`.\n`inDepth` must match `inDepth` in `x`.",
                    "type": "Tensor4D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "outputShape",
                    "documentation": "Output shape, of rank 4 or rank 3:\n`[batch, height, width, outDepth]`. If rank 3, batch of 1 is assumed.",
                    "type": "[number, number, number, number]|[number, number, number]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "strides",
                    "documentation": "The strides of the original convolution:\n`[strideHeight, strideWidth]`.",
                    "type": "[number, number]|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "pad",
                    "documentation": "The type of padding algorithm used in the non-transpose version\nof the op.",
                    "type": "'valid'|'same'|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dimRoundingMode",
                    "documentation": "The rounding mode used when computing output\ndimensions if pad is a number. If none is provided, it will not round\nand error if the output is of fractional size.",
                    "type": "'floor'|'round'|'ceil'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D|Tensor4D",
                "documentation": "Computes the transposed 2D convolution of an image, also known as a\ndeconvolution.",
                "fileName": "#375",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/conv.ts#L375-L384",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Convolution"
                },
                "symbolName": "depthwiseConv2d",
                "paramStr": "(input, filter, strides, pad, dataFormat?, dilations?, dimRoundingMode?)",
                "parameters": [
                  {
                    "name": "input",
                    "documentation": "The input tensor, of rank 4 or rank 3, of shape\n`[batch, height, width, inChannels]`. If rank 3, batch of 1 is\nassumed.",
                    "type": "Tensor3D|Tensor4D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "filter",
                    "documentation": "The filter tensor, rank 4, of shape\n`[filterHeight, filterWidth, inChannels, channelMultiplier]`.",
                    "type": "Tensor4D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "strides",
                    "documentation": "The strides of the convolution: `[strideHeight,\nstrideWidth]`. If strides is a single number, then `strideHeight ==\nstrideWidth`.",
                    "type": "[number, number]|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "pad",
                    "documentation": "The type of padding algorithm.\n- `same` and stride 1: output will be of same size as input,\nregardless of filter size.\n- `valid`: output will be smaller than input if filter is larger\nthan 1x1.\n- For more info, see this guide:\n[https://www.tensorflow.org/api_guides/python/nn#Convolution](\nhttps://www.tensorflow.org/api_guides/python/nn#Convolution)",
                    "type": "'valid'|'same'|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dataFormat",
                    "documentation": ": An optional string from: \"NHWC\", \"NCHW\". Defaults to\n\"NHWC\". Specify the data format of the input and output data. With the\ndefault format \"NHWC\", the data is stored in the order of: [batch,\nheight, width, channels]. Only \"NHWC\" is currently supported.",
                    "type": "'NHWC'|'NCHW'",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dilations",
                    "documentation": "The dilation rates: `[dilationHeight, dilationWidth]`\nin which we sample input values across the height and width dimensions\nin atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\nnumber, then `dilationHeight == dilationWidth`. If it is greater than\n1, then all values of `strides` must be 1.",
                    "type": "[number, number]|number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dimRoundingMode",
                    "documentation": "The rounding mode used when computing output\ndimensions if pad is a number. If none is provided, it will not round\nand error if the output is of fractional size.",
                    "type": "'floor'|'round'|'ceil'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D|Tensor4D",
                "documentation": "Depthwise 2D convolution.\n\nGiven a 4D `input` array and a `filter` array of shape\n`[filterHeight, filterWidth, inChannels, channelMultiplier]` containing\n`inChannels` convolutional filters of depth 1, this op applies a\ndifferent filter to each input channel (expanding from 1 channel to\n`channelMultiplier` channels for each), then concatenates the results\ntogether. The output has `inChannels * channelMultiplier` channels.\n\nSee\n[https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](\n     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)\nfor more details.",
                "fileName": "#430",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/conv.ts#L430-L481",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Convolution"
                },
                "symbolName": "maxPool",
                "paramStr": "(x, filterSize, strides, pad, dimRoundingMode?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor, of rank 4 or rank 3 of shape\n`[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.",
                    "type": "Tensor3D|Tensor4D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "filterSize",
                    "documentation": "The filter size, a tuple `[filterHeight, filterWidth]`.",
                    "type": "[number, number]|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "strides",
                    "documentation": "The strides of the pooling: `[strideHeight, strideWidth]`.",
                    "type": "[number, number]|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "pad",
                    "documentation": "The type of padding algorithm.\n- `same` and stride 1: output will be of same size as input,\nregardless of filter size.\n- `valid`: output will be smaller than input if filter is larger\nthan 1x1.\n- For more info, see this guide:\n[https://www.tensorflow.org/api_guides/python/nn#Convolution](\nhttps://www.tensorflow.org/api_guides/python/nn#Convolution)",
                    "type": "'valid'|'same'|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dimRoundingMode",
                    "documentation": "The rounding mode used when computing output\ndimensions if pad is a number. If none is provided, it will not round\nand error if the output is of fractional size.",
                    "type": "'floor'|'round'|'ceil'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D|Tensor4D",
                "documentation": "Computes the 2D max pooling of an image.",
                "fileName": "#45",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/pool.ts#L45-L80",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Convolution"
                },
                "symbolName": "minPool",
                "paramStr": "(input, filterSize, strides, pad, dimRoundingMode?)",
                "parameters": [
                  {
                    "name": "input",
                    "documentation": "The input tensor, of rank 4 or rank 3 of shape\n`[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.",
                    "type": "Tensor3D|Tensor4D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "filterSize",
                    "documentation": "The filter size, a tuple `[filterHeight, filterWidth]`.",
                    "type": "[number, number]|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "strides",
                    "documentation": "The strides of the pooling: `[strideHeight, strideWidth]`.",
                    "type": "[number, number]|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "pad",
                    "documentation": "The type of padding algorithm.\n- `same` and stride 1: output will be of same size as input,\nregardless of filter size.\n- `valid`: output will be smaller than input if filter is larger\nthan 1x1.\n- For more info, see this guide:\n[https://www.tensorflow.org/api_guides/python/nn#Convolution](\nhttps://www.tensorflow.org/api_guides/python/nn#Convolution)",
                    "type": "'valid'|'same'|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dimRoundingMode",
                    "documentation": "The rounding mode used when computing output\ndimensions if pad is a number. If none is provided, it will not round\nand error if the output is of fractional size.",
                    "type": "'floor'|'round'|'ceil'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D|Tensor4D",
                "documentation": "Computes the 2D min pooling of an image.",
                "fileName": "#163",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/pool.ts#L163-L192",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Convolution"
                },
                "symbolName": "avgPool",
                "paramStr": "(x, filterSize, strides, pad, dimRoundingMode?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor, of rank 4 or rank 3 of shape\n`[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.",
                    "type": "Tensor3D|Tensor4D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "filterSize",
                    "documentation": "The filter size, a tuple `[filterHeight, filterWidth]`.",
                    "type": "[number, number]|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "strides",
                    "documentation": "The strides of the pooling: `[strideHeight, strideWidth]`.",
                    "type": "[number, number]|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "pad",
                    "documentation": "The type of padding algorithm:\n- `same` and stride 1: output will be of same size as input,\nregardless of filter size.\n- `valid`: output will be smaller than input if filter is larger\nthan 1x1.\n- For more info, see this guide:\n[https://www.tensorflow.org/api_guides/python/nn#Convolution](\nhttps://www.tensorflow.org/api_guides/python/nn#Convolution)",
                    "type": "'valid'|'same'|number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dimRoundingMode",
                    "documentation": "The rounding mode used when computing output\ndimensions if pad is a number. If none is provided, it will not round\nand error if the output is of fractional size.",
                    "type": "'floor'|'round'|'ceil'",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D|Tensor4D",
                "documentation": "Computes the 2D average pooling of an image.",
                "fileName": "#213",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/pool.ts#L213-L249",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Images",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Images",
                  "namespace": "image"
                },
                "symbolName": "resizeBilinear",
                "namespace": "image",
                "paramStr": "(images, size, alignCorners?)",
                "parameters": [
                  {
                    "name": "images",
                    "documentation": "The images, of rank 4 or rank 3, of shape\n`[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.",
                    "type": "Tensor3D|Tensor4D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "size",
                    "documentation": "The new shape `[newHeight, newWidth]` to resize the\nimages to. Each channel is resized individually.",
                    "type": "[number, number]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "alignCorners",
                    "documentation": "Defaults to False. If true, rescale\ninput by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\ncorners of images and resized images. If false, rescale by\n`new_height / height`. Treat similarly the width dimension.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D|Tensor4D",
                "documentation": "Bilinear resize a batch of 3D images to a new shape.",
                "fileName": "#37",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/image_ops.ts#L37-L65",
                "isFunction": true
              }
            ]
          },
          {
            "name": "RNN",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "RNN"
                },
                "symbolName": "multiRNNCell",
                "paramStr": "(lstmCells, data, c, h)",
                "parameters": [
                  {
                    "name": "lstmCells",
                    "documentation": "Array of LSTMCell functions.",
                    "type": "(data: Tensor2D, c: Tensor2D, h: Tensor2D): [Tensor2D, Tensor2D][]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "data",
                    "documentation": "The input to the cell.",
                    "type": "Tensor2D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "c",
                    "documentation": "Array of previous cell states.",
                    "type": "Tensor2D[]",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "h",
                    "documentation": "Array of previous cell outputs.",
                    "type": "Tensor2D[]",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "[Tensor2D[], Tensor2D[]]",
                "documentation": "Computes the next states and outputs of a stack of LSTMCells.\n\nEach cell output is used as input to the next cell.\n\nReturns `[cellState, cellOutput]`.\n\nDerived from tf.contrib.rn.MultiRNNCell.",
                "fileName": "#44",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/lstm.ts#L44-L64",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "RNN"
                },
                "symbolName": "basicLSTMCell",
                "paramStr": "(forgetBias, lstmKernel, lstmBias, data, c, h)",
                "parameters": [
                  {
                    "name": "forgetBias",
                    "documentation": "Forget bias for the cell.",
                    "type": "Scalar",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "lstmKernel",
                    "documentation": "The weights for the cell.",
                    "type": "Tensor2D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "lstmBias",
                    "documentation": "The bias for the cell.",
                    "type": "Tensor1D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "data",
                    "documentation": "The input to the cell.",
                    "type": "Tensor2D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "c",
                    "documentation": "Previous cell state.",
                    "type": "Tensor2D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "h",
                    "documentation": "Previous cell output.",
                    "type": "Tensor2D",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "[Tensor2D, Tensor2D]",
                "documentation": "Computes the next state and output of a BasicLSTMCell.\n\nReturns `[newC, newH]`.\n\nDerived from tf.contrib.rnn.BasicLSTMCell.",
                "fileName": "#80",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/lstm.ts#L80-L102",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Matrices",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Matrices"
                },
                "symbolName": "matMul",
                "paramStr": "(a, b, transposeA?, transposeB?)",
                "parameters": [
                  {
                    "name": "a",
                    "documentation": "First matrix in dot product operation.",
                    "type": "Tensor2D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "b",
                    "documentation": "Second matrix in dot product operation.",
                    "type": "Tensor2D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "transposeA",
                    "documentation": "If true, `a` is transposed before multiplication.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "transposeB",
                    "documentation": "If true, `b` is transposed before multiplication.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor2D",
                "documentation": "Computes the dot product of two matrices, A * B. These must be matrices.\n\n```js\nconst a = tf.tensor2d([1, 2], [1, 2]);\nconst b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\na.matMul(b).print();  // or tf.matMul(a, b)\n```",
                "fileName": "#39",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/matmul.ts#L39-L70",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Matrices"
                },
                "symbolName": "outerProduct",
                "paramStr": "(v1, v2)",
                "parameters": [
                  {
                    "name": "v1",
                    "documentation": "The first vector in the outer product operation.",
                    "type": "Tensor1D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "v2",
                    "documentation": "The second vector in the dot product operation.",
                    "type": "Tensor1D",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor2D",
                "documentation": "Computes the outer product of two vectors, v1 and v2.\n\n```js\nconst a = tf.tensor1d([1, 2, 3]);\nconst b = tf.tensor1d([3, 4, 5]);\n\ntf.outerProduct(a, b).print();\n```",
                "fileName": "#151",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/matmul.ts#L151-L160",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Matrices"
                },
                "symbolName": "norm",
                "paramStr": "(x, ord?, axis?, keepDims?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input array.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "ord",
                    "documentation": "Optional. Order of the norm. Supported norm types are\nfollowing:\n\n| ord        | norm for matrices         | norm for vectors\n|------------|---------------------------|---------------------\n|'euclidean' |Frobenius norm             |2-norm\n|'fro'       |Frobenius norm\t           |\n|Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))\n|-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))\n|1           |max(sum(abs(x), axis=0))   |sum(abs(x))\n|2           |                           |sum(abs(x)^2)^1/2*",
                    "type": "number|'euclidean'|'fro'",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "Optional. If axis is null (the default), the input is\nconsidered a vector and a single vector norm is computed over the entire\nset of values in the Tensor, i.e. norm(x, ord) is equivalent\nto norm(x.reshape([-1]), ord). If axis is a integer, the input\nis considered a batch of vectors, and axis determines the axis in x\nover which to compute vector norms. If axis is a 2-tuple of integer it is\nconsidered a batch of matrices and axis determines the axes in NDArray\nover which to compute a matrix norm.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "keepDims",
                    "documentation": "Optional. If true, the norm have the same dimensionality\nas the input.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the norm of scalar, vectors, and matrices.\nThis function can compute several different vector norms (the 1-norm, the\nEuclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)\nand matrix norms (Frobenius, 1-norm, and inf-norm).\n\n```js\nconst x = tf.tensor1d([1, 2, 3, 4]);\n\nx.norm().print();  // or tf.norm(x)\n```",
                "fileName": "#62",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/norm.ts#L62-L74",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Matrices"
                },
                "symbolName": "transpose",
                "paramStr": "(x, perm?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The tensor to transpose.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "perm",
                    "documentation": "The permutation of the dimensions of a.",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Transposes the `Tensor`. Permutes the dimensions according to `perm`.\n\nThe returned `Tensor`'s dimension `i` will correspond to the input\ndimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,\nwhere `n` is the rank of the input `Tensor`. Hence by default, this\noperation performs a regular matrix transpose on 2-D input `Tensor`s.\n\n```js\nconst a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\n\na.transpose().print();  // or tf.transpose(a)\n```",
                "fileName": "#43",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/transpose.ts#L43-L59",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Reduction",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Reduction"
                },
                "symbolName": "logSumExp",
                "paramStr": "(input, axis?, keepDims?)",
                "parameters": [
                  {
                    "name": "input",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension(s) to reduce. If null (the default),\nreduces all dimensions.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "keepDims",
                    "documentation": "If true, retains reduced dimensions with length\nof 1. Defaults to false.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the log(sum(exp(elements across the reduction dimensions)).\n\nReduces the input along the dimensions given in `axis`. Unless `keepDims`\nis true, the rank of the array is reduced by 1 for each entry in `axis`.\nIf `keepDims` is true, the reduced dimensions are retained with length 1.\nIf `axis` has no entries, all dimensions are reduced, and an array with a\nsingle element is returned.\n\n```js\nconst x = tf.tensor1d([1, 2, 3]);\n\nx.logSumExp().print();  // or tf.logSumExp(x)\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\nconst axis = 1;\nx.logSumExp(axis).print();  // or tf.logSumExp(a, axis)\n```",
                "fileName": "#55",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/reduction_ops.ts#L55-L72",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Reduction"
                },
                "symbolName": "sum",
                "paramStr": "(x, axis?, keepDims?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor to compute the sum over.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension(s) to reduce. By default it reduces\nall dimensions.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "keepDims",
                    "documentation": "If true, retains reduced dimensions with size 1.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the sum of elements across dimensions of a `Tensor`.\n\nReduces the input along the dimensions given in `axes`. Unless `keepDims`\nis true, the rank of the `Tensor` is reduced by 1 for each entry in `axes`.\nIf `keepDims` is true, the reduced dimensions are retained with length 1.\nIf axes has no entries, all dimensions are reduced, and a `Tensor` with a\nsingle element is returned.\n\n```js\nconst x = tf.tensor1d([1, 2, 3]);\n\nx.sum().print();  // or tf.logSumExp(x)\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\nconst axis = 1;\nx.sum(axis).print();  // or tf.sum(x, axis)\n```",
                "fileName": "#101",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/reduction_ops.ts#L101-L138",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Reduction"
                },
                "symbolName": "mean",
                "paramStr": "(x, axis?, keepDims?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension(s) to reduce. By default it reduces\nall dimensions.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "keepDims",
                    "documentation": "If true, retains reduced dimensions with size 1.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the mean of elements across dimensions of a `Tensor`.\n\nReduces `x` along the dimensions given in `axis`. Unless `keepDims` is\ntrue, the rank of the `Tensor` is reduced by 1 for each entry in `axis`.\nIf `keepDims` is true, the reduced dimensions are retained with length 1.\nIf `axis` has no entries, all dimensions are reduced, and a `Tensor` with\na single element is returned.\n\n```js\nconst x = tf.tensor1d([1, 2, 3]);\n\nx.mean().print();  // or tf.logSumExp(a)\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\nconst axis = 1;\nx.mean(axis).print();  // or tf.mean(x, axis)\n```",
                "fileName": "#167",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/reduction_ops.ts#L167-L197",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Reduction"
                },
                "symbolName": "min",
                "paramStr": "(x, axis?, keepDims?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input Tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension(s) to reduce. By default it reduces\nall dimensions.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "keepDims",
                    "documentation": "If true, retains reduced dimensions with size 1.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the minimum value from the input.\n\nReduces the input along the dimensions given in `axes`. Unless `keepDims`\nis true, the rank of the array is reduced by 1 for each entry in `axes`.\nIf `keepDims` is true, the reduced dimensions are retained with length 1.\nIf `axes` has no entries, all dimensions are reduced, and an array with a\nsingle element is returned.\n\n```js\nconst x = tf.tensor1d([1, 2, 3]);\n\nx.min().print();  // or tf.min(x)\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\nconst axis = 1;\nx.min(axis).print();  // or tf.min(x, axis)\n```",
                "fileName": "#226",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/reduction_ops.ts#L226-L243",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Reduction"
                },
                "symbolName": "max",
                "paramStr": "(x, axis?, keepDims?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension(s) to reduce. By default it reduces\nall dimensions.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "keepDims",
                    "documentation": "If true, retains reduced dimensions with size 1.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes the maximum of elements across dimensions of a `Tensor`.\n\nReduces the input along the dimensions given in `axes`. Unless `keepDims`\nis true, the rank of the `Tensor` is reduced by 1 for each entry in `axes`.\nIf `keepDims` is true, the reduced dimensions are retained with length 1.\nIf `axes` has no entries, all dimensions are reduced, and an `Tensor` with\na single element is returned.\n\n```js\nconst x = tf.tensor1d([1, 2, 3]);\n\nx.max().print();  // or tf.max(x)\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n\nconst axis = 1;\nx.max(axis).print();  // or tf.max(x, axis)\n```",
                "fileName": "#272",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/reduction_ops.ts#L272-L289",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Reduction"
                },
                "symbolName": "argMin",
                "paramStr": "(x, axis?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension to reduce. By default it reduces\nacross all axes and returns the flat index.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the indices of the minimum values along an `axis`.\n\nThe result has the same shape as `input` with the dimension along `axis`\nremoved.\n\n```js\nconst x = tf.tensor1d([1, 2, 3]);\n\nx.argMin().print();  // or tf.argMin(x)\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 4, 3], [2, 2]);\n\nconst axis = 1;\nx.argMin(axis).print();  // or tf.argMin(x, axis)\n```",
                "fileName": "#315",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/reduction_ops.ts#L315-L325",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Reduction"
                },
                "symbolName": "argMax",
                "paramStr": "(x, axis?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "axis",
                    "documentation": "The dimension to reduce. By default it reduces\nacross all axes and returns the flat index",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Returns the indices of the maximum values along an `axis`.\n\nThe result has the same shape as `input` with the dimension along `axis`\nremoved.\n\n```js\nconst x = tf.tensor1d([1, 2, 3]);\n\nx.argMax().print();  // or tf.argMax(x)\n```\n\n```js\nconst x = tf.tensor2d([1, 2, 4, 3], [2, 2]);\n\nconst axis = 1;\nx.argMax(axis).print();  // or tf.argMax(x, axis)\n```",
                "fileName": "#350",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/reduction_ops.ts#L350-L361",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Basic math",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "neg",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes `-1 * x` element-wise.\n\n```js\nconst x = tf.tensor2d([1, 2, -2, 0], [2, 2]);\n\nx.neg().print();  // or tf.neg(x)\n```",
                "fileName": "#39",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L39-L46",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "ceil",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input Tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes ceiling of input `Tensor` element-wise: `ceil(x)`\n\n```js\nconst x = tf.tensor1d([.6, 1.1, -3.3]);\n\nx.ceil().print();  // or tf.ceil(x)\n```",
                "fileName": "#58",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L58-L66",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "floor",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes floor of input `Tensor` element-wise: `floor(x)`.\n\n```js\nconst x = tf.tensor1d([.6, 1.1, -3.3]);\n\nx.floor().print();  // or tf.floor(x)\n```",
                "fileName": "#78",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L78-L87",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "exp",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes exponential of the input `Tensor` element-wise. `e ^ x`\n\n```js\nconst x = tf.tensor1d([1, 2, -3]);\n\nx.exp().print();  // or tf.exp(x)\n```",
                "fileName": "#99",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L99-L108",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "log",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes natural logarithm of the input `Tensor` element-wise: `ln(x)`\n\n```js\nconst x = tf.tensor1d([1, 2, Math.E]);\n\nx.log().print();  // or tf.log(x)\n```",
                "fileName": "#120",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L120-L127",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "log1p",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes natural logarithm of the input `Tensor` plus one\nelement-wise: `ln(1 + x)`\n\n```js\nconst x = tf.tensor1d([1, 2, Math.E - 1]);\n\nx.log1p().print();  // or tf.log1p(x)\n```",
                "fileName": "#140",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L140-L147",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "sqrt",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes square root of the input `Tensor` element-wise: `y = sqrt(x)`\n\n```js\nconst x = tf.tensor1d([1, 2, 4, -1]);\n\nx.sqrt().print();  // or tf.sqrt(x)\n```",
                "fileName": "#159",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L159-L166",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "square",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input Tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes square of `x` element-wise: `x ^ 2`\n\n```js\nconst x = tf.tensor1d([1, 2, Math.sqrt(2), -1]);\n\nx.square().print();  // or tf.square(x)\n```",
                "fileName": "#178",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L178-L185",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "abs",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input `Tensor`.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes absolute value element-wise: `abs(x)`\n\n```js\nconst x = tf.tensor1d([-1, 2, -3, 4]);\n\nx.abs().print();  // or tf.abs(x)\n```",
                "fileName": "#197",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L197-L204",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "clipByValue",
                "paramStr": "(x, clipValueMin, clipValueMax)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "clipValueMin",
                    "documentation": "Lower-bound of range to be clipped to.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "clipValueMax",
                    "documentation": "Upper-bound of range to be clipped to.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Clips values element-wise. `max(min(x, clipValueMax), clipValueMin)`\n\n```js\nconst x = tf.tensor1d([-1, 2, -3, 4]);\n\nx.clipByValue(-2, 3).print();  // or tf.clipByValue(x, -2, 3)\n```",
                "fileName": "#218",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L218-L238",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "relu",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes rectified linear element-wise: `max(x, 0)`\n\n```js\nconst x = tf.tensor1d([-1, 2, -3, 4]);\n\nx.relu().print();  // or tf.relu(x)\n```",
                "fileName": "#250",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L250-L258",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "elu",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes exponential linear element-wise, `x > 0 ? e ^ x - 1 : 0`\n\n```js\nconst x = tf.tensor1d([-1, 1, -3, 2]);\n\nx.elu().print();  // or tf.elu(x)\n```",
                "fileName": "#270",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L270-L277",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "selu",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes scaled exponential linear element-wise.\n\n`x < 0 ? scale * alpha * (exp(x) - 1) : x`\n\n```js\nconst x = tf.tensor1d([-1, 2, -3, 4]);\n\nx.selu().print();  // or tf.selu(x)\n```",
                "fileName": "#291",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L291-L310",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "leakyRelu",
                "paramStr": "(x, alpha?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "alpha",
                    "documentation": "The scaling factor for negative values, defaults to 0.2.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes leaky rectified linear element-wise.\n\nSee\n[http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf](\n     http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf)\n\n```js\nconst x = tf.tensor1d([-1, 2, -3, 4]);\n\nx.leakyRelu(0.1).print();  // or tf.leakyRelu(x, 0.1)\n```",
                "fileName": "#327",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L327-L335",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "prelu",
                "paramStr": "(x, alpha)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "alpha",
                    "documentation": "Scaling factor for negative values.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes leaky rectified linear element-wise with parametric alphas.\n\n`x < 0 ? alpha * x : f(x) = x`\n\n```js\nconst x = tf.tensor1d([-1, 2, -3, 4]);\nconst alpha = tf.scalar(0.1);\n\nx.prelu(alpha).print();  // or tf.prelu(x, alpha)\n```",
                "fileName": "#351",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L351-L358",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "sigmoid",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes sigmoid element-wise, `1 / (1 + exp(-x))`\n\n```js\nconst x = tf.tensor1d([0, -1, 2, -3]);\n\nx.sigmoid().print();  // or tf.sigmoid(x)\n```",
                "fileName": "#370",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L370-L379",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "sin",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes sin of the input Tensor element-wise: `sin(x)`\n\n```js\nconst x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n\nx.sin().print();  // or tf.sin(x)\n```",
                "fileName": "#391",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L391-L398",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "cos",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes cos of the input `Tensor` element-wise: `cos(x)`\n\n```js\nconst x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n\nx.cos().print();  // or tf.cos(x)\n```",
                "fileName": "#410",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L410-L417",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "tan",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes tan of the input `Tensor` element-wise, `tan(x)`\n\n```js\nconst x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);\n\nx.tan().print();  // or tf.tan(x)\n```",
                "fileName": "#429",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L429-L436",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "asin",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes asin of the input `Tensor` element-wise: `asin(x)`\n\n```js\nconst x = tf.tensor1d([0, 1, -1, .7]);\n\nx.asin().print();  // or tf.asin(x)\n```",
                "fileName": "#448",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L448-L458",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "acos",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes acos of the input `Tensor` element-wise: `acos(x)`\n\n```js\nconst x = tf.tensor1d([0, 1, -1, .7]);\n\nx.acos().print();  // or tf.acos(x)\n```",
                "fileName": "#470",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L470-L481",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "atan",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes atan of the input `Tensor` element-wise: `atan(x)`\n\n```js\nconst x = tf.tensor1d([0, 1, -1, .7]);\n\nx.atan().print();  // or tf.atan(x)\n```",
                "fileName": "#493",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L493-L500",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "sinh",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes hyperbolic sin of the input `Tensor` element-wise: `sinh(x)`\n\n```js\nconst x = tf.tensor1d([0, 1, -1, .7]);\n\nx.sinh().print();  // or tf.sinh(x)\n```",
                "fileName": "#512",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L512-L519",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "cosh",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes hyperbolic cos of the input `Tensor` element-wise: `cosh(x)`\n\n```js\nconst x = tf.tensor1d([0, 1, -1, .7]);\n\nx.cosh().print();  // or tf.cosh(x)\n```",
                "fileName": "#531",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L531-L538",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "tanh",
                "paramStr": "(x)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes hyperbolic tangent of the input `Tensor` element-wise: `tanh(x)`\n\n```js\nconst x = tf.tensor1d([0, 1, -1, 70]);\n\nx.tanh().print();  // or tf.tanh(x)\n```",
                "fileName": "#550",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L550-L559",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Basic math"
                },
                "symbolName": "step",
                "paramStr": "(x, alpha?)",
                "parameters": [
                  {
                    "name": "x",
                    "documentation": "The input tensor.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "alpha",
                    "documentation": "The gradient when input is negative.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes step of the input `Tensor` element-wise: `x > 0 ? 1 : alpha * x`\n\n```js\nconst x = tf.tensor1d([0, 2, -1, -3]);\n\nx.step(.5).print();  // or tf.step(x, .5)\n```",
                "fileName": "#572",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/unary_ops.ts#L572-L580",
                "isFunction": true
              }
            ]
          }
        ]
      },
      {
        "name": "Training",
        "description": "",
        "subheadings": [
          {
            "name": "Losses",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Losses",
                  "namespace": "losses"
                },
                "symbolName": "softmaxCrossEntropy",
                "namespace": "losses",
                "paramStr": "(labels, logits, dim?)",
                "parameters": [
                  {
                    "name": "labels",
                    "documentation": "The labels array.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "logits",
                    "documentation": "The logits array.",
                    "type": "Tensor",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "dim",
                    "documentation": "The dimension softmax would be performed on. Defaults to `-1`\nwhich indicates the last dimension.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor",
                "documentation": "Computes softmax cross entropy between logits and labels.\n\nMeasures the probability error in discrete classification tasks in which\nthe classes are mutually exclusive (each entry is in exactly one class).\nFor example, each CIFAR-10 image is labeled with one and only one label: an\nimage can be a dog or a truck, but not both.\n\n`NOTE`: While the classes are mutually exclusive, their probabilities need\nnot be. All that is required is that each row of labels is a valid\nprobability distribution. If they are not, the computation of the gradient\nwill be incorrect.\n\n`WARNING`: This op expects unscaled logits, since it performs a softmax on\nlogits internally for efficiency. Do not call this op with the output of\nsoftmax, as it will produce incorrect results.\n\nlogits and labels must have the same shape, e.g. [batch_size, num_classes]\nand the same dtype.",
                "fileName": "#103",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/ops/softmax.ts#L103-L136",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Gradients",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Gradients"
                },
                "symbolName": "grad",
                "paramStr": "(f)",
                "parameters": [
                  {
                    "name": "f",
                    "documentation": "The function f(x), to compute gradient for.",
                    "type": "(x: Tensor) => Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "(x: Tensor, dy?: Tensor) => Tensor",
                "documentation": "Provided `f(x)`, returns another function `g(x, dy?)`, which gives the\ngradient of `f(x)` with respect to `x`.\n\nIf `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to\n`x` is computed instead. `f(x)` must take a single tensor `x` and return a\nsingle tensor `y`. If `f()` takes multiple inputs, use `grads` instead.\n\n```js\n// f(x) = x ^ 2\nconst f = x => x.square();\n// f'(x) = 2x\nconst g = tf.grad(f);\n\nconst x = tf.tensor1d([2, 3]);\ng(x).print();\n```\n\n```js\n// f(x) = x ^ 3\nconst f = x => x.pow(tf.scalar(3, 'int32'));\n// f'(x) = 3x ^ 2\nconst g = tf.grad(f);\n// f''(x) = 6x\nconst gg = tf.grad(g);\n\nconst x = tf.tensor1d([2, 3]);\ngg(x).print();\n```",
                "fileName": "#76",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/gradients.ts#L76-L98",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Gradients"
                },
                "symbolName": "grads",
                "paramStr": "(f)",
                "parameters": [
                  {
                    "name": "f",
                    "documentation": "The function `f(x1, x2,...)` to compute gradients for.",
                    "type": "(...args: Tensor[]) => Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "(args: Tensor[], dy?: Tensor) => Tensor[]",
                "documentation": "Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,\nwhich gives an array of gradients of `f()` with respect to each input\n[`x1`,`x2`,...].\n\nIf `dy` is passed when calling `g()`, the gradient of\n`f(x1,...).mul(dy).sum()` with respect to each input is computed instead.\nThe provided `f` must take one or more tensors and return a single tensor\n`y`. If `f()` takes a single input, we recommend using `grad` instead.\n\n```js\n// f(a, b) = a * b\nconst f = (a, b) => a.mul(b);\n// df / da = b, df / db = a\nconst g = tf.grads(f);\n\nconst a = tf.tensor1d([2, 3]);\nconst b = tf.tensor1d([-2, -3]);\nconst [da, db] = g([a, b]);\nconsole.log('da');\nda.print();\nconsole.log('db');\ndb.print();\n```",
                "fileName": "#127",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/gradients.ts#L127-L150",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Gradients"
                },
                "symbolName": "valueAndGrad",
                "paramStr": "(f)",
                "parameters": [
                  {
                    "name": "f",
                    "documentation": "",
                    "type": "(x: Tensor) => Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "(x: Tensor, dy?: Tensor) => {\n        value: Tensor;\n        grad: Tensor;\n      }",
                "documentation": "Like `grad`, but also returns the value of `f()`. Useful when `f()`\nreturns a metric you want to show.\n\nThe result is a rich object with the following properties:\n- grad: The gradient of `f(x)` w.r.t `x` (result of `grad`).\n- value: The value returned by `f(x)`.\n\n```js\n// f(x) = x ^ 2\nconst f = x => x.square();\n// f'(x) = 2x\nconst g = tf.valueAndGrad(f);\n\nconst x = tf.tensor1d([2, 3]);\nconst {value, grad} = g(x);\n\nconsole.log('value');\nvalue.print();\nconsole.log('grad');\ngrad.print();\n```",
                "fileName": "#175",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/gradients.ts#L175-L195",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Gradients"
                },
                "symbolName": "valueAndGrads",
                "paramStr": "(f)",
                "parameters": [
                  {
                    "name": "f",
                    "documentation": "",
                    "type": "(...args: Tensor[]) => Tensor",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "(args: Tensor[], dy?: Tensor) => {\n        grads: Tensor[];\n        value: Tensor;\n      }",
                "documentation": "Like `grads`, but returns also the value of `f()`. Useful when `f()`\nreturns a metric you want to show.\n\nThe result is a rich object with the following properties:\n- grads: The gradients of `f()` w.r.t each input (result of `grads`).\n- value: The value returned by `f(x)`.\n\n```js\n// f(a, b) = a * b\nconst f = (a, b) => a.mul(b);\n// df/da = b, df/db = a\nconst g = tf.valueAndGrads(f);\n\nconst a = tf.tensor1d([2, 3]);\nconst b = tf.tensor1d([-2, -3]);\nconst {value, grads} = g([a, b]);\n\nconst [da, db] = grads;\n\nconsole.log('value');\nvalue.print();\n\nconsole.log('da');\nda.print();\nconsole.log('db');\ndb.print();\n```",
                "fileName": "#226",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/gradients.ts#L226-L252",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Gradients"
                },
                "symbolName": "variableGrads",
                "paramStr": "(f, varList?)",
                "parameters": [
                  {
                    "name": "f",
                    "documentation": "The function to execute. f() should return a scalar.",
                    "type": "() => Scalar",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "varList",
                    "documentation": "The list of trainable variables. Defaults to all variables.",
                    "type": "Variable[]",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "{value: Scalar, grads: {[name: string]: Tensor}}",
                "documentation": "Computes and returns the gradient of f(x) with respect to the list of\ntrainable variables provided by `varList`. If no list is provided, it\ndefaults to all trainable variables.\n\n```js\nconst a = tf.variable(tf.tensor1d([3, 4]));\nconst b = tf.variable(tf.tensor1d([5, 6]));\nconst x = tf.tensor1d([1, 2]);\n\n// f(a, b) = a * x ^ 2 + b * x\nconst f = () => a.mul(x.square()).add(b.mul(x)).sum();\n// df/da = x ^ 2, df/db = x\nconst {value, grads} = tf.variableGrads(f);\n\nObject.keys(grads).forEach(varName => grads[varName].print());\n```",
                "fileName": "#275",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/gradients.ts#L275-L323",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Gradients"
                },
                "symbolName": "customGrad",
                "paramStr": "(f)",
                "parameters": [
                  {
                    "name": "f",
                    "documentation": "The function to evaluate in forward mode, which should return\n`{value: Tensor, gradFunc: (dy) => Tensor[]}`, where `gradFunc` returns\nthe custom gradients of `f` with respect to its inputs.",
                    "type": "(a: Tensor, b: Tensor,...) => {\nvalue: Tensor,\ngradFunc: (dy: Tensor) => Tensor|Tensor[]\n}",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "(...args: Tensor[]) => Tensor",
                "documentation": "Overrides the gradient computation of a function `f`.\n\nTakes a function\n`f(...inputs) => {value: Tensor, gradFunc: dy => Tensor[]}` and returns\nanother function `g(...inputs)` which takes the same inputs as `f`. When\ncalled, `g` returns `f().value`. In backward mode, custom gradients with\nrespect to each input of `f` are computed using `f().gradFunc`.\n\n```js\nconst customOp = tf.customGrad(x => {\n   // Override gradient of our custom x ^ 2 op to be dy * abs(x);\n   return {value: x.square(), gradFunc: dy => [dy.mul(x.abs())]};\n});\n\nconst x = tf.tensor1d([-1, -2, 3]);\nconst dx = tf.grad(x => customOp(x));\n\nconsole.log(`f(x):`);\ncustomOp(x).print();\nconsole.log(`f'(x):`);\ndx(x).print();\n```",
                "fileName": "#353",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/gradients.ts#L353-L357",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Classes",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Classes",
                  "namespace": "train"
                },
                "symbolName": "Optimizer",
                "namespace": "train",
                "documentation": "",
                "fileName": "#23",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/optimizers/optimizer.ts#L23-L75",
                "methods": [
                  {
                    "docInfo": {
                      "heading": "Training",
                      "subheading": "Optimizers"
                    },
                    "symbolName": "minimize",
                    "paramStr": "(f, returnCost?, varList?)",
                    "parameters": [
                      {
                        "name": "f",
                        "documentation": "The function to execute and whose output to minimize.",
                        "type": "() => Scalar",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "returnCost",
                        "documentation": "Whether to return the scalar cost value produced by\nexecuting `f()`.",
                        "type": "boolean",
                        "optional": true,
                        "isConfigParam": false
                      },
                      {
                        "name": "varList",
                        "documentation": "An optional list of variables to update. If specified, only\nthe trainable variables in varList will be updated by minimize. Defaults to\nall trainable variables.",
                        "type": "Variable[]",
                        "optional": true,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Scalar\n      |null",
                    "documentation": "Executes `f()` and minimizes the scalar output of `f()` by computing\ngradients of y with respect to the list of trainable variables provided by\n`varList`. If no list is provided, it defaults to all trainable variables.",
                    "fileName": "#36",
                    "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/optimizers/optimizer.ts#L36-L53",
                    "isFunction": true
                  }
                ],
                "isClass": true
              }
            ]
          },
          {
            "name": "Optimizers",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Optimizers",
                  "namespace": "train"
                },
                "symbolName": "sgd",
                "namespace": "train",
                "paramStr": "(learningRate)",
                "parameters": [
                  {
                    "name": "learningRate",
                    "documentation": "The learning rate to use for the SGD algorithm.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "SGDOptimizer",
                "documentation": "Constructs a `SGDOptimizer` that uses stochastic gradient descent.\n\n```js\n// Fit a quadratic function by learning the coefficients a, b, c.\nconst xs = tf.tensor1d([0, 1, 2, 3]);\nconst ys = tf.tensor1d([1.1, 5.9, 16.8, 33.9]);\n\nconst a = tf.scalar(Math.random()).variable();\nconst b = tf.scalar(Math.random()).variable();\nconst c = tf.scalar(Math.random()).variable();\n\n// y = a * x^2 + b * x + c.\nconst f = x => a.mul(x.square()).add(b.mul(x)).add(c);\nconst loss = (pred, label) => pred.sub(label).square().mean();\n\nconst learningRate = 0.01;\nconst optimizer = tf.train.sgd(learningRate);\n\n// Train the model.\nfor (let i = 0; i < 10; i++) {\n   optimizer.minimize(() => loss(f(xs), ys));\n}\n\n// Make predictions.\nconsole.log(\n     `a: ${a.dataSync()}, b: ${b.dataSync()}, c: ${c.dataSync()}`);\nconst preds = f(xs).dataSync();\npreds.forEach((pred, i) => {\n   console.log(`x: ${i}, pred: ${pred}`);\n});\n```",
                "fileName": "#64",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/optimizers/optimizer_constructors.ts#L64-L67",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Optimizers",
                  "namespace": "train"
                },
                "symbolName": "momentum",
                "namespace": "train",
                "paramStr": "(learningRate, momentum, useNesterov?)",
                "parameters": [
                  {
                    "name": "learningRate",
                    "documentation": "The learning rate to use for the Momentum gradient\ndescent algorithm.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "momentum",
                    "documentation": "The momentum to use for the momentum gradient descent\nalgorithm.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "useNesterov",
                    "documentation": "",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "MomentumOptimizer",
                "documentation": "Constructs a `MomentumOptimizer` that uses momentum gradient\ndescent.\n\nSee\n[http://proceedings.mlr.press/v28/sutskever13.pdf](\nhttp://proceedings.mlr.press/v28/sutskever13.pdf)",
                "fileName": "#82",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/optimizers/optimizer_constructors.ts#L82-L86",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Optimizers",
                  "namespace": "train"
                },
                "symbolName": "rmsprop",
                "namespace": "train",
                "paramStr": "(learningRate, decay?, momentum?, epsilon?)",
                "parameters": [
                  {
                    "name": "learningRate",
                    "documentation": "The learning rate to use for the RMSProp gradient\ndescent algorithm.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "decay",
                    "documentation": "The discounting factor for the history/coming gradient.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "momentum",
                    "documentation": "The momentum to use for the RMSProp gradient descent\nalgorithm.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "epsilon",
                    "documentation": "Small value to avoid zero denominator.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "RMSPropOptimizer",
                "documentation": "Constructs a `RMSPropOptimizer` that uses RMSProp gradient\ndescent. This implementation uses plain momentum and is not centered\nversion of RMSProp.\n\nSee\n[http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf](\nhttp://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)",
                "fileName": "#104",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/optimizers/optimizer_constructors.ts#L104-L109",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Optimizers",
                  "namespace": "train"
                },
                "symbolName": "adam",
                "namespace": "train",
                "paramStr": "(learningRate?, beta1?, beta2?, epsilon?)",
                "parameters": [
                  {
                    "name": "learningRate",
                    "documentation": "The learning rate to use for the Adam gradient\ndescent algorithm.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "beta1",
                    "documentation": "The exponential decay rate for the 1st moment estimates.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "beta2",
                    "documentation": "The exponential decay rate for the 2nd moment estimates.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "epsilon",
                    "documentation": "A small constant for numerical stability.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "AdamOptimizer",
                "documentation": "Constructs a `AdamOptimizer` that uses the Adam algorithm.\nSee [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)",
                "fileName": "#121",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/optimizers/optimizer_constructors.ts#L121-L125",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Optimizers",
                  "namespace": "train"
                },
                "symbolName": "adadelta",
                "namespace": "train",
                "paramStr": "(learningRate?, rho?, epsilon?)",
                "parameters": [
                  {
                    "name": "learningRate",
                    "documentation": "The learning rate to use for the Adadelta gradient\ndescent algorithm.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "rho",
                    "documentation": "The learning rate decay over each update.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "epsilon",
                    "documentation": "A constant epsilon used to better condition the grad\nupdate.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "AdadeltaOptimizer",
                "documentation": "Constructs a `AdadeltaOptimizer` that uses the Adadelta algorithm.\nSee [https://arxiv.org/abs/1212.5701](https://arxiv.org/abs/1212.5701)",
                "fileName": "#137",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/optimizers/optimizer_constructors.ts#L137-L141",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Optimizers",
                  "namespace": "train"
                },
                "symbolName": "adamax",
                "namespace": "train",
                "paramStr": "(learningRate?, beta1?, beta2?, epsilon?, decay?)",
                "parameters": [
                  {
                    "name": "learningRate",
                    "documentation": "The learning rate to use for the Adamax gradient\ndescent algorithm.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "beta1",
                    "documentation": "The exponential decay rate for the 1st moment estimates.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "beta2",
                    "documentation": "The exponential decay rate for the 2nd moment estimates.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "epsilon",
                    "documentation": "A small constant for numerical stability.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "decay",
                    "documentation": "The learning rate decay over each update.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "AdamaxOptimizer",
                "documentation": "Constructs a `AdamaxOptimizer` that uses the Adamax algorithm.\nSee [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)",
                "fileName": "#154",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/optimizers/optimizer_constructors.ts#L154-L159",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Training",
                  "subheading": "Optimizers",
                  "namespace": "train"
                },
                "symbolName": "adagrad",
                "namespace": "train",
                "paramStr": "(learningRate, initialAccumulatorValue?)",
                "parameters": [
                  {
                    "name": "learningRate",
                    "documentation": "The learning rate to use for the Adagrad gradient\ndescent algorithm.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "initialAccumulatorValue",
                    "documentation": "Starting value for the accumulators, must be\npositive.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "AdagradOptimizer",
                "documentation": "Constructs a `AdagradOptimizer` that uses the Adagrad algorithm.\nSee\n[http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf](\nhttp://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)\nor\n[http://ruder.io/optimizing-gradient-descent/index.html#adagrad](\nhttp://ruder.io/optimizing-gradient-descent/index.html#adagrad)",
                "fileName": "#175",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/optimizers/optimizer_constructors.ts#L175-L179",
                "isFunction": true
              }
            ]
          }
        ]
      },
      {
        "name": "Environment",
        "description": "",
        "subheadings": [
          {
            "name": "",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Environment",
                  "subheading": ""
                },
                "symbolName": "setBackend",
                "paramStr": "(backendType, safeMode?)",
                "parameters": [
                  {
                    "name": "backendType",
                    "documentation": "The backend type. Currently supports `'webgl'|'cpu'`.",
                    "type": "'webgl'|'cpu'",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "safeMode",
                    "documentation": "Defaults to false. In safe mode, you are forced to\nconstruct tensors and call math operations inside a `tidy()` which\nwill automatically clean up intermediate tensors.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "void",
                "documentation": "Sets the backend (cpu, webgl, etc) responsible for creating tensors and\nexecuting operations on those tensors.",
                "fileName": "#228",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/environment.ts#L228-L234",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Environment",
                  "subheading": ""
                },
                "symbolName": "getBackend",
                "paramStr": "()",
                "parameters": [],
                "returnType": "'webgl'|'cpu'",
                "documentation": "Returns the current backend (cpu, webgl, etc). The backend is responsible\nfor creating tensors and executing operations on those tensors.",
                "fileName": "#240",
                "githubUrl": "https://github.com/tensorflow/tfjs-core/blob/v0.6.0/src/environment.ts#L240-L244",
                "isFunction": true
              }
            ]
          }
        ]
      }
    ]
  },
  "docLinkAliases": {
    "Scalar": "Tensor",
    "Tensor1D": "Tensor",
    "Tensor2D": "Tensor",
    "Tensor3D": "Tensor",
    "Tensor4D": "Tensor",
    "AdadeltaOptimizer": "Optimizer",
    "AdagradOptimizer": "Optimizer",
    "SGDOptimizer": "Optimizer",
    "MomentumOptimizer": "Optimizer",
    "RMSPropOptimizer": "Optimizer"
  }
}
