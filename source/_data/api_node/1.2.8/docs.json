{
  "headings": [
    {
      "name": "TensorBoard",
      "description": "<p>Functions for visualizing training in  \n<a href=\"https://github.com/tensorflow/tensorboard\">TensorBoard</a></p>",
      "subheadings": [
        {
          "symbols": [
            {
              "docInfo": {
                "heading": "TensorBoard",
                "namespace": "node"
              },
              "symbolName": "summaryFileWriter",
              "namespace": "node",
              "paramStr": "(logdir, maxQueue?, flushMillis?, filenameSuffix?)",
              "parameters": [
                {
                  "name": "logdir",
                  "documentation": "Log directory in which the summary data will be written.",
                  "type": "string",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "maxQueue",
                  "documentation": "Maximum queue length (default: `10`).",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "flushMillis",
                  "documentation": "Flush every __ milliseconds (default: `120e3`, i.e,\n`120` seconds).",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "filenameSuffix",
                  "documentation": "Suffix of the protocol buffer file names to be\nwritten in the `logdir` (default: `.v2`).",
                  "type": "string",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "SummaryFileWriter",
              "documentation": "Create a summary file writer for TensorBoard.\n\nExample:\n```js\nconst tf = require('@tensorflow/tfjs-node');\n\nconst summaryWriter = tf.node.summaryFileWriter('/tmp/tfjs_tb_logdir');\n\nfor (let step = 0; step < 100; ++step) {\n summaryWriter.scalar('dummyValue', Math.sin(2 * Math.PI * step / 8), step);\n}\n```",
              "fileName": "#94",
              "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v1.2.8/tfjs-node/src/tensorboard.ts#L94-L112",
              "isFunction": true,
              "displayName": "tf.node.summaryFileWriter",
              "urlHash": "node.summaryFileWriter"
            },
            {
              "docInfo": {
                "heading": "TensorBoard",
                "namespace": "node"
              },
              "symbolName": "tensorBoard",
              "namespace": "node",
              "paramStr": "(logdir?, args?)",
              "parameters": [
                {
                  "name": "logdir",
                  "documentation": "Directory to which the logs will be written.",
                  "type": "string",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "args",
                  "documentation": "Optional configuration arguments.",
                  "type": "Object",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "updateFreq",
                  "type": "'batch'|'epoch'",
                  "documentation": "The frequency at which loss and metric values are written to logs.\n\nCurrently supported options are:\n\n- 'batch': Write logs at the end of every batch of training, in addition\n   to the end of every epoch of training.\n- 'epoch': Write logs at the end of every epoch of training.\n\nNote that writing logs too often slows down the training.\n\nDefault: 'epoch'.",
                  "optional": false,
                  "isConfigParam": true
                }
              ],
              "returnType": "TensorBoardCallback",
              "documentation": "Callback for logging to TensorBoard durnig training.\n\nWrites the loss and metric values (if any) to the specified log directory\n(`logdir`) which can be ingested and visualized by TensorBoard.\nThis callback is usually passed as a callback to `tf.Model.fit()` or\n`tf.Model.fitDataset()` calls during model training. The frequency at which\nthe values are logged can be controlled with the `updateFreq` field of the\nconfiguration object (2nd argument).\n\nUsage example:\n```js\n// Constructor a toy multilayer-perceptron regressor for demo purpose.\nconst model = tf.sequential();\nmodel.add(\n    tf.layers.dense({units: 100, activation: 'relu', inputShape: [200]}));\nmodel.add(tf.layers.dense({units: 1}));\nmodel.compile({\n  loss: 'meanSquaredError',\n  optimizer: 'sgd',\n  metrics: ['MAE']\n});\n\n// Generate some random fake data for demo purpose.\nconst xs = tf.randomUniform([10000, 200]);\nconst ys = tf.randomUniform([10000, 1]);\nconst valXs = tf.randomUniform([1000, 200]);\nconst valYs = tf.randomUniform([1000, 1]);\n\n// Start model training process.\nawait model.fit(xs, ys, {\n  epochs: 100,\n  validationData: [valXs, valYs],\n   // Add the tensorBoard callback here.\n  callbacks: tf.node.tensorBoard('/tmp/fit_logs_1')\n});\n```\n\nThen you can use the following commands to point tensorboard\nto the logdir:\n\n```sh\npip install tensorboard  # Unless you've already installed it.\ntensorboard --logdir /tmp/fit_logs_1\n```",
              "fileName": "#325",
              "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v1.2.8/tfjs-node/src/callbacks.ts#L325-L328",
              "isFunction": true,
              "displayName": "tf.node.tensorBoard",
              "urlHash": "node.tensorBoard"
            }
          ]
        }
      ]
    },
    {
      "name": "Operations",
      "description": "",
      "subheadings": [
        {
          "name": "Images",
          "symbols": [
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Images",
                "namespace": "node"
              },
              "symbolName": "decodeBmp",
              "namespace": "node",
              "paramStr": "(contents, channels?)",
              "parameters": [
                {
                  "name": "contents",
                  "documentation": "The BMP-encoded image in an Uint8Array.",
                  "type": "Uint8Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "channels",
                  "documentation": "An optional int. Defaults to 0. Accepted values are\n0: use the number of channels in the BMP-encoded image.\n3: output an RGB image.\n4: output an RGBA image.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "Tensor3D",
              "documentation": "Decode the first frame of a BMP-encoded image to a 3D Tensor of dtype\n`int32`.",
              "fileName": "#113",
              "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v1.2.8/tfjs-node/src/decode_image.ts#L113-L118",
              "isFunction": true,
              "displayName": "tf.node.decodeBmp",
              "urlHash": "node.decodeBmp"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Images",
                "namespace": "node"
              },
              "symbolName": "decodeGif",
              "namespace": "node",
              "paramStr": "(contents)",
              "parameters": [
                {
                  "name": "contents",
                  "documentation": "The GIF-encoded image in an Uint8Array.",
                  "type": "Uint8Array",
                  "optional": false,
                  "isConfigParam": false
                }
              ],
              "returnType": "Tensor4D",
              "documentation": "Decode the frame(s) of a GIF-encoded image to a 4D Tensor of dtype `int32`.",
              "fileName": "#130",
              "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v1.2.8/tfjs-node/src/decode_image.ts#L130-L135",
              "isFunction": true,
              "displayName": "tf.node.decodeGif",
              "urlHash": "node.decodeGif"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Images",
                "namespace": "node"
              },
              "symbolName": "decodeImage",
              "namespace": "node",
              "paramStr": "(content, channels?, dtype?, expandAnimations?)",
              "parameters": [
                {
                  "name": "content",
                  "documentation": "The encoded image in an Uint8Array.",
                  "type": "Uint8Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "channels",
                  "documentation": "An optional int. Defaults to 0, use the number of channels in\nthe image. Number of color channels for the decoded image. It is used\nwhen image is type Png, Bmp, or Jpeg.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "dtype",
                  "documentation": "The data type of the result. Only `int32` is supported at this\ntime.",
                  "type": "string",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "expandAnimations",
                  "documentation": "A boolean which controls the shape of the returned\nop's output. If True, the returned op will produce a 3-D tensor for PNG,\nJPEG, and BMP files; and a 4-D tensor for all GIFs, whether animated or\nnot. If, False, the returned op will produce a 3-D tensor for all file\ntypes and will truncate animated GIFs to the first frame.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "Tensor3D|Tensor4D",
              "documentation": "Given the encoded bytes of an image, it returns a 3D or 4D tensor of the\ndecoded image. Supports BMP, GIF, JPEG and PNG formats.",
              "fileName": "#160",
              "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v1.2.8/tfjs-node/src/decode_image.ts#L160-L191",
              "isFunction": true,
              "displayName": "tf.node.decodeImage",
              "urlHash": "node.decodeImage"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Images",
                "namespace": "node"
              },
              "symbolName": "decodeJpeg",
              "namespace": "node",
              "paramStr": "(contents, channels?, ratio?, fancyUpscaling?, tryRecoverTruncated?, acceptableFraction?, dctMethod?)",
              "parameters": [
                {
                  "name": "contents",
                  "documentation": "The JPEG-encoded image in an Uint8Array.",
                  "type": "Uint8Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "channels",
                  "documentation": "An optional int. Defaults to 0. Accepted values are\n0: use the number of channels in the PNG-encoded image.\n1: output a grayscale image.\n3: output an RGB image.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "ratio",
                  "documentation": "An optional int. Defaults to 1. Downscaling ratio. It is used\nwhen image is type Jpeg.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "fancyUpscaling",
                  "documentation": "An optional bool. Defaults to True. If true use a\nslower but nicer upscaling of the chroma planes. It is used when image is\ntype Jpeg.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "tryRecoverTruncated",
                  "documentation": "An optional bool. Defaults to False. If true try\nto recover an image from truncated input. It is used when image is type\nJpeg.",
                  "type": "boolean",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "acceptableFraction",
                  "documentation": "An optional float. Defaults to 1. The minimum\nrequired fraction of lines before a truncated input is accepted. It is\nused when image is type Jpeg.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "dctMethod",
                  "documentation": "An optional string. Defaults to \"\". string specifying a hint\nabout the algorithm used for decompression. Defaults to \"\" which maps to\na system-specific default. Currently valid values are [\"INTEGER_FAST\",\n\"INTEGER_ACCURATE\"]. The hint may be ignored (e.g., the internal jpeg\nlibrary changes to a version that does not have that specific option.) It\nis used when image is type Jpeg.",
                  "type": "string",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "Tensor3D",
              "documentation": "Decode a JPEG-encoded image to a 3D Tensor of dtype `int32`.",
              "fileName": "#58",
              "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v1.2.8/tfjs-node/src/decode_image.ts#L58-L70",
              "isFunction": true,
              "displayName": "tf.node.decodeJpeg",
              "urlHash": "node.decodeJpeg"
            },
            {
              "docInfo": {
                "heading": "Operations",
                "subheading": "Images",
                "namespace": "node"
              },
              "symbolName": "decodePng",
              "namespace": "node",
              "paramStr": "(contents, channels?, dtype?)",
              "parameters": [
                {
                  "name": "contents",
                  "documentation": "The BMP-encoded image in an Uint8Array.",
                  "type": "Uint8Array",
                  "optional": false,
                  "isConfigParam": false
                },
                {
                  "name": "channels",
                  "documentation": "An optional int. Defaults to 0. Accepted values are\n0: use the number of channels in the PNG-encoded image.\n1: output a grayscale image.\n3: output an RGB image.\n4: output an RGBA image.",
                  "type": "number",
                  "optional": true,
                  "isConfigParam": false
                },
                {
                  "name": "dtype",
                  "documentation": "The data type of the result. Only `int32` is supported at this\ntime.",
                  "type": "string",
                  "optional": true,
                  "isConfigParam": false
                }
              ],
              "returnType": "Tensor3D",
              "documentation": "Decode a PNG-encoded image to a 3D Tensor of dtype `int32`.",
              "fileName": "#88",
              "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v1.2.8/tfjs-node/src/decode_image.ts#L88-L97",
              "isFunction": true,
              "displayName": "tf.node.decodePng",
              "urlHash": "node.decodePng"
            }
          ]
        }
      ]
    }
  ]
}