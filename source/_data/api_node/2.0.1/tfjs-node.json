{
  "docs": {
    "headings": [
      {
        "name": "Environment",
        "description": "",
        "subheadings": [
          {
            "symbols": [
              {
                "docInfo": {
                  "heading": "Environment"
                },
                "symbolName": "Environment",
                "documentation": "The environment contains evaluated flags as well as the registered platform.\nThis is always used as a global singleton and can be retrieved with\n`tf.env()`.",
                "fileName": "#39",
                "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/node_modules/@tensorflow/tfjs-core/src/environment.ts#L39-L165",
                "methods": [],
                "isClass": true
              },
              {
                "docInfo": {
                  "heading": "Environment"
                },
                "symbolName": "env",
                "paramStr": "()",
                "parameters": [],
                "returnType": "Environment",
                "documentation": "Returns the current environment (a global singleton).\n\nThe environment object contains the evaluated feature values as well as the\nactive platform.",
                "fileName": "#199",
                "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/node_modules/@tensorflow/tfjs-core/src/environment.ts#L199-L201",
                "isFunction": true
              }
            ]
          }
        ]
      },
      {
        "name": "Util",
        "description": "",
        "subheadings": [
          {
            "symbols": [
              {
                "docInfo": {
                  "heading": "Util",
                  "namespace": "util"
                },
                "symbolName": "shuffle",
                "namespace": "util",
                "paramStr": "(array)",
                "parameters": [
                  {
                    "name": "array",
                    "documentation": "The array to shuffle in-place.",
                    "type": "any[]|Uint32Array|Int32Array|\n                        Float32Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "void",
                "documentation": "Shuffles the array in-place using Fisher-Yates algorithm.\n\n```js\nconst a = [1, 2, 3, 4, 5];\ntf.util.shuffle(a);\nconsole.log(a);\n```",
                "fileName": "#35",
                "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/node_modules/@tensorflow/tfjs-core/src/util.ts#L35-L51",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Util",
                  "namespace": "util"
                },
                "symbolName": "assert",
                "namespace": "util",
                "paramStr": "(expr, msg)",
                "parameters": [
                  {
                    "name": "expr",
                    "documentation": "The expression to assert (as a boolean).",
                    "type": "boolean",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "msg",
                    "documentation": "A function that returns the message to report when throwing an\nerror. We use a function for performance reasons.",
                    "type": "() => string",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "void",
                "documentation": "Asserts that the expression is true. Otherwise throws an error with the\nprovided message.\n\n```js\nconst x = 2;\ntf.util.assert(x === 2, 'x is not 2');\n```",
                "fileName": "#106",
                "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/node_modules/@tensorflow/tfjs-core/src/util.ts#L106-L110",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Util",
                  "namespace": "util"
                },
                "symbolName": "flatten",
                "namespace": "util",
                "paramStr": "(arr, result?, skipTypedArray?)",
                "parameters": [
                  {
                    "name": "arr",
                    "documentation": "The nested array to flatten.",
                    "type": "number|boolean|string|Promise<number>|TypedArray|RecursiveArray|TypedArray>",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "result",
                    "documentation": "The destination array which holds the elements.",
                    "type": "number|boolean|string|Promise<number>|TypedArray[]",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "skipTypedArray",
                    "documentation": "If true, avoids flattening the typed arrays. Defaults\nto false.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "number|boolean|string|Promise<number>|TypedArray[]",
                "documentation": "Flattens an arbitrarily nested array.\n\n```js\nconst a = [[1, 2], [3, 4], [5, [6, [7]]]];\nconst flat = tf.util.flatten(a);\nconsole.log(flat);\n```",
                "fileName": "#143",
                "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/node_modules/@tensorflow/tfjs-core/src/util.ts#L143-L157",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Util",
                  "namespace": "util"
                },
                "symbolName": "sizeFromShape",
                "namespace": "util",
                "paramStr": "(shape)",
                "parameters": [
                  {
                    "name": "shape",
                    "documentation": "",
                    "type": "number[]",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "number",
                "documentation": "Returns the size (number of elements) of the tensor given its shape.\n\n```js\nconst shape = [3, 4, 2];\nconst size = tf.util.sizeFromShape(shape);\nconsole.log(size);\n```",
                "fileName": "#169",
                "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/node_modules/@tensorflow/tfjs-core/src/util.ts#L169-L179",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Util",
                  "namespace": "util"
                },
                "symbolName": "createShuffledIndices",
                "namespace": "util",
                "paramStr": "(n)",
                "parameters": [
                  {
                    "name": "n",
                    "documentation": "",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Uint32Array",
                "documentation": "Creates a new array with randomized indicies to a given quantity.\n\n```js\nconst randomTen = tf.util.createShuffledIndices(10);\nconsole.log(randomTen);\n```",
                "fileName": "#240",
                "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/node_modules/@tensorflow/tfjs-core/src/util.ts#L240-L247",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Util",
                  "namespace": "util"
                },
                "symbolName": "now",
                "namespace": "util",
                "paramStr": "()",
                "parameters": [],
                "returnType": "number",
                "documentation": "Returns the current high-resolution time in milliseconds relative to an\narbitrary time in the past. It works across different platforms (node.js,\nbrowsers).\n\n```js\nconsole.log(tf.util.now());\n```",
                "fileName": "#656",
                "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/node_modules/@tensorflow/tfjs-core/src/util.ts#L656-L658",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Util"
                },
                "symbolName": "fetch",
                "paramStr": "(path, requestInits?)",
                "parameters": [
                  {
                    "name": "path",
                    "documentation": "",
                    "type": "string",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "requestInits",
                    "documentation": "",
                    "type": "RequestInit",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Promise<Response>",
                "documentation": "Returns a platform-specific implementation of\n[`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n\nIf `fetch` is defined on the global object (`window`, `process`, etc.),\n`tf.util.fetch` returns that function.\n\nIf not, `tf.util.fetch` returns a platform-specific solution.\n\n```js\nconst resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');\n// handle response\n```",
                "fileName": "#685",
                "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/node_modules/@tensorflow/tfjs-core/src/util.ts#L685-L688",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Util"
                },
                "symbolName": "encodeString",
                "paramStr": "(s, encoding?)",
                "parameters": [
                  {
                    "name": "s",
                    "documentation": "The string to encode.",
                    "type": "string",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "encoding",
                    "documentation": "The encoding scheme. Defaults to utf-8.",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Uint8Array",
                "documentation": "Encodes the provided string into bytes using the provided encoding scheme.",
                "fileName": "#698",
                "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/node_modules/@tensorflow/tfjs-core/src/util.ts#L698-L701",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Util"
                },
                "symbolName": "decodeString",
                "paramStr": "(bytes, encoding?)",
                "parameters": [
                  {
                    "name": "bytes",
                    "documentation": "The bytes to decode.",
                    "type": "Uint8Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "encoding",
                    "documentation": "The encoding scheme. Defaults to utf-8.",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "string",
                "documentation": "Decodes the provided bytes into a string using the provided encoding scheme.",
                "fileName": "#710",
                "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/node_modules/@tensorflow/tfjs-core/src/util.ts#L710-L713",
                "isFunction": true
              }
            ]
          }
        ]
      },
      {
        "name": "TensorBoard",
        "description": "",
        "subheadings": [
          {
            "symbols": [
              {
                "docInfo": {
                  "heading": "TensorBoard",
                  "namespace": "node"
                },
                "symbolName": "summaryFileWriter",
                "namespace": "node",
                "paramStr": "(logdir, maxQueue?, flushMillis?, filenameSuffix?)",
                "parameters": [
                  {
                    "name": "logdir",
                    "documentation": "Log directory in which the summary data will be written.",
                    "type": "string",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "maxQueue",
                    "documentation": "Maximum queue length (default: `10`).",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "flushMillis",
                    "documentation": "Flush every __ milliseconds (default: `120e3`, i.e,\n`120` seconds).",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "filenameSuffix",
                    "documentation": "Suffix of the protocol buffer file names to be\nwritten in the `logdir` (default: `.v2`).",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "SummaryFileWriter",
                "documentation": "Create a summary file writer for TensorBoard.\n\nExample:\n```js\nconst tf = require('@tensorflow/tfjs-node');\n\nconst summaryWriter = tf.node.summaryFileWriter('/tmp/tfjs_tb_logdir');\n\nfor (let step = 0; step < 100; ++step) {\n  summaryWriter.scalar('dummyValue', Math.sin(2 * Math.PI * step / 8), step);\n}\n```",
                "fileName": "#93",
                "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/src/tensorboard.ts#L93-L111",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "TensorBoard",
                  "namespace": "node"
                },
                "symbolName": "tensorBoard",
                "namespace": "node",
                "paramStr": "(logdir?, args?)",
                "parameters": [
                  {
                    "name": "logdir",
                    "documentation": "Directory to which the logs will be written.",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "args",
                    "documentation": "Optional configuration arguments.",
                    "type": "TensorBoardCallbackArgs",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "TensorBoardCallback",
                "documentation": "Callback for logging to TensorBoard during training.\n\nWrites the loss and metric values (if any) to the specified log directory\n(`logdir`) which can be ingested and visualized by TensorBoard.\nThis callback is usually passed as a callback to `tf.Model.fit()` or\n`tf.Model.fitDataset()` calls during model training. The frequency at which\nthe values are logged can be controlled with the `updateFreq` field of the\nconfiguration object (2nd argument).\n\nUsage example:\n```js\n// Constructor a toy multilayer-perceptron regressor for demo purpose.\nconst model = tf.sequential();\nmodel.add(\n     tf.layers.dense({units: 100, activation: 'relu', inputShape: [200]}));\nmodel.add(tf.layers.dense({units: 1}));\nmodel.compile({\n   loss: 'meanSquaredError',\n   optimizer: 'sgd',\n   metrics: ['MAE']\n});\n\n// Generate some random fake data for demo purpose.\nconst xs = tf.randomUniform([10000, 200]);\nconst ys = tf.randomUniform([10000, 1]);\nconst valXs = tf.randomUniform([1000, 200]);\nconst valYs = tf.randomUniform([1000, 1]);\n\n// Start model training process.\nawait model.fit(xs, ys, {\n   epochs: 100,\n   validationData: [valXs, valYs],\n    // Add the tensorBoard callback here.\n   callbacks: tf.node.tensorBoard('/tmp/fit_logs_1')\n});\n```\n\nThen you can use the following commands to point tensorboard\nto the logdir:\n\n```sh\npip install tensorboard  # Unless you've already installed it.\ntensorboard --logdir /tmp/fit_logs_1\n```",
                "fileName": "#325",
                "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/src/callbacks.ts#L325-L328",
                "isFunction": true
              }
            ]
          }
        ]
      },
      {
        "name": "Operations",
        "description": "",
        "subheadings": [
          {
            "name": "Images",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Images",
                  "namespace": "node"
                },
                "symbolName": "decodeJpeg",
                "namespace": "node",
                "paramStr": "(contents, channels?, ratio?, fancyUpscaling?, tryRecoverTruncated?, acceptableFraction?, dctMethod?)",
                "parameters": [
                  {
                    "name": "contents",
                    "documentation": "The JPEG-encoded image in an Uint8Array.",
                    "type": "Uint8Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "channels",
                    "documentation": "An optional int. Defaults to 0. Accepted values are\n0: use the number of channels in the JPEG-encoded image.\n1: output a grayscale image.\n3: output an RGB image.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "ratio",
                    "documentation": "An optional int. Defaults to 1. Downscaling ratio. It is used\nwhen image is type Jpeg.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "fancyUpscaling",
                    "documentation": "An optional bool. Defaults to True. If true use a\nslower but nicer upscaling of the chroma planes. It is used when image is\ntype Jpeg.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "tryRecoverTruncated",
                    "documentation": "An optional bool. Defaults to False. If true try\nto recover an image from truncated input. It is used when image is type\nJpeg.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "acceptableFraction",
                    "documentation": "An optional float. Defaults to 1. The minimum\nrequired fraction of lines before a truncated input is accepted. It is\nused when image is type Jpeg.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dctMethod",
                    "documentation": "An optional string. Defaults to \"\". string specifying a hint\nabout the algorithm used for decompression. Defaults to \"\" which maps to\na system-specific default. Currently valid values are [\"INTEGER_FAST\",\n\"INTEGER_ACCURATE\"]. The hint may be ignored (e.g., the internal jpeg\nlibrary changes to a version that does not have that specific option.) It\nis used when image is type Jpeg.",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D",
                "documentation": "Decode a JPEG-encoded image to a 3D Tensor of dtype `int32`.",
                "fileName": "#58",
                "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/src/image.ts#L58-L70",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Images",
                  "namespace": "node"
                },
                "symbolName": "decodePng",
                "namespace": "node",
                "paramStr": "(contents, channels?, dtype?)",
                "parameters": [
                  {
                    "name": "contents",
                    "documentation": "The PNG-encoded image in an Uint8Array.",
                    "type": "Uint8Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "channels",
                    "documentation": "An optional int. Defaults to 0. Accepted values are\n0: use the number of channels in the PNG-encoded image.\n1: output a grayscale image.\n3: output an RGB image.\n4: output an RGBA image.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type of the result. Only `int32` is supported at this\ntime.",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D",
                "documentation": "Decode a PNG-encoded image to a 3D Tensor of dtype `int32`.",
                "fileName": "#88",
                "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/src/image.ts#L88-L97",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Images",
                  "namespace": "node"
                },
                "symbolName": "decodeBmp",
                "namespace": "node",
                "paramStr": "(contents, channels?)",
                "parameters": [
                  {
                    "name": "contents",
                    "documentation": "The BMP-encoded image in an Uint8Array.",
                    "type": "Uint8Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "channels",
                    "documentation": "An optional int. Defaults to 0. Accepted values are\n0: use the number of channels in the BMP-encoded image.\n3: output an RGB image.\n4: output an RGBA image.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D",
                "documentation": "Decode the first frame of a BMP-encoded image to a 3D Tensor of dtype\n`int32`.",
                "fileName": "#113",
                "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/src/image.ts#L113-L118",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Images",
                  "namespace": "node"
                },
                "symbolName": "decodeGif",
                "namespace": "node",
                "paramStr": "(contents)",
                "parameters": [
                  {
                    "name": "contents",
                    "documentation": "The GIF-encoded image in an Uint8Array.",
                    "type": "Uint8Array",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor4D",
                "documentation": "Decode the frame(s) of a GIF-encoded image to a 4D Tensor of dtype `int32`.",
                "fileName": "#130",
                "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/src/image.ts#L130-L135",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Images",
                  "namespace": "node"
                },
                "symbolName": "decodeImage",
                "namespace": "node",
                "paramStr": "(content, channels?, dtype?, expandAnimations?)",
                "parameters": [
                  {
                    "name": "content",
                    "documentation": "The encoded image in an Uint8Array.",
                    "type": "Uint8Array",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "channels",
                    "documentation": "An optional int. Defaults to 0, use the number of channels in\nthe image. Number of color channels for the decoded image. It is used\nwhen image is type Png, Bmp, or Jpeg.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "dtype",
                    "documentation": "The data type of the result. Only `int32` is supported at this\ntime.",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "expandAnimations",
                    "documentation": "A boolean which controls the shape of the returned\nop's output. If True, the returned op will produce a 3-D tensor for PNG,\nJPEG, and BMP files; and a 4-D tensor for all GIFs, whether animated or\nnot. If, False, the returned op will produce a 3-D tensor for all file\ntypes and will truncate animated GIFs to the first frame.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Tensor3D|Tensor4D",
                "documentation": "Given the encoded bytes of an image, it returns a 3D or 4D tensor of the\ndecoded image. Supports BMP, GIF, JPEG and PNG formats.",
                "fileName": "#160",
                "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/src/image.ts#L160-L191",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Images",
                  "namespace": "node"
                },
                "symbolName": "encodeJpeg",
                "namespace": "node",
                "paramStr": "(image, format?, quality?, progressive?, optimizeSize?, chromaDownsampling?, densityUnit?, xDensity?, yDensity?, xmpMetadata?)",
                "parameters": [
                  {
                    "name": "image",
                    "documentation": "A 3-D uint8 Tensor of shape [height, width, channels].",
                    "type": "Tensor3D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "format",
                    "documentation": "An optional string from: \"\", \"grayscale\", \"rgb\".\nDefaults to \"\". Per pixel image format.\n- '': Use a default format based on the number of channels in the image.\n- grayscale: Output a grayscale JPEG image. The channels dimension of\nimage must be 1.\n- rgb: Output an RGB JPEG image. The channels dimension of image must\nbe 3.",
                    "type": "''|'grayscale'|'rgb'",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "quality",
                    "documentation": "An optional int. Defaults to 95. Quality of the compression\nfrom 0 to 100 (higher is better and slower).",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "progressive",
                    "documentation": "An optional bool. Defaults to False. If True, create a\nJPEG that loads progressively (coarse to fine).",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "optimizeSize",
                    "documentation": "An optional bool. Defaults to False. If True, spend\nCPU/RAM to reduce size with no quality change.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "chromaDownsampling",
                    "documentation": "An optional bool. Defaults to True.\nSee http://en.wikipedia.org/wiki/Chroma_subsampling.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "densityUnit",
                    "documentation": "An optional string from: \"in\", \"cm\". Defaults to \"in\".\nUnit used to specify x_density and y_density: pixels per inch ('in') or\ncentimeter ('cm').",
                    "type": "'in'|'cm'",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "xDensity",
                    "documentation": "An optional int. Defaults to 300. Horizontal pixels per\ndensity unit.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "yDensity",
                    "documentation": "An optional int. Defaults to 300. Vertical pixels per\ndensity unit.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "xmpMetadata",
                    "documentation": "An optional string. Defaults to \"\". If not empty, embed\nthis XMP metadata in the image header.",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Promise<Uint8Array>",
                "documentation": "Encodes an image tensor to JPEG.",
                "fileName": "#226",
                "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/src/image.ts#L226-L239",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Operations",
                  "subheading": "Images",
                  "namespace": "node"
                },
                "symbolName": "encodePng",
                "namespace": "node",
                "paramStr": "(image, compression?)",
                "parameters": [
                  {
                    "name": "image",
                    "documentation": "A 3-D uint8 Tensor of shape [height, width, channels].",
                    "type": "Tensor3D",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "compression",
                    "documentation": "An optional int. Defaults to -1. Compression level.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Promise<Uint8Array>",
                "documentation": "Encodes an image tensor to PNG.",
                "fileName": "#251",
                "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/src/image.ts#L251-L258",
                "isFunction": true
              }
            ]
          }
        ]
      },
      {
        "name": "Models",
        "description": "",
        "subheadings": [
          {
            "name": "SavedModel",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "SavedModel",
                  "namespace": "node"
                },
                "symbolName": "getMetaGraphsFromSavedModel",
                "namespace": "node",
                "paramStr": "(path)",
                "parameters": [
                  {
                    "name": "path",
                    "documentation": "Path to SavedModel folder.",
                    "type": "string",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Promise<MetaGraph[]>",
                "documentation": "Inspect the MetaGraphs of the SavedModel from the provided path. This\nfunction will return an array of `MetaGraphInfo` objects.",
                "fileName": "#85",
                "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/src/saved_model.ts#L85-L161",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "SavedModel",
                  "namespace": "node"
                },
                "symbolName": "TFSavedModel",
                "namespace": "node",
                "documentation": "A `tf.TFSavedModel` is a signature loaded from a SavedModel\nmetagraph, and allows inference execution.",
                "fileName": "#209",
                "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/src/saved_model.ts#L209-L354",
                "methods": [
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "SavedModel"
                    },
                    "symbolName": "dispose",
                    "paramStr": "()",
                    "parameters": [],
                    "returnType": "void",
                    "documentation": "Delete the SavedModel from nodeBackend and delete corresponding session in\nthe C++ backend if the session is only used by this TFSavedModel.",
                    "fileName": "#239",
                    "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/src/saved_model.ts#L239-L254",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "SavedModel"
                    },
                    "symbolName": "predict",
                    "paramStr": "(inputs, config?)",
                    "parameters": [
                      {
                        "name": "inputs",
                        "documentation": "",
                        "type": "Tensor|Tensor[]|NamedTensorMap",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "config",
                        "documentation": "Prediction configuration for specifying the batch size.",
                        "type": "ModelPredictConfig",
                        "optional": true,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Tensor|Tensor[]|NamedTensorMap",
                    "documentation": "Execute the inference for the input tensors.",
                    "fileName": "#279",
                    "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/src/saved_model.ts#L279-L330",
                    "isFunction": true
                  },
                  {
                    "docInfo": {
                      "heading": "Models",
                      "subheading": "SavedModel"
                    },
                    "symbolName": "execute",
                    "paramStr": "(inputs, outputs)",
                    "parameters": [
                      {
                        "name": "inputs",
                        "documentation": "",
                        "type": "Tensor|Tensor[]|NamedTensorMap",
                        "optional": false,
                        "isConfigParam": false
                      },
                      {
                        "name": "outputs",
                        "documentation": "string|string[]. List of output node names to retrieve\nactivation from.",
                        "type": "string|string[]",
                        "optional": false,
                        "isConfigParam": false
                      }
                    ],
                    "returnType": "Tensor|Tensor[]",
                    "documentation": "Execute the inference for the input tensors and return activation\nvalues for specified output node names without batching.",
                    "fileName": "#350",
                    "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/src/saved_model.ts#L350-L353",
                    "isFunction": true
                  }
                ],
                "isClass": true,
                "inheritsFrom": "InferenceModel"
              },
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "SavedModel",
                  "namespace": "node"
                },
                "symbolName": "loadSavedModel",
                "namespace": "node",
                "paramStr": "(path, tags?, signature?)",
                "parameters": [
                  {
                    "name": "path",
                    "documentation": "The path to the SavedModel.",
                    "type": "string",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "tags",
                    "documentation": "The tags of the MetaGraph to load. The available tags of a\nSavedModel can be retrieved through tf.node.getMetaGraphsFromSavedModel()\nAPI. Defaults to ['serve'].",
                    "type": "{}",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "signature",
                    "documentation": "The name of the SignatureDef to load. The available\nSignatureDefs of a SavedModel can be retrieved through\ntf.node.getMetaGraphsFromSavedModel() API. Defaults to 'serving_default'.",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Promise<TFSavedModel>",
                "documentation": "Load a TensorFlow SavedModel from disk. TensorFlow SavedModel is different\nfrom TensorFlow.js model format. A SavedModel is a directory containing\nserialized signatures and the states needed to run them. The directory has a\nsaved_model.pb (or saved_model.pbtxt) file storing the actual TensorFlow\nprogram, or model, and a set of named signatures, each identifying a\nfunction. The directory also has a variables directory contains a standard\ntraining checkpoint. The directory may also has a assets directory contains\nfiles used by the TensorFlow graph, for example text files used to initialize\nvocabulary tables. These are supported datatypes: float32, int32, complex64, \nstring.For more information, see this guide:\nhttps://www.tensorflow.org/guide/saved_model.",
                "fileName": "#378",
                "githubUrl": "https://github.com/tensorflow/tfjs/tree/tfjs-node-v2.0.1/tfjs-node/src/saved_model.ts#L378-L409",
                "isFunction": true
              }
            ]
          }
        ]
      }
    ]
  },
  "docLinkAliases": {},
  "configInterfaceParamMap": {
    "WeightsManifestGroupConfig": [
      {
        "name": "paths",
        "type": "string[]",
        "documentation": "An ordered list of paths.\n\nPaths are intentionally abstract in order to be general. For example, they\ncan be relative URL paths or relative paths on the file system.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "weights",
        "type": "WeightsManifestEntry[]",
        "documentation": "Specifications of the weights stored in the paths.",
        "optional": false,
        "isConfigParam": true
      }
    ],
    "WeightsManifestEntry": [
      {
        "name": "name",
        "type": "string",
        "documentation": "Name of the weight, e.g., 'Dense_1/bias'",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "shape",
        "type": "number[]",
        "documentation": "Shape of the weight.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "dtype",
        "type": "'float32'|'int32'|'bool'|'string'|'complex64'",
        "documentation": "Data type of the weight.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "group",
        "type": "WeightGroup",
        "documentation": "Type of the weight.\n\nOptional.\n\nThe value 'optimizer' indicates the weight belongs to an optimizer\n(i.e., used only during model training and not during inference).",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "quantization",
        "type": "{\n    scale?: number,           // The scaling constant to multiply by.\n    min?: number,             // The (possibly nudged) minimum weight to add.\n    dtype: 'uint16'|'uint8'|'float16'  // The dtype of the quantized weights.\n  }",
        "documentation": "Information for dequantization of the weight.",
        "optional": false,
        "isConfigParam": true
      }
    ],
    "io.SaveConfig": [
      {
        "name": "trainableOnly",
        "type": "boolean",
        "documentation": "Whether to save only the trainable weights of the model, ignoring the\nnon-trainable ones.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "includeOptimizer",
        "type": "boolean",
        "documentation": "Whether the optimizer will be saved (if exists).\n\nDefault: `false`.",
        "optional": false,
        "isConfigParam": true
      }
    ],
    "SaveResult": [
      {
        "name": "modelArtifactsInfo",
        "type": "ModelArtifactsInfo",
        "documentation": "Information about the model artifacts saved.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "responses",
        "type": "Response[]",
        "documentation": "HTTP responses from the server that handled the model-saving request (if\nany). This is applicable only to server-based saving routes.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "errors",
        "type": "Array",
        "documentation": "Error messages and related data (if any).",
        "optional": false,
        "isConfigParam": true
      }
    ],
    "ModelArtifactsInfo": [
      {
        "name": "dateSaved",
        "type": "Date",
        "documentation": "Timestamp for when the model is saved.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "modelTopologyType",
        "type": "'JSON'|'GraphDef'",
        "documentation": "TODO (cais,yassogba) consider removing GraphDef as GraphDefs now\ncome in a JSON format and none of our IOHandlers support a non json\nformat. We could conder replacing this with 'Binary' if we want to\nallow future handlers to save to non json formats (though they will\nprobably want more information than 'Binary').\nType of the model topology\n\nType of the model topology\n\nPossible values:\n   - JSON: JSON config (human-readable, e.g., Keras JSON).\n   - GraphDef: TensorFlow\n     [GraphDef](https://www.tensorflow.org/extend/tool_developers/#graphdef)\n     protocol buffer (binary).",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "modelTopologyBytes",
        "type": "number",
        "documentation": "Size of model topology (Keras JSON or GraphDef), in bytes.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "weightSpecsBytes",
        "type": "number",
        "documentation": "Size of weight specification or manifest, in bytes.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "weightDataBytes",
        "type": "number",
        "documentation": "Size of weight value data, in bytes.",
        "optional": false,
        "isConfigParam": true
      }
    ],
    "TrainingConfig": [
      {
        "name": "optimizer_config",
        "type": "{}",
        "documentation": "Optimizer used for the model training.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "loss",
        "type": "string|string[]|{[key: string]: string}",
        "documentation": "Loss function(s) for the model's output(s).",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "metrics",
        "type": "string[]|{[key: string]: string}",
        "documentation": "Metric function(s) for the model's output(s).",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "weighted_metrics",
        "type": "string[]",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "sample_weight_mode",
        "type": "string",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "loss_weights",
        "type": "number[]|{[key: string]: number}",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      }
    ],
    "ModelArtifacts": [
      {
        "name": "modelTopology",
        "type": "{}|ArrayBuffer",
        "documentation": "Model topology.\n\nFor Keras-style `tf.Model`s, this is a JSON object.\nFor TensorFlow-style models (e.g., `SavedModel`), this is the JSON\nencoding of the `GraphDef` protocol buffer.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "trainingConfig",
        "type": "TrainingConfig",
        "documentation": "Serialized configuration for the model's training.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "weightSpecs",
        "type": "WeightsManifestEntry[]",
        "documentation": "Weight specifications.\n\nThis corresponds to the weightsData below.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "weightData",
        "type": "ArrayBuffer",
        "documentation": "Binary buffer for all weight values concatenated in the order specified\nby `weightSpecs`.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "format",
        "type": "string",
        "documentation": "Hard-coded format name for models saved from TensorFlow.js or converted\nby TensorFlow.js Converter.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "generatedBy",
        "type": "string",
        "documentation": "What library is responsible for originally generating this artifact.\n\nUsed for debugging purposes. E.g., 'TensorFlow.js v1.0.0'.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "convertedBy",
        "type": "string|null",
        "documentation": "What library or tool is responsible for converting the original model\nto this format, applicable only if the model is output by a converter.\n\nUsed for debugging purposes.  E.g., 'TensorFlow.js Converter v1.0.0'.\n\nA value of `null` means the model artifacts are generated without any\nconversion process (e.g., saved directly from a TensorFlow.js\n`tf.LayersModel` instance.)",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "userDefinedMetadata",
        "type": "{}",
        "documentation": "User-defined metadata about the model.",
        "optional": false,
        "isConfigParam": true
      }
    ],
    "ModelJSON": [
      {
        "name": "modelTopology",
        "type": "{}",
        "documentation": "Model topology.\n\nFor Keras-style `tf.Model`s, this is a JSON object.\nFor TensorFlow-style models (e.g., `SavedModel`), this is the JSON\nencoding of the `GraphDef` protocol buffer.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "trainingConfig",
        "type": "TrainingConfig",
        "documentation": "Model training configuration.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "weightsManifest",
        "type": "WeightsManifestConfig",
        "documentation": "Weights manifest.\n\nThe weights manifest consists of an ordered list of weight-manifest\ngroups. Each weight-manifest group consists of a number of weight values\nstored in a number of paths. See the documentation of\n`WeightsManifestConfig` for more details.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "format",
        "type": "string",
        "documentation": "Hard-coded format name for models saved from TensorFlow.js or converted\nby TensorFlow.js Converter.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "generatedBy",
        "type": "string",
        "documentation": "What library is responsible for originally generating this artifact.\n\nUsed for debugging purposes. E.g., 'TensorFlow.js v1.0.0'.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "convertedBy",
        "type": "string|null",
        "documentation": "What library or tool is responsible for converting the original model\nto this format, applicable only if the model is output by a converter.\n\nUsed for debugging purposes.  E.g., 'TensorFlow.js Converter v1.0.0'.\n\nA value of `null` means the model artifacts are generated without any\nconversion process (e.g., saved directly from a TensorFlow.js\n`tf.LayersModel` instance.)",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "userDefinedMetadata",
        "type": "{}",
        "documentation": "User-defined metadata about the model.",
        "optional": false,
        "isConfigParam": true
      }
    ],
    "IOHandler": [
      {
        "name": "save",
        "type": "SaveHandler",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "load",
        "type": "LoadHandler",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      }
    ],
    "ModelStoreManager": [
      {
        "name": "listModels",
        "type": "Promise<{[path: string]: ModelArtifactsInfo}>",
        "documentation": "List all models in the model store.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "removeModel",
        "type": "Promise<ModelArtifactsInfo>",
        "documentation": "Remove a model specified by `path`.",
        "optional": false,
        "isConfigParam": true
      }
    ],
    "io.LoadOptions": [
      {
        "name": "requestInit",
        "type": "RequestInit",
        "documentation": "RequestInit (options) for HTTP requests.\n\nFor detailed information on the supported fields, see\n[https://developer.mozilla.org/en-US/docs/Web/API/Request/Request](\n     https://developer.mozilla.org/en-US/docs/Web/API/Request/Request)",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "onProgress",
        "type": "OnProgressCallback",
        "documentation": "Progress callback.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "fetchFunc",
        "type": "Function",
        "documentation": "A function used to override the `window.fetch` function.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "strict",
        "type": "boolean",
        "documentation": "Strict loading model: whether extraneous weights or missing\nweights should trigger an `Error`.\n\nIf `true`, require that the provided weights exactly match those\nrequired by the layers. `false` means that both extra weights\nand missing weights will be silently ignored.\n\nDefault: `true`.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "weightPathPrefix",
        "type": "string",
        "documentation": "Path prefix for weight files, by default this is calculated from the\npath of the model JSON file.\n\nFor instance, if the path to the model JSON file is\n`http://localhost/foo/model.json`, then the default path prefix will be\n`http://localhost/foo/`. If a weight file has the path value\n`group1-shard1of2` in the weight manifest, then the weight file will be\nloaded from `http://localhost/foo/group1-shard1of2` by default. However,\nif you provide a `weightPathPrefix` value of\n`http://localhost/foo/alt-weights`, then the weight file will be loaded\nfrom the path `http://localhost/foo/alt-weights/group1-shard1of2` instead.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "fromTFHub",
        "type": "boolean",
        "documentation": "Whether the module or model is to be loaded from TF Hub.\n\nSetting this to `true` allows passing a TF-Hub module URL, omitting the\nstandard model file name and the query parameters.\n\nDefault: `false`.",
        "optional": false,
        "isConfigParam": true
      }
    ],
    "RequestDetails": [
      {
        "name": "isBinary",
        "type": "boolean",
        "documentation": "Is this request for a binary file (as opposed to a json file)",
        "optional": false,
        "isConfigParam": true
      }
    ],
    "Platform": [
      {
        "name": "fetch",
        "type": "Promise<Response>",
        "documentation": "Makes an HTTP request.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "now",
        "type": "number",
        "documentation": "Returns the current high-resolution time in milliseconds relative to an\narbitrary time in the past. It works across different platforms (node.js,\nbrowsers).",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "encode",
        "type": "Uint8Array",
        "documentation": "Encode the provided string into an array of bytes using the provided\nencoding.",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "decode",
        "type": "string",
        "documentation": "Decode the provided bytes into a string using the provided encoding.",
        "optional": false,
        "isConfigParam": true
      }
    ],
    "ShapeMap": [
      {
        "name": "R0",
        "type": "number[]",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "R1",
        "type": "[number]",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "R2",
        "type": "[number, number]",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "R3",
        "type": "[number, number, number]",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "R4",
        "type": "[number, number, number, number]",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "R5",
        "type": "[number, number, number, number, number]",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "R6",
        "type": "[number, number, number, number, number, number]",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      }
    ],
    "ArrayMap": [
      {
        "name": "R0",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "R1",
        "type": "number[]",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "R2",
        "type": "number[][]",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "R3",
        "type": "number[][][]",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "R4",
        "type": "number[][][][]",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "R5",
        "type": "number[][][][][]",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "R6",
        "type": "number[][][][][][]",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      }
    ],
    "DataTypeMap": [
      {
        "name": "float32",
        "type": "Float32Array",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "int32",
        "type": "Int32Array",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "bool",
        "type": "Uint8Array",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "complex64",
        "type": "Float32Array",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "string",
        "type": "string[]",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      }
    ],
    "SingleValueMap": [
      {
        "name": "bool",
        "type": "boolean",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "int32",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "float32",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "complex64",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "string",
        "type": "string",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      }
    ],
    "RecursiveArray": [],
    "PixelData": [
      {
        "name": "width",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "height",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "data",
        "type": "Uint8Array",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      }
    ],
    "TFJSBinding": [
      {
        "name": "TensorMetadata",
        "type": "typeof TensorMetadata",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TFEOpAttr",
        "type": "typeof TFEOpAttr",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "createTensor",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "deleteTensor",
        "type": "void",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "tensorDataSync",
        "type": "Float32Array|Int32Array|Uint8Array",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "executeOp",
        "type": "TensorMetadata[]",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "loadSavedModel",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "deleteSavedModel",
        "type": "void",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "runSavedModel",
        "type": "TensorMetadata[]",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "getNumOfSavedModels",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "isUsingGpuDevice",
        "type": "boolean",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_FLOAT",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_INT32",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_INT64",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_BOOL",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_COMPLEX64",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_STRING",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_RESOURCE",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_UINT8",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_ATTR_STRING",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_ATTR_INT",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_ATTR_FLOAT",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_ATTR_BOOL",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_ATTR_TYPE",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_ATTR_SHAPE",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_ATTR_RESOURCE",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "TF_Version",
        "type": "string",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      }
    ],
    "TensorBoardCallbackArgs": [
      {
        "name": "updateFreq",
        "type": "'batch'|'epoch'",
        "documentation": "The frequency at which loss and metric values are written to logs.\n\nCurrently supported options are:\n\n- 'batch': Write logs at the end of every batch of training, in addition\n   to the end of every epoch of training.\n- 'epoch': Write logs at the end of every epoch of training.\n\nNote that writing logs too often slows down the training.\n\nDefault: 'epoch'.",
        "optional": false,
        "isConfigParam": true
      }
    ],
    "NonMaxSuppressionWithScoreInputs": [
      {
        "name": "boxes",
        "type": "TensorInfo",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "scores",
        "type": "TensorInfo",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      }
    ],
    "NonMaxSuppressionWithScoreAttrs": [
      {
        "name": "maxOutputSize",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "iouThreshold",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "scoreThreshold",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      },
      {
        "name": "softNmsSigma",
        "type": "number",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      }
    ],
    "SoftmaxInputs": [
      {
        "name": "logits",
        "type": "TensorInfo",
        "documentation": "",
        "optional": false,
        "isConfigParam": true
      }
    ]
  },
  "inlineTypes": {},
  "docTypeAliases": {
    "ShapeMap": "number[]",
    "ArrayMap": "number[]",
    "DataType": "'float32'|'int32'|'bool'|'complex64'|'string'",
    "TensorLike": "TypedArray|Array",
    "TensorLike1D": "TypedArray|Array",
    "TensorLike2D": "TypedArray|Array",
    "TensorLike3D": "TypedArray|Array",
    "TensorLike4D": "TypedArray|Array",
    "TensorLike5D": "TypedArray|Array",
    "TensorLike6D": "TypedArray|Array"
  }
}