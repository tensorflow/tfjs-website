{
  "headings": [
    {
      "name": "Overview",
      "description": "<p>\nTFJS Task API groups models into different <b>tasks</b>. \nTo use a specific model, you first need to load it, then call the \n<code>predict</code> method on the model to run the inference. \n<p>\n<b>Load model</b>\n<p>\nTo load a model, use a model loader as follows. \n<b>Do not</b> construct the model manually. \n<p>\n<code>const model = await tfTask.{<i>task_name</i>}.{<i>model_name</i>}.{<i>runtime</i>}.load(options);</code>\n<p>\nPlease refer to a specific model below for details about the exact \nmodel loader to use and the corrsponding options.\n<p>\n<b>Run inference</b>\n<p>\nAll loaded models have a <cod>predict</code> method defined. Call it with \nmodel-specific input and options to get the inference result.\nPlease refer to a specific model below for details about the input and \nthe corresponding options. \n<p>\n<code>const result = await model.predict(input, options);</code>\n<p>\n<b>Clean up resources</b>\n<p>\nAll loaded models have a <code>cleanUp</code> method defined to clean up resources. \nThe model should not be used after this call.\n<p>\n<code>model.cleanUp();</code>\n<p>",
      "subheadings": []
    },
    {
      "name": "Image Classification",
      "description": "<p>\nThe task of classifying images into a preset of labels.",
      "subheadings": [
        {
          "name": "Base model",
          "symbols": [
            {
              "docInfo": {
                "heading": "Image Classification",
                "subheading": "Base model"
              },
              "symbolName": "ImageClassifier",
              "documentation": "The base class for all ImageClassification task models.",
              "fileName": "#30",
              "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/image_classification/common.ts#L30-L53",
              "methods": [
                {
                  "docInfo": {
                    "heading": "Image Classification",
                    "subheading": "Base model"
                  },
                  "symbolName": "predict",
                  "paramStr": "(img, options?)",
                  "parameters": [
                    {
                      "name": "img",
                      "documentation": "The image-like element to run classification on.",
                      "type": "[ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData)|[HTMLImageElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement)|[HTMLCanvasElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement)|[HTMLVideoElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement)",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "options",
                      "documentation": "Inference options. Different models have different\ninference options. See individual model for more details.",
                      "type": "IO",
                      "optional": true,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "Promise<ImageClassificationResult>",
                  "documentation": "Performs classification on the given image-like input, and returns\nresult.",
                  "fileName": "#43",
                  "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/image_classification/common.ts#L43-L45",
                  "isFunction": true,
                  "unpackedReturnTypes": [
                    {
                      "description": "`ImageClassificationResult`",
                      "symbol": "ImageClassificationResult",
                      "params": [
                        {
                          "name": "classes",
                          "type": "Class[]",
                          "documentation": "All predicted classes.",
                          "optional": false,
                          "isConfigParam": true
                        }
                      ]
                    },
                    {
                      "description": "`Class`",
                      "symbol": "Class",
                      "params": [
                        {
                          "name": "className",
                          "type": "string",
                          "documentation": "The name of the class.",
                          "optional": false,
                          "isConfigParam": true
                        },
                        {
                          "name": "score",
                          "type": "number",
                          "documentation": "The score of the class.",
                          "optional": false,
                          "isConfigParam": true
                        }
                      ]
                    }
                  ],
                  "urlHash": "tfTask.ImageClassifier.predict"
                },
                {
                  "docInfo": {
                    "heading": "Image Classification",
                    "subheading": "Base model"
                  },
                  "symbolName": "cleanUp",
                  "paramStr": "()",
                  "parameters": [],
                  "returnType": "void",
                  "documentation": "Cleans up resources if needed.",
                  "fileName": "#52",
                  "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/image_classification/common.ts#L52-L52",
                  "isFunction": true,
                  "urlHash": "tfTask.ImageClassifier.cleanUp"
                }
              ],
              "isClass": true,
              "inheritsFrom": "TaskModel",
              "displayName": "tfTask.ImageClassifier",
              "urlHash": "class:ImageClassifier"
            }
          ]
        },
        {
          "name": "Models",
          "symbols": [
            {
              "docInfo": {
                "heading": "Image Classification",
                "subheading": "Models"
              },
              "symbolName": "ICCustomModelTFLite",
              "documentation": "A custom TFLite image classification model loaded from a model url or\nan `ArrayBuffer` in memory.\n\nThe underlying image classifier is built on top of the [TFLite Task\nLibrary](https://www.tensorflow.org/lite/inference_with_metadata/task_library/overview).\nAs a result, the custom model needs to meet the [metadata\nrequirements](https://www.tensorflow.org/lite/inference_with_metadata/task_library/image_classifier#model_compatibility_requirements).\n\nUsage:\n\n```js\n// Load the model from a custom url with other options (optional).\nconst model = await tfTask.ImageClassification.CustomModel.TFLite.load({\n   model:\n'https://tfhub.dev/google/lite-model/aiy/vision/classifier/plants_V1/3',\n});\n\n// Run inference on an image.\nconst img = document.querySelector('img');\nconst result = await model.predict(img);\nconsole.log(result.classes);\n\n// Clean up.\nmodel.cleanUp();\n```\n\nRefer to [tfTask.ImageClassifier](#class:ImageClassifier) for the `predict` and `cleanUp` method.",
              "fileName": "#112",
              "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/image_classification/custom_model_tflite.ts#L112-L113",
              "methods": [],
              "isClass": true,
              "inheritsFrom": "ImageClassifierTFLite",
              "extraTypes": [
                {
                  "description": "Options for `load`",
                  "symbol": "ICCustomModelTFLiteLoadingOptions",
                  "params": [
                    {
                      "name": "model",
                      "type": "string|ArrayBuffer",
                      "documentation": "The model url, or the model content stored in an `ArrayBuffer`.\n\nYou can use TFLite model urls from `tfhub.dev` directly. For model\ncompatibility, see comments in the corresponding model class.",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "maxResults",
                      "type": "number",
                      "documentation": "Maximum number of top scored results to return. If < 0, all results will\nbe returned. If 0, an invalid argument error is returned.",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "scoreThreshold",
                      "type": "number",
                      "documentation": "Score threshold in [0,1), overrides the ones provided in the model metadata\n(if any). Results below this value are rejected.",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "numThreads",
                      "type": "number",
                      "documentation": "The number of threads to be used for TFLite ops that support\nmulti-threading when running inference with CPU. num_threads should be\ngreater than 0 or equal to -1. Setting num_threads to -1 has the effect to\nlet TFLite runtime set the value.\n\nDefault to number of physical CPU cores, or -1 if WASM multi-threading is\nnot supported by user's browser.",
                      "optional": false,
                      "isConfigParam": true
                    }
                  ]
                },
                {
                  "description": "Options for `predict`",
                  "symbol": "ICCustomModelTFLiteInferenceOptions",
                  "params": []
                }
              ],
              "displayName": "tfTask.ICCustomModelTFLite",
              "urlHash": "class:ICCustomModelTFLite"
            },
            {
              "docInfo": {
                "heading": "Image Classification",
                "subheading": "Models"
              },
              "symbolName": "MobilenetTFJS",
              "documentation": "Pre-trained TFJS mobilenet model.\n\nUsage:\n\n```js\n// Load the model with options (optional).\n//\n// By default, it uses mobilenet V1 with webgl backend. You can change them\n// in the options parameter of the `load` function (see below for docs).\nconst model = await tfTask.ImageClassification.Mobilenet.TFJS.load();\n\n// Run inference on an image with options (optional).\nconst img = document.querySelector('img');\nconst result = await model.predict(img, {topK: 5});\nconsole.log(result.classes);\n\n// Clean up.\nmodel.cleanUp();\n```\n\nRefer to [tfTask.ImageClassifier](#class:ImageClassifier) for the `predict` and `cleanUp` method.",
              "fileName": "#96",
              "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/image_classification/mobilenet_tfjs.ts#L96-L125",
              "methods": [],
              "isClass": true,
              "inheritsFrom": "[tfTask.ImageClassifier](#class:ImageClassifier)",
              "extraTypes": [
                {
                  "description": "Options for `load`",
                  "symbol": "MobilenetTFJSLoadingOptions",
                  "params": [
                    {
                      "name": "backend",
                      "type": "'cpu'|'webgl'|'wasm'",
                      "documentation": "The backend to use to run TFJS models. Default to 'webgl'.",
                      "optional": false,
                      "isConfigParam": true
                    }
                  ]
                },
                {
                  "description": "Options for `predict`",
                  "symbol": "MobilenetTFJSInferenceOptions",
                  "params": [
                    {
                      "name": "topK",
                      "type": "number",
                      "documentation": "Number of top classes to return.",
                      "optional": false,
                      "isConfigParam": true
                    }
                  ]
                }
              ],
              "displayName": "tfTask.MobilenetTFJS",
              "urlHash": "class:MobilenetTFJS"
            },
            {
              "docInfo": {
                "heading": "Image Classification",
                "subheading": "Models"
              },
              "symbolName": "MobilenetTFLite",
              "documentation": "Pre-trained TFLite mobilenet image classification model.\n\nUsage:\n\n```js\n// Load the model with options (optional).\n//\n// By default, it uses mobilenet V1. You can change it in the options\n// parameter of the `load` function (see below for docs).\nconst model = await tfTask.ImageClassification.Mobilenet.TFJS.load();\n\n// Run inference on an image.\nconst img = document.querySelector('img');\nconst result = await model.predict(img);\nconsole.log(result.classes);\n\n// Clean up.\nmodel.cleanUp();\n```\n\nRefer to [tfTask.ImageClassifier](#class:ImageClassifier) for the `predict` and `cleanUp` method.",
              "fileName": "#126",
              "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/image_classification/mobilenet_tflite.ts#L126-L127",
              "methods": [],
              "isClass": true,
              "inheritsFrom": "ImageClassifierTFLite",
              "extraTypes": [
                {
                  "description": "Options for `load`",
                  "symbol": "MobilenetTFLiteLoadingOptions",
                  "params": [
                    {
                      "name": "version",
                      "type": "1|2",
                      "documentation": "The MobileNet version number. Use 1 for MobileNetV1, and 2 for\nMobileNetV2. Defaults to 1.",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "alpha",
                      "type": "0.25|0.50|0.75|1.0",
                      "documentation": "Controls the width of the network, trading accuracy for performance. A\nsmaller alpha decreases accuracy and increases performance. Defaults\nto 1.0.",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "maxResults",
                      "type": "number",
                      "documentation": "Maximum number of top scored results to return. If < 0, all results will\nbe returned. If 0, an invalid argument error is returned.",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "scoreThreshold",
                      "type": "number",
                      "documentation": "Score threshold in [0,1), overrides the ones provided in the model metadata\n(if any). Results below this value are rejected.",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "numThreads",
                      "type": "number",
                      "documentation": "The number of threads to be used for TFLite ops that support\nmulti-threading when running inference with CPU. num_threads should be\ngreater than 0 or equal to -1. Setting num_threads to -1 has the effect to\nlet TFLite runtime set the value.\n\nDefault to number of physical CPU cores, or -1 if WASM multi-threading is\nnot supported by user's browser.",
                      "optional": false,
                      "isConfigParam": true
                    }
                  ]
                },
                {
                  "description": "Options for `predict`",
                  "symbol": "MobilenetTFLiteInferenceOptions",
                  "params": []
                }
              ],
              "displayName": "tfTask.MobilenetTFLite",
              "urlHash": "class:MobilenetTFLite"
            }
          ]
        }
      ]
    },
    {
      "name": "Image Segmentation",
      "description": "<p>\nThe task of predicting associated class for each pixel of an image.",
      "subheadings": [
        {
          "name": "Base model",
          "symbols": [
            {
              "docInfo": {
                "heading": "Image Segmentation",
                "subheading": "Base model"
              },
              "symbolName": "ImageSegmenter",
              "documentation": "The base class for all ImageSegmentation task models.",
              "fileName": "#29",
              "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/image_segmentation/common.ts#L29-L52",
              "methods": [
                {
                  "docInfo": {
                    "heading": "Image Segmentation",
                    "subheading": "Base model"
                  },
                  "symbolName": "predict",
                  "paramStr": "(img, options?)",
                  "parameters": [
                    {
                      "name": "img",
                      "documentation": "The image-like element to run segmentation on.",
                      "type": "[ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData)|[HTMLImageElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement)|[HTMLCanvasElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement)|[HTMLVideoElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement)",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "options",
                      "documentation": "Inference options. Different models have different\ninference options. See individual model for more details.",
                      "type": "IO",
                      "optional": true,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "Promise<ImageSegmentationResult>",
                  "documentation": "Performs segmentation on the given image-like input, and returns\nresult.",
                  "fileName": "#42",
                  "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/image_segmentation/common.ts#L42-L44",
                  "isFunction": true,
                  "unpackedReturnTypes": [
                    {
                      "description": "`ImageSegmentationResult`",
                      "symbol": "ImageSegmentationResult",
                      "params": [
                        {
                          "name": "legend",
                          "type": "Legend",
                          "documentation": "",
                          "optional": false,
                          "isConfigParam": true
                        },
                        {
                          "name": "width",
                          "type": "number",
                          "documentation": "The width of the returned segmentation map.",
                          "optional": false,
                          "isConfigParam": true
                        },
                        {
                          "name": "height",
                          "type": "number",
                          "documentation": "The height of the returned segmentation map.",
                          "optional": false,
                          "isConfigParam": true
                        },
                        {
                          "name": "segmentationMap",
                          "type": "Uint8ClampedArray",
                          "documentation": "The colored segmentation map as `Uint8ClampedArray` which can be\nfed into `ImageData` and mapped to a canvas.",
                          "optional": false,
                          "isConfigParam": true
                        }
                      ]
                    },
                    {
                      "description": "`Legend`",
                      "symbol": "Legend",
                      "params": []
                    },
                    {
                      "description": "`Color`",
                      "symbol": "Color",
                      "params": [
                        {
                          "name": "r",
                          "type": "number",
                          "documentation": "The red color component for the label, in the [0, 255] range.",
                          "optional": false,
                          "isConfigParam": true
                        },
                        {
                          "name": "g",
                          "type": "number",
                          "documentation": "The green color component for the label, in the [0, 255] range.",
                          "optional": false,
                          "isConfigParam": true
                        },
                        {
                          "name": "b",
                          "type": "number",
                          "documentation": "The blue color component for the label, in the [0, 255] range.",
                          "optional": false,
                          "isConfigParam": true
                        }
                      ]
                    }
                  ],
                  "urlHash": "tfTask.ImageSegmenter.predict"
                },
                {
                  "docInfo": {
                    "heading": "Image Segmentation",
                    "subheading": "Base model"
                  },
                  "symbolName": "cleanUp",
                  "paramStr": "()",
                  "parameters": [],
                  "returnType": "void",
                  "documentation": "Cleans up resources if needed.",
                  "fileName": "#51",
                  "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/image_segmentation/common.ts#L51-L51",
                  "isFunction": true,
                  "urlHash": "tfTask.ImageSegmenter.cleanUp"
                }
              ],
              "isClass": true,
              "inheritsFrom": "TaskModel",
              "displayName": "tfTask.ImageSegmenter",
              "urlHash": "class:ImageSegmenter"
            }
          ]
        },
        {
          "name": "Models",
          "symbols": [
            {
              "docInfo": {
                "heading": "Image Segmentation",
                "subheading": "Models"
              },
              "symbolName": "DeeplabTFJS",
              "documentation": "Pre-trained TFJS depelab model.\n\nUsage:\n\n```js\n// Load the model with options (optional).\n//\n// By default, it uses base='pascal' and quantizationBytes=2 with webgl\n// backend. You can change them in the options parameter of the `load`\n// function (see below for docs).\nconst model = await tfTask.ImageSegmentation.Deeplab.TFJS.load();\n\n// Run inference on an image with options (optional).\nconst img = document.querySelector('img');\nconst result = await model.predict(img);\nconsole.log(result);\n\n// Clean up.\nmodel.cleanUp();\n```\n\nRefer to [tfTask.ImageSegmenter](#class:ImageSegmenter) for the `predict` and `cleanUp` method.",
              "fileName": "#104",
              "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/image_segmentation/deeplab_tfjs.ts#L104-L143",
              "methods": [],
              "isClass": true,
              "inheritsFrom": "[tfTask.ImageSegmenter](#class:ImageSegmenter)",
              "extraTypes": [
                {
                  "description": "Options for `load`",
                  "symbol": "DeeplabTFJSLoadingOptions",
                  "params": [
                    {
                      "name": "backend",
                      "type": "'cpu'|'webgl'",
                      "documentation": "The backend to use to run TFJS models. Default to 'webgl'.",
                      "optional": false,
                      "isConfigParam": true
                    }
                  ]
                },
                {
                  "description": "Options for `predict`",
                  "symbol": "DeeplabTFJSInferenceOptions",
                  "params": []
                }
              ],
              "displayName": "tfTask.DeeplabTFJS",
              "urlHash": "class:DeeplabTFJS"
            },
            {
              "docInfo": {
                "heading": "Image Segmentation",
                "subheading": "Models"
              },
              "symbolName": "DeeplabTFLite",
              "documentation": "Pre-trained TFLite deeplab image segmentation model.\n\nUsage:\n\n```js\n// Load the model with options (optional).\nconst model = await tfTask.ImageSegmentation.Deeplab.TFLite.load();\n\n// Run inference on an image.\nconst img = document.querySelector('img');\nconst result = await model.predict(img);\nconsole.log(result);\n\n// Clean up.\nmodel.cleanUp();\n```\n\nRefer to [tfTask.ImageSegmenter](#class:ImageSegmenter) for the `predict` and `cleanUp` method.",
              "fileName": "#92",
              "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/image_segmentation/deeplab_tflite.ts#L92-L93",
              "methods": [],
              "isClass": true,
              "inheritsFrom": "ImageSegmenterTFLite",
              "extraTypes": [
                {
                  "description": "Options for `load`",
                  "symbol": "DeeplabTFLiteLoadingOptions",
                  "params": [
                    {
                      "name": "outputType",
                      "type": "OutputType",
                      "documentation": "",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "numThreads",
                      "type": "number",
                      "documentation": "The number of threads to be used for TFLite ops that support\nmulti-threading when running inference with CPU. num_threads should be\ngreater than 0 or equal to -1. Setting num_threads to -1 has the effect to\nlet TFLite runtime set the value.\n\nDefault to number of physical CPU cores, or -1 if WASM multi-threading is\nnot supported by user's browser.",
                      "optional": false,
                      "isConfigParam": true
                    }
                  ]
                },
                {
                  "description": "Options for `predict`",
                  "symbol": "DeeplabTFLiteInferenceOptions",
                  "params": []
                }
              ],
              "displayName": "tfTask.DeeplabTFLite",
              "urlHash": "class:DeeplabTFLite"
            },
            {
              "docInfo": {
                "heading": "Image Segmentation",
                "subheading": "Models"
              },
              "symbolName": "ISCustomModelTFLite",
              "documentation": "A custom TFLite image segmentation model loaded from a model url or an\n`ArrayBuffer` in memory.\n\nThe underlying image segmenter is built on top of the [TFLite Task\nLibrary](https://www.tensorflow.org/lite/inference_with_metadata/task_library/overview).\nAs a result, the custom model needs to meet the [metadata\nrequirements](https://www.tensorflow.org/lite/inference_with_metadata/task_library/image_segmenter#model_compatibility_requirements).\n\nUsage:\n\n```js\n// Load the model from a custom url with other options (optional).\nconst model = await tfTask.ImageSemgentation.CustomModel.TFLite.load({\n   model:\n'https://tfhub.dev/tensorflow/lite-model/deeplabv3/1/metadata/2?lite-format=tflite',\n});\n\n// Run inference on an image.\nconst img = document.querySelector('img');\nconst result = await model.predict(img);\nconsole.log(result);\n\n// Clean up.\nmodel.cleanUp();\n```\n\nRefer to [tfTask.ImageSegmenter](#class:ImageSegmenter) for the `predict` and `cleanUp` method.",
              "fileName": "#111",
              "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/image_segmentation/custom_model_tflite.ts#L111-L112",
              "methods": [],
              "isClass": true,
              "inheritsFrom": "ImageSegmenterTFLite",
              "extraTypes": [
                {
                  "description": "Options for `load`",
                  "symbol": "ISCustomModelTFLiteLoadingOptions",
                  "params": [
                    {
                      "name": "model",
                      "type": "string|ArrayBuffer",
                      "documentation": "The model url, or the model content stored in an `ArrayBuffer`.\n\nYou can use TFLite model urls from `tfhub.dev` directly. For model\ncompatibility, see comments in the corresponding model class.",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "outputType",
                      "type": "OutputType",
                      "documentation": "",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "numThreads",
                      "type": "number",
                      "documentation": "The number of threads to be used for TFLite ops that support\nmulti-threading when running inference with CPU. num_threads should be\ngreater than 0 or equal to -1. Setting num_threads to -1 has the effect to\nlet TFLite runtime set the value.\n\nDefault to number of physical CPU cores, or -1 if WASM multi-threading is\nnot supported by user's browser.",
                      "optional": false,
                      "isConfigParam": true
                    }
                  ]
                },
                {
                  "description": "Options for `predict`",
                  "symbol": "ISCustomModelTFLiteInferenceOptions",
                  "params": []
                }
              ],
              "displayName": "tfTask.ISCustomModelTFLite",
              "urlHash": "class:ISCustomModelTFLite"
            }
          ]
        }
      ]
    },
    {
      "name": "Object Detection",
      "description": "<p>\nThe task of localizing and identifing multiple objects in a single image.",
      "subheadings": [
        {
          "name": "Base model",
          "symbols": [
            {
              "docInfo": {
                "heading": "Object Detection",
                "subheading": "Base model"
              },
              "symbolName": "ObjectDetector",
              "documentation": "The base class for all ObjectDetection task models.",
              "fileName": "#30",
              "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/object_detection/common.ts#L30-L53",
              "methods": [
                {
                  "docInfo": {
                    "heading": "Object Detection",
                    "subheading": "Base model"
                  },
                  "symbolName": "predict",
                  "paramStr": "(img, options?)",
                  "parameters": [
                    {
                      "name": "img",
                      "documentation": "The image-like element to detect objects on.",
                      "type": "[ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData)|[HTMLImageElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement)|[HTMLCanvasElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement)|[HTMLVideoElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement)",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "options",
                      "documentation": "Inference options. Different models have different\ninference options. See individual model for more details.",
                      "type": "IO",
                      "optional": true,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "Promise<ObjectDetectionResult>",
                  "documentation": "Detects objects on the given image-like input, and returns result.",
                  "fileName": "#43",
                  "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/object_detection/common.ts#L43-L45",
                  "isFunction": true,
                  "unpackedReturnTypes": [
                    {
                      "description": "`ObjectDetectionResult`",
                      "symbol": "ObjectDetectionResult",
                      "params": [
                        {
                          "name": "objects",
                          "type": "DetectedObject[]",
                          "documentation": "All detected objects.",
                          "optional": false,
                          "isConfigParam": true
                        }
                      ]
                    },
                    {
                      "description": "`DetectedObject`",
                      "symbol": "DetectedObject",
                      "params": [
                        {
                          "name": "boundingBox",
                          "type": "BoundingBox",
                          "documentation": "The bounding box of the object.",
                          "optional": false,
                          "isConfigParam": true
                        },
                        {
                          "name": "className",
                          "type": "string",
                          "documentation": "The name of the class.",
                          "optional": false,
                          "isConfigParam": true
                        },
                        {
                          "name": "score",
                          "type": "number",
                          "documentation": "The score of the class.",
                          "optional": false,
                          "isConfigParam": true
                        }
                      ]
                    },
                    {
                      "description": "`BoundingBox`",
                      "symbol": "BoundingBox",
                      "params": [
                        {
                          "name": "originX",
                          "type": "number",
                          "documentation": "The X coordinate of the top-left corner of the bounding box.",
                          "optional": false,
                          "isConfigParam": true
                        },
                        {
                          "name": "originY",
                          "type": "number",
                          "documentation": "The Y coordinate of the top-left corner of the bounding box.",
                          "optional": false,
                          "isConfigParam": true
                        },
                        {
                          "name": "width",
                          "type": "number",
                          "documentation": "The width of bounding box.",
                          "optional": false,
                          "isConfigParam": true
                        },
                        {
                          "name": "height",
                          "type": "number",
                          "documentation": "The height of bounding box.",
                          "optional": false,
                          "isConfigParam": true
                        }
                      ]
                    },
                    {
                      "description": "`Class`",
                      "symbol": "Class",
                      "params": [
                        {
                          "name": "className",
                          "type": "string",
                          "documentation": "The name of the class.",
                          "optional": false,
                          "isConfigParam": true
                        },
                        {
                          "name": "score",
                          "type": "number",
                          "documentation": "The score of the class.",
                          "optional": false,
                          "isConfigParam": true
                        }
                      ]
                    }
                  ],
                  "urlHash": "tfTask.ObjectDetector.predict"
                },
                {
                  "docInfo": {
                    "heading": "Object Detection",
                    "subheading": "Base model"
                  },
                  "symbolName": "cleanUp",
                  "paramStr": "()",
                  "parameters": [],
                  "returnType": "void",
                  "documentation": "Cleans up resources if needed.",
                  "fileName": "#52",
                  "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/object_detection/common.ts#L52-L52",
                  "isFunction": true,
                  "urlHash": "tfTask.ObjectDetector.cleanUp"
                }
              ],
              "isClass": true,
              "inheritsFrom": "TaskModel",
              "displayName": "tfTask.ObjectDetector",
              "urlHash": "class:ObjectDetector"
            }
          ]
        },
        {
          "name": "Models",
          "symbols": [
            {
              "docInfo": {
                "heading": "Object Detection",
                "subheading": "Models"
              },
              "symbolName": "CocoSsdTFJS",
              "documentation": "Pre-trained TFJS coco-ssd model.\n\nUsage:\n\n```js\n// Load the model with options (optional).\n//\n// By default, it uses lite_mobilenet_v2 as the base model with webgl\n// backend. You can change them in the `options` parameter of the `load`\n// function (see below for docs).\nconst model = await tfTask.ObjectDetection.CocoSsd.TFJS.load();\n\n// Run detection on an image with options (optional).\nconst img = document.querySelector('img');\nconst result = await model.predict(img, {numMaxBoxes: 5});\nconsole.log(result.objects);\n\n// Clean up.\nmodel.cleanUp();\n```\n\nRefer to [tfTask.ObjectDetector](#class:ObjectDetector) for the `predict` and `cleanUp` method.",
              "fileName": "#106",
              "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/object_detection/cocossd_tfjs.ts#L106-L148",
              "methods": [],
              "isClass": true,
              "inheritsFrom": "[tfTask.ObjectDetector](#class:ObjectDetector)",
              "extraTypes": [
                {
                  "description": "Options for `load`",
                  "symbol": "CocoSsdTFJSLoadingOptions",
                  "params": [
                    {
                      "name": "backend",
                      "type": "'cpu'|'webgl'|'wasm'",
                      "documentation": "The backend to use to run TFJS models. Default to 'webgl'.",
                      "optional": false,
                      "isConfigParam": true
                    }
                  ]
                },
                {
                  "description": "Options for `predict`",
                  "symbol": "CocoSsdTFJSInferenceOptions",
                  "params": [
                    {
                      "name": "maxNumBoxes",
                      "type": "number",
                      "documentation": "The maximum number of bounding boxes of detected objects. There can be\nmultiple objects of the same class, but at different locations. Defaults\nto 20.",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "minScore",
                      "type": "number",
                      "documentation": "The minimum score of the returned bounding boxes of detected objects. Value\nbetween 0 and 1. Defaults to 0.5.",
                      "optional": false,
                      "isConfigParam": true
                    }
                  ]
                }
              ],
              "displayName": "tfTask.CocoSsdTFJS",
              "urlHash": "class:CocoSsdTFJS"
            },
            {
              "docInfo": {
                "heading": "Object Detection",
                "subheading": "Models"
              },
              "symbolName": "CocoSsdTFLite",
              "documentation": "Pre-trained TFLite coco-ssd object detection model.\n\nUsage:\n\n```js\n// Load the model with options (optional).\nconst model = await tfTask.ObjectDetection.CocoSsd.TFLite.load();\n\n// Run inference on an image.\nconst img = document.querySelector('img');\nconst result = await model.predict(img);\nconsole.log(result.objects);\n\n// Clean up.\nmodel.cleanUp();\n```\n\nRefer to [tfTask.ObjectDetector](#class:ObjectDetector) for the `predict` and `cleanUp` method.",
              "fileName": "#92",
              "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/object_detection/cocossd_tflite.ts#L92-L93",
              "methods": [],
              "isClass": true,
              "inheritsFrom": "ObjectDetectorTFLite",
              "extraTypes": [
                {
                  "description": "Options for `load`",
                  "symbol": "CocoSsdTFLiteLoadingOptions",
                  "params": [
                    {
                      "name": "maxResults",
                      "type": "number",
                      "documentation": "Maximum number of top scored results to return. If < 0, all results will\nbe returned. If 0, an invalid argument error is returned.",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "scoreThreshold",
                      "type": "number",
                      "documentation": "Score threshold in [0,1), overrides the ones provided in the model metadata\n(if any). Results below this value are rejected.",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "numThreads",
                      "type": "number",
                      "documentation": "The number of threads to be used for TFLite ops that support\nmulti-threading when running inference with CPU. num_threads should be\ngreater than 0 or equal to -1. Setting num_threads to -1 has the effect to\nlet TFLite runtime set the value.\n\nDefault to number of physical CPU cores, or -1 if WASM multi-threading is\nnot supported by user's browser.",
                      "optional": false,
                      "isConfigParam": true
                    }
                  ]
                },
                {
                  "description": "Options for `predict`",
                  "symbol": "CocoSsdTFLiteInferenceOptions",
                  "params": []
                }
              ],
              "displayName": "tfTask.CocoSsdTFLite",
              "urlHash": "class:CocoSsdTFLite"
            },
            {
              "docInfo": {
                "heading": "Object Detection",
                "subheading": "Models"
              },
              "symbolName": "ODCustomModelTFLite",
              "documentation": "A custom TFLite object detection model loaded from a model url or an\n`ArrayBuffer` in memory.\n\nThe underlying object detector is built on top of the [TFLite Task\nLibrary](https://www.tensorflow.org/lite/inference_with_metadata/task_library/overview).\nAs a result, the custom model needs to meet the [metadata\nrequirements](https://www.tensorflow.org/lite/inference_with_metadata/task_library/object_detector#model_compatibility_requirements).\n\nUsage:\n\n```js\n// Load the model from a custom url with other options (optional).\nconst model = await tfTask.ObjectDetection.CustomModel.TFLite.load({\n   model:\n'https://tfhub.dev/tensorflow/lite-model/ssd_mobilenet_v1/1/metadata/2?lite-format=tflite',\n});\n\n// Run inference on an image.\nconst img = document.querySelector('img');\nconst result = await model.predict(img);\nconsole.log(result.objects);\n\n// Clean up.\nmodel.cleanUp();\n```\n\nRefer to [tfTask.ObjectDetector](#class:ObjectDetector) for the `predict` and `cleanUp` method.",
              "fileName": "#111",
              "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/object_detection/custom_model_tflite.ts#L111-L112",
              "methods": [],
              "isClass": true,
              "inheritsFrom": "ObjectDetectorTFLite",
              "extraTypes": [
                {
                  "description": "Options for `load`",
                  "symbol": "ODCustomModelTFLiteLoadingOptions",
                  "params": [
                    {
                      "name": "model",
                      "type": "string|ArrayBuffer",
                      "documentation": "The model url, or the model content stored in an `ArrayBuffer`.\n\nYou can use TFLite model urls from `tfhub.dev` directly. For model\ncompatibility, see comments in the corresponding model class.",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "maxResults",
                      "type": "number",
                      "documentation": "Maximum number of top scored results to return. If < 0, all results will\nbe returned. If 0, an invalid argument error is returned.",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "scoreThreshold",
                      "type": "number",
                      "documentation": "Score threshold in [0,1), overrides the ones provided in the model metadata\n(if any). Results below this value are rejected.",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "numThreads",
                      "type": "number",
                      "documentation": "The number of threads to be used for TFLite ops that support\nmulti-threading when running inference with CPU. num_threads should be\ngreater than 0 or equal to -1. Setting num_threads to -1 has the effect to\nlet TFLite runtime set the value.\n\nDefault to number of physical CPU cores, or -1 if WASM multi-threading is\nnot supported by user's browser.",
                      "optional": false,
                      "isConfigParam": true
                    }
                  ]
                },
                {
                  "description": "Options for `predict`",
                  "symbol": "ODCustomModelTFLiteInferenceOptions",
                  "params": []
                }
              ],
              "displayName": "tfTask.ODCustomModelTFLite",
              "urlHash": "class:ODCustomModelTFLite"
            }
          ]
        }
      ]
    },
    {
      "name": "Sentiment Detection",
      "description": "<p>\nThe task of detecting sentiments in a given paragraph of text.",
      "subheadings": [
        {
          "name": "Base model",
          "symbols": [
            {
              "docInfo": {
                "heading": "Sentiment Detection",
                "subheading": "Base model"
              },
              "symbolName": "SentimentDetector",
              "documentation": "The base class for all SentimentDetection task models.",
              "fileName": "#29",
              "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/sentiment_detection/common.ts#L29-L50",
              "methods": [
                {
                  "docInfo": {
                    "heading": "Sentiment Detection",
                    "subheading": "Base model"
                  },
                  "symbolName": "predict",
                  "paramStr": "(text, options?)",
                  "parameters": [
                    {
                      "name": "text",
                      "documentation": "The text to detect sentiment on.",
                      "type": "string",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "options",
                      "documentation": "Inference options. Different models have different\ninference options. See individual model for more details.",
                      "type": "IO",
                      "optional": true,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "Promise<SentimentDetectionResult>",
                  "documentation": "Detects sentiment on the given text, and returns result.",
                  "fileName": "#41",
                  "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/sentiment_detection/common.ts#L41-L42",
                  "isFunction": true,
                  "unpackedReturnTypes": [
                    {
                      "description": "`SentimentDetectionResult`",
                      "symbol": "SentimentDetectionResult",
                      "params": [
                        {
                          "name": "sentimentLabels",
                          "type": "{[label: string]: Sentiment}",
                          "documentation": "A map from sentiment labels to their detection result along with the raw\nprobabilities ([negative probability, positive probability]).\n\nFor example:\n{\n   'insult': {result: true, probabilities: [0.3, 0.7]}\n   'threat': {result: false, probabilities: [0.7, 0.3]}\n}",
                          "optional": false,
                          "isConfigParam": true
                        }
                      ]
                    },
                    {
                      "description": "`Sentiment`",
                      "symbol": "Sentiment",
                      "params": [
                        {
                          "name": "result",
                          "type": "boolean|null",
                          "documentation": "Whether the sentiment is considered true or false. It is set to null when\nthe result cannot be determined (e.g. below a threshold).",
                          "optional": false,
                          "isConfigParam": true
                        },
                        {
                          "name": "probabilities",
                          "type": "number[]",
                          "documentation": "The raw probabilities for this sentiment.",
                          "optional": false,
                          "isConfigParam": true
                        }
                      ]
                    }
                  ],
                  "urlHash": "tfTask.SentimentDetector.predict"
                },
                {
                  "docInfo": {
                    "heading": "Sentiment Detection",
                    "subheading": "Base model"
                  },
                  "symbolName": "cleanUp",
                  "paramStr": "()",
                  "parameters": [],
                  "returnType": "void",
                  "documentation": "Cleans up resources if needed.",
                  "fileName": "#49",
                  "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/sentiment_detection/common.ts#L49-L49",
                  "isFunction": true,
                  "urlHash": "tfTask.SentimentDetector.cleanUp"
                }
              ],
              "isClass": true,
              "inheritsFrom": "TaskModel",
              "displayName": "tfTask.SentimentDetector",
              "urlHash": "class:SentimentDetector"
            }
          ]
        },
        {
          "name": "Models",
          "symbols": [
            {
              "docInfo": {
                "heading": "Sentiment Detection",
                "subheading": "Models"
              },
              "symbolName": "MovieReviewTFLite",
              "documentation": "Pre-trained TFLite movie review sentiment detection model.\n\nIt detects whether the review text is positive or negetive.\n\nUsage:\n\n```js\n// Load the model with options (optional).\nconst model = await tfTask.SentimentDetection.MovieReview.TFLite.load();\n\n// Run inference on a review text.\nconst result = await model.predict('This is a great movie!');\nconsole.log(result.sentimentLabels);\n\n// Clean up.\nmodel.cleanUp();\n```\n\nThe model returns the prediction results of the following sentiment labels:\n\n- positive\n- negative\n\nRefer to [tfTask.SentimentDetector](#class:SentimentDetector) for the `predict` and `cleanUp` method,\nand more details about the result interface.",
              "fileName": "#107",
              "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/sentiment_detection/movie_review_tflite.ts#L107-L146",
              "methods": [],
              "isClass": true,
              "inheritsFrom": "[tfTask.SentimentDetector](#class:SentimentDetector)",
              "extraTypes": [
                {
                  "description": "Options for `load`",
                  "symbol": "MovieReviewTFLiteLoadingOptions",
                  "params": [
                    {
                      "name": "threshold",
                      "type": "number",
                      "documentation": "A prediction is considered valid only if its confidence exceeds the\nthreshold. Defaults to 0.65.",
                      "optional": false,
                      "isConfigParam": true
                    }
                  ]
                },
                {
                  "description": "Options for `predict`",
                  "symbol": "MovieReviewTFLiteInferenceOptions",
                  "params": []
                }
              ],
              "displayName": "tfTask.MovieReviewTFLite",
              "urlHash": "class:MovieReviewTFLite"
            },
            {
              "docInfo": {
                "heading": "Sentiment Detection",
                "subheading": "Models"
              },
              "symbolName": "ToxicityTFJS",
              "documentation": "Pre-trained TFJS toxicity model.\n\nIt detects whether text contains toxic content such as threatening language,\ninsults, obscenities, identity-based hate, or sexually explicit language.\n\nUsage:\n\n```js\n// Load the model with options (optional. See below for docs).\nconst model = await tfTask.SentimentDetection.Toxicity.TFJS.load();\n\n// Run detection on text.\nconst result = await model.predict('You are stupid');\nconsole.log(result.sentimentLabels);\n\n// Clean up.\nmodel.cleanUp();\n```\n\nBy default, the model returns the prediction results of the following\nsentiment labels:\n\n- toxicity\n- severe_toxicity\n- identity_attack\n- insult\n- threat\n- sexual_explicit\n- obscene\n\nRefer to `tfTask.SentimentDetection` for the `predict` and `cleanUp` method,\nand more details about the result interface.",
              "fileName": "#118",
              "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/sentiment_detection/toxicity_tfjs.ts#L118-L142",
              "methods": [],
              "isClass": true,
              "inheritsFrom": "[tfTask.SentimentDetector](#class:SentimentDetector)",
              "extraTypes": [
                {
                  "description": "Options for `load`",
                  "symbol": "ToxicityTFJSLoadingOptions",
                  "params": [
                    {
                      "name": "toxicityLabels",
                      "type": "string[]",
                      "documentation": "An array of strings indicating which types of toxicity to detect. Labels\nmust be one of `toxicity` | `severe_toxicity` | `identity_attack` |\n`insult` | `threat` | `sexual_explicit` | `obscene`. Defaults to all\nlabels.",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "backend",
                      "type": "'cpu'|'webgl'|'wasm'",
                      "documentation": "The backend to use to run TFJS models. Default to 'webgl'.",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "threshold",
                      "type": "number",
                      "documentation": "A prediction is considered valid only if its confidence exceeds the\nthreshold. Defaults to 0.65.",
                      "optional": false,
                      "isConfigParam": true
                    }
                  ]
                },
                {
                  "description": "Options for `predict`",
                  "symbol": "ToxicityTFJSInferenceOptions",
                  "params": []
                }
              ],
              "displayName": "tfTask.ToxicityTFJS",
              "urlHash": "class:ToxicityTFJS"
            }
          ]
        }
      ]
    },
    {
      "name": "NL Classification",
      "description": "<p>\nThe task of classifying texts into a preset of labels.",
      "subheadings": [
        {
          "name": "Base model",
          "symbols": [
            {
              "docInfo": {
                "heading": "NL Classification",
                "subheading": "Base model"
              },
              "symbolName": "NLClassifier",
              "documentation": "The base class for all NLClassification task models.",
              "fileName": "#30",
              "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/nl_classification/common.ts#L30-L50",
              "methods": [
                {
                  "docInfo": {
                    "heading": "NL Classification",
                    "subheading": "Base model"
                  },
                  "symbolName": "predict",
                  "paramStr": "(text, options?)",
                  "parameters": [
                    {
                      "name": "text",
                      "documentation": "The text to predict on.",
                      "type": "string",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "options",
                      "documentation": "Inference options. Different models have different\ninference options. See individual model for more details.",
                      "type": "IO",
                      "optional": true,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "Promise<NLClassificationResult>",
                  "documentation": "Predicts classes on the given text, and returns result.",
                  "fileName": "#42",
                  "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/nl_classification/common.ts#L42-L42",
                  "isFunction": true,
                  "unpackedReturnTypes": [
                    {
                      "description": "`NLClassificationResult`",
                      "symbol": "NLClassificationResult",
                      "params": [
                        {
                          "name": "classes",
                          "type": "Class[]",
                          "documentation": "All predicted classes.",
                          "optional": false,
                          "isConfigParam": true
                        }
                      ]
                    },
                    {
                      "description": "`Class`",
                      "symbol": "Class",
                      "params": [
                        {
                          "name": "className",
                          "type": "string",
                          "documentation": "The name of the class.",
                          "optional": false,
                          "isConfigParam": true
                        },
                        {
                          "name": "score",
                          "type": "number",
                          "documentation": "The score of the class.",
                          "optional": false,
                          "isConfigParam": true
                        }
                      ]
                    }
                  ],
                  "urlHash": "tfTask.NLClassifier.predict"
                },
                {
                  "docInfo": {
                    "heading": "NL Classification",
                    "subheading": "Base model"
                  },
                  "symbolName": "cleanUp",
                  "paramStr": "()",
                  "parameters": [],
                  "returnType": "void",
                  "documentation": "Cleans up resources if needed.",
                  "fileName": "#49",
                  "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/nl_classification/common.ts#L49-L49",
                  "isFunction": true,
                  "urlHash": "tfTask.NLClassifier.cleanUp"
                }
              ],
              "isClass": true,
              "inheritsFrom": "TaskModel",
              "displayName": "tfTask.NLClassifier",
              "urlHash": "class:NLClassifier"
            }
          ]
        },
        {
          "name": "Models",
          "symbols": [
            {
              "docInfo": {
                "heading": "NL Classification",
                "subheading": "Models"
              },
              "symbolName": "NCCustomModelTFLite",
              "documentation": "A custom TFLite natural language classification model loaded from a model url\nor an `ArrayBuffer` in memory.\n\nThe underlying NL classifier is built on top of the NLClassifier in\n[TFLite Task\nLibrary](https://www.tensorflow.org/lite/inference_with_metadata/task_library/overview).\nAs a result, the custom model needs to meet the [metadata\nrequirements](https://www.tensorflow.org/lite/inference_with_metadata/task_library/nl_classifier#model_compatibility_requirements).\n\nUsage:\n\n```js\n// Load the model from a custom url with other options (optional).\nconst model = await tfTask.NLClassification.CustomModel.TFLite.load({\n   model:\n'https://storage.googleapis.com/download.tensorflow.org/models/tflite/text_classification/text_classification_v2.tflite',\n});\n\n// Run inference on text.\nconst result = await model.predict('This is a great movie!');\nconsole.log(result.classes);\n\n// Clean up.\nmodel.cleanUp();\n```\n\nRefer to [tfTask.NLClassifier](#class:NLClassifier) for the `predict` and `cleanUp` method.",
              "fileName": "#110",
              "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/nl_classification/custom_model_tflite.ts#L110-L111",
              "methods": [],
              "isClass": true,
              "inheritsFrom": "NLClassifierTFLite",
              "extraTypes": [
                {
                  "description": "Options for `load`",
                  "symbol": "NCCustomModelTFLiteLoadingOptions",
                  "params": [
                    {
                      "name": "model",
                      "type": "string|ArrayBuffer",
                      "documentation": "The model url, or the model content stored in an `ArrayBuffer`.\n\nYou can use TFLite model urls from `tfhub.dev` directly. For model\ncompatibility, see comments in the corresponding model class.",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "inputTensorIndex",
                      "type": "number",
                      "documentation": "Index of the input tensor.",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "outputScoreTensorIndex",
                      "type": "number",
                      "documentation": "Index of the output score tensor.",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "outputLabelTensorIndex",
                      "type": "number",
                      "documentation": "Index of the output label tensor.",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "inputTensorName",
                      "type": "string",
                      "documentation": "Name of the input tensor.",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "outputScoreTensorName",
                      "type": "string",
                      "documentation": "Name of the output score tensor.",
                      "optional": false,
                      "isConfigParam": true
                    },
                    {
                      "name": "outputLabelTensorName",
                      "type": "string",
                      "documentation": "Name of the output label tensor.",
                      "optional": false,
                      "isConfigParam": true
                    }
                  ]
                },
                {
                  "description": "Options for `predict`",
                  "symbol": "NCCustomModelTFLiteInferenceOptions",
                  "params": []
                }
              ],
              "displayName": "tfTask.NCCustomModelTFLite",
              "urlHash": "class:NCCustomModelTFLite"
            }
          ]
        }
      ]
    },
    {
      "name": "Question & Answer",
      "description": "<p>\nThe task of answering questions based on the content of a given passage.",
      "subheadings": [
        {
          "name": "Base model",
          "symbols": [
            {
              "docInfo": {
                "heading": "Question & Answer",
                "subheading": "Base model"
              },
              "symbolName": "QuestionAnswerer",
              "documentation": "The base class for all Q&A task models.",
              "fileName": "#29",
              "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/question_and_answer/common.ts#L29-L50",
              "methods": [
                {
                  "docInfo": {
                    "heading": "Question & Answer",
                    "subheading": "Base model"
                  },
                  "symbolName": "predict",
                  "paramStr": "(question, context, options?)",
                  "parameters": [
                    {
                      "name": "question",
                      "documentation": "",
                      "type": "string",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "context",
                      "documentation": "Context where the answer are looked up from.",
                      "type": "string",
                      "optional": false,
                      "isConfigParam": false
                    },
                    {
                      "name": "options",
                      "documentation": "",
                      "type": "IO",
                      "optional": true,
                      "isConfigParam": false
                    }
                  ],
                  "returnType": "Promise<QuestionAnswerResult>",
                  "documentation": "Gets the answer to the given question based on the content of a given\npassage.",
                  "fileName": "#41",
                  "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/question_and_answer/common.ts#L41-L42",
                  "isFunction": true,
                  "unpackedReturnTypes": [
                    {
                      "description": "`QuestionAnswerResult`",
                      "symbol": "QuestionAnswerResult",
                      "params": [
                        {
                          "name": "answers",
                          "type": "Answer[]",
                          "documentation": "All predicted answers.",
                          "optional": false,
                          "isConfigParam": true
                        }
                      ]
                    },
                    {
                      "description": "`Answer`",
                      "symbol": "Answer",
                      "params": [
                        {
                          "name": "text",
                          "type": "string",
                          "documentation": "The text of the answer.",
                          "optional": false,
                          "isConfigParam": true
                        },
                        {
                          "name": "startIndex",
                          "type": "number",
                          "documentation": "The index of the starting character of the answer in the passage.",
                          "optional": false,
                          "isConfigParam": true
                        },
                        {
                          "name": "endIndex",
                          "type": "number",
                          "documentation": "The index of the last character of the answer text.",
                          "optional": false,
                          "isConfigParam": true
                        },
                        {
                          "name": "score",
                          "type": "number",
                          "documentation": "Indicates the confident level.",
                          "optional": false,
                          "isConfigParam": true
                        }
                      ]
                    }
                  ],
                  "urlHash": "tfTask.QuestionAnswerer.predict"
                },
                {
                  "docInfo": {
                    "heading": "Question & Answer",
                    "subheading": "Base model"
                  },
                  "symbolName": "cleanUp",
                  "paramStr": "()",
                  "parameters": [],
                  "returnType": "void",
                  "documentation": "Cleans up resources if needed.",
                  "fileName": "#49",
                  "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/question_and_answer/common.ts#L49-L49",
                  "isFunction": true,
                  "urlHash": "tfTask.QuestionAnswerer.cleanUp"
                }
              ],
              "isClass": true,
              "inheritsFrom": "TaskModel",
              "displayName": "tfTask.QuestionAnswerer",
              "urlHash": "class:QuestionAnswerer"
            }
          ]
        },
        {
          "name": "Models",
          "symbols": [
            {
              "docInfo": {
                "heading": "Question & Answer",
                "subheading": "Models"
              },
              "symbolName": "BertQATFJS",
              "documentation": "Pre-trained TFJS Bert Q&A model.\n\nUsage:\n\n```js\n// Load the model with options (optional).\nconst model = await tfTask.QuestionAndAnswer.BertQA.TFJS.load();\n\n// Run inference with question and context.\nconst result = await model.predict(question, context);\nconsole.log(result.answers);\n\n// Clean up.\nmodel.cleanUp();\n```\n\nRefer to [tfTask.QuestionAnswerer](#class:QuestionAnswerer) for the `predict` and `cleanUp` method.",
              "fileName": "#98",
              "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/question_and_answer/bert_qa_tfjs.ts#L98-L116",
              "methods": [],
              "isClass": true,
              "inheritsFrom": "[tfTask.QuestionAnswerer](#class:QuestionAnswerer)",
              "extraTypes": [
                {
                  "description": "Options for `load`",
                  "symbol": "BertQATFJSLoadingOptions",
                  "params": [
                    {
                      "name": "backend",
                      "type": "'cpu'|'webgl'|'wasm'",
                      "documentation": "The backend to use to run TFJS models. Default to 'webgl'.",
                      "optional": false,
                      "isConfigParam": true
                    }
                  ]
                },
                {
                  "description": "Options for `predict`",
                  "symbol": "BertQATFJSInferenceOptions",
                  "params": []
                }
              ],
              "displayName": "tfTask.BertQATFJS",
              "urlHash": "class:BertQATFJS"
            },
            {
              "docInfo": {
                "heading": "Question & Answer",
                "subheading": "Models"
              },
              "symbolName": "BertQATFLite",
              "documentation": "Pre-trained TFLite Bert Q&A model.\n\nUsage:\n\n```js\n// Load the model.\nconst model = await tfTask.QuestionAndAnswer.BertQA.TFLite.load();\n\n// Run inference on an image.\nconst result = await model.predict(question, context);\nconsole.log(result);\n\n// Clean up.\nmodel.cleanUp();\n```\n\nRefer to [tfTask.QuestionAnswerer](#class:QuestionAnswerer) for the `predict` and `cleanUp` method.",
              "fileName": "#93",
              "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/question_and_answer/bert_qa_tflite.ts#L93-L94",
              "methods": [],
              "isClass": true,
              "inheritsFrom": "QuestionAnswererTFLite",
              "extraTypes": [
                {
                  "description": "Options for `load`",
                  "symbol": "BertQATFLiteLoadingOptions",
                  "params": []
                },
                {
                  "description": "Options for `predict`",
                  "symbol": "BertQATFLiteInferenceOptions",
                  "params": []
                }
              ],
              "displayName": "tfTask.BertQATFLite",
              "urlHash": "class:BertQATFLite"
            },
            {
              "docInfo": {
                "heading": "Question & Answer",
                "subheading": "Models"
              },
              "symbolName": "QACustomModelTFLite",
              "documentation": "A custom TFLite Q&A model loaded from a model url or an `ArrayBuffer` in\nmemory.\n\nThe underlying question answerer is built on top of the [TFLite Task\nLibrary](https://www.tensorflow.org/lite/inference_with_metadata/task_library/overview).\nAs a result, the custom model needs to meet the [metadata\nrequirements](https://www.tensorflow.org/lite/inference_with_metadata/task_library/bert_question_answerer#model_compatibility_requirements).\n\nUsage:\n\n```js\n// Load the model from a custom url.\nconst model = await tfTask.QuestionAndAnswer.CustomModel.TFLite.load({\n   model:\n'https://tfhub.dev/tensorflow/lite-model/mobilebert/1/metadata/1?lite-format=tflite',\n});\n\n// Run inference with question and context.\nconst result = await model.predict(question, context);\nconsole.log(result.answers);\n\n// Clean up.\nmodel.cleanUp();\n```\n\nRefer to [tfTask.QuestionAnswerer](#class:QuestionAnswerer) for the `predict` and `cleanUp` method.",
              "fileName": "#110",
              "githubUrl": "https://github.com/tensorflow/tfjs-models/tree/tasks-v0.0.1-alpha.7/tasks/src/tasks/question_and_answer/custom_model_tflite.ts#L110-L111",
              "methods": [],
              "isClass": true,
              "inheritsFrom": "QuestionAnswererTFLite",
              "extraTypes": [
                {
                  "description": "Options for `load`",
                  "symbol": "QACustomModelTFLiteLoadingOptions",
                  "params": [
                    {
                      "name": "model",
                      "type": "string|ArrayBuffer",
                      "documentation": "The model url, or the model content stored in an `ArrayBuffer`.\n\nYou can use TFLite model urls from `tfhub.dev` directly. For model\ncompatibility, see comments in the corresponding model class.",
                      "optional": false,
                      "isConfigParam": true
                    }
                  ]
                },
                {
                  "description": "Options for `predict`",
                  "symbol": "QACustomModelTFLiteInferenceOptions",
                  "params": []
                }
              ],
              "displayName": "tfTask.QACustomModelTFLite",
              "urlHash": "class:QACustomModelTFLite"
            }
          ]
        }
      ]
    }
  ]
}